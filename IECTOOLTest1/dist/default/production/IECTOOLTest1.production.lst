

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Feb  3 19:05:29 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18344
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	swtext2,local,class=CONST,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	dabs	1,0x7E,2
    65  0000                     
    66                           ; Version 1.41
    67                           ; Generated 25/01/2017 GMT
    68                           ; 
    69                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC16F18344 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  0019                     	;# 
   128  001A                     	;# 
   129  001B                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001E                     	;# 
   133  001F                     	;# 
   134  008C                     	;# 
   135  008D                     	;# 
   136  008E                     	;# 
   137  0090                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0097                     	;# 
   143  009B                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  009F                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  0111                     	;# 
   153  0112                     	;# 
   154  0113                     	;# 
   155  0114                     	;# 
   156  0115                     	;# 
   157  0116                     	;# 
   158  0117                     	;# 
   159  0118                     	;# 
   160  0119                     	;# 
   161  018C                     	;# 
   162  018D                     	;# 
   163  018E                     	;# 
   164  0197                     	;# 
   165  0199                     	;# 
   166  0199                     	;# 
   167  0199                     	;# 
   168  019A                     	;# 
   169  019A                     	;# 
   170  019A                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019C                     	;# 
   177  019C                     	;# 
   178  019C                     	;# 
   179  019D                     	;# 
   180  019D                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019E                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  020C                     	;# 
   191  020D                     	;# 
   192  020E                     	;# 
   193  0211                     	;# 
   194  0211                     	;# 
   195  0212                     	;# 
   196  0212                     	;# 
   197  0213                     	;# 
   198  0213                     	;# 
   199  0214                     	;# 
   200  0214                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0216                     	;# 
   206  0216                     	;# 
   207  0217                     	;# 
   208  0217                     	;# 
   209  028C                     	;# 
   210  028D                     	;# 
   211  028E                     	;# 
   212  0291                     	;# 
   213  0291                     	;# 
   214  0292                     	;# 
   215  0293                     	;# 
   216  0294                     	;# 
   217  0295                     	;# 
   218  0295                     	;# 
   219  0296                     	;# 
   220  0297                     	;# 
   221  0298                     	;# 
   222  029F                     	;# 
   223  030C                     	;# 
   224  030D                     	;# 
   225  030E                     	;# 
   226  0311                     	;# 
   227  0311                     	;# 
   228  0312                     	;# 
   229  0313                     	;# 
   230  0314                     	;# 
   231  0315                     	;# 
   232  0315                     	;# 
   233  0316                     	;# 
   234  0317                     	;# 
   235  0318                     	;# 
   236  038C                     	;# 
   237  038D                     	;# 
   238  038E                     	;# 
   239  0391                     	;# 
   240  0392                     	;# 
   241  0393                     	;# 
   242  0394                     	;# 
   243  0395                     	;# 
   244  0396                     	;# 
   245  0397                     	;# 
   246  0398                     	;# 
   247  0399                     	;# 
   248  039A                     	;# 
   249  039C                     	;# 
   250  039D                     	;# 
   251  039E                     	;# 
   252  039F                     	;# 
   253  0411                     	;# 
   254  0411                     	;# 
   255  0412                     	;# 
   256  0413                     	;# 
   257  0414                     	;# 
   258  0415                     	;# 
   259  0416                     	;# 
   260  0417                     	;# 
   261  0418                     	;# 
   262  0418                     	;# 
   263  0419                     	;# 
   264  041A                     	;# 
   265  041B                     	;# 
   266  041C                     	;# 
   267  041D                     	;# 
   268  041E                     	;# 
   269  041F                     	;# 
   270  0498                     	;# 
   271  0498                     	;# 
   272  0499                     	;# 
   273  049A                     	;# 
   274  049B                     	;# 
   275  049B                     	;# 
   276  049C                     	;# 
   277  049D                     	;# 
   278  049E                     	;# 
   279  049F                     	;# 
   280  0617                     	;# 
   281  0618                     	;# 
   282  0619                     	;# 
   283  0619                     	;# 
   284  061A                     	;# 
   285  061B                     	;# 
   286  061C                     	;# 
   287  061C                     	;# 
   288  061F                     	;# 
   289  0691                     	;# 
   290  0692                     	;# 
   291  0693                     	;# 
   292  0694                     	;# 
   293  0695                     	;# 
   294  0696                     	;# 
   295  0697                     	;# 
   296  0698                     	;# 
   297  0699                     	;# 
   298  0711                     	;# 
   299  0712                     	;# 
   300  0713                     	;# 
   301  0714                     	;# 
   302  0715                     	;# 
   303  0716                     	;# 
   304  0717                     	;# 
   305  0718                     	;# 
   306  0719                     	;# 
   307  0891                     	;# 
   308  0891                     	;# 
   309  0891                     	;# 
   310  0891                     	;# 
   311  0891                     	;# 
   312  0891                     	;# 
   313  0892                     	;# 
   314  0892                     	;# 
   315  0892                     	;# 
   316  0893                     	;# 
   317  0893                     	;# 
   318  0893                     	;# 
   319  0893                     	;# 
   320  0893                     	;# 
   321  0893                     	;# 
   322  0894                     	;# 
   323  0894                     	;# 
   324  0894                     	;# 
   325  0895                     	;# 
   326  0895                     	;# 
   327  0895                     	;# 
   328  0896                     	;# 
   329  0896                     	;# 
   330  0896                     	;# 
   331  089B                     	;# 
   332  0911                     	;# 
   333  0912                     	;# 
   334  0913                     	;# 
   335  0914                     	;# 
   336  0915                     	;# 
   337  0916                     	;# 
   338  0918                     	;# 
   339  0919                     	;# 
   340  091A                     	;# 
   341  091B                     	;# 
   342  091C                     	;# 
   343  091D                     	;# 
   344  091E                     	;# 
   345  091F                     	;# 
   346  0E0F                     	;# 
   347  0E10                     	;# 
   348  0E11                     	;# 
   349  0E12                     	;# 
   350  0E13                     	;# 
   351  0E14                     	;# 
   352  0E15                     	;# 
   353  0E16                     	;# 
   354  0E17                     	;# 
   355  0E18                     	;# 
   356  0E19                     	;# 
   357  0E1A                     	;# 
   358  0E1B                     	;# 
   359  0E1C                     	;# 
   360  0E20                     	;# 
   361  0E21                     	;# 
   362  0E22                     	;# 
   363  0E24                     	;# 
   364  0E25                     	;# 
   365  0E28                     	;# 
   366  0E29                     	;# 
   367  0E2A                     	;# 
   368  0E2B                     	;# 
   369  0E2C                     	;# 
   370  0E2D                     	;# 
   371  0E2E                     	;# 
   372  0E2F                     	;# 
   373  0E90                     	;# 
   374  0E91                     	;# 
   375  0E92                     	;# 
   376  0E94                     	;# 
   377  0E95                     	;# 
   378  0E9C                     	;# 
   379  0E9D                     	;# 
   380  0E9E                     	;# 
   381  0E9F                     	;# 
   382  0EA0                     	;# 
   383  0EA1                     	;# 
   384  0EA2                     	;# 
   385  0EA3                     	;# 
   386  0EA4                     	;# 
   387  0EA5                     	;# 
   388  0EA6                     	;# 
   389  0EA7                     	;# 
   390  0F0F                     	;# 
   391  0F10                     	;# 
   392  0F11                     	;# 
   393  0F12                     	;# 
   394  0F13                     	;# 
   395  0F14                     	;# 
   396  0F15                     	;# 
   397  0F16                     	;# 
   398  0F17                     	;# 
   399  0F18                     	;# 
   400  0F19                     	;# 
   401  0F1A                     	;# 
   402  0F1B                     	;# 
   403  0F1C                     	;# 
   404  0F1D                     	;# 
   405  0F1E                     	;# 
   406  0F1F                     	;# 
   407  0F20                     	;# 
   408  0F21                     	;# 
   409  0F22                     	;# 
   410  0F23                     	;# 
   411  0F24                     	;# 
   412  0F25                     	;# 
   413  0F26                     	;# 
   414  0F27                     	;# 
   415  0F28                     	;# 
   416  0F29                     	;# 
   417  0F2A                     	;# 
   418  0F2B                     	;# 
   419  0F2C                     	;# 
   420  0F2D                     	;# 
   421  0F2E                     	;# 
   422  0F2F                     	;# 
   423  0F30                     	;# 
   424  0F31                     	;# 
   425  0F32                     	;# 
   426  0F33                     	;# 
   427  0F34                     	;# 
   428  0F35                     	;# 
   429  0F36                     	;# 
   430  0F37                     	;# 
   431  0FE4                     	;# 
   432  0FE5                     	;# 
   433  0FE6                     	;# 
   434  0FE7                     	;# 
   435  0FE8                     	;# 
   436  0FE9                     	;# 
   437  0FEA                     	;# 
   438  0FEB                     	;# 
   439  0FED                     	;# 
   440  0FEE                     	;# 
   441  0FEF                     	;# 
   442  0000                     	;# 
   443  0001                     	;# 
   444  0002                     	;# 
   445  0003                     	;# 
   446  0004                     	;# 
   447  0005                     	;# 
   448  0006                     	;# 
   449  0007                     	;# 
   450  0008                     	;# 
   451  0009                     	;# 
   452  000A                     	;# 
   453  000B                     	;# 
   454  000C                     	;# 
   455  000D                     	;# 
   456  000E                     	;# 
   457  0010                     	;# 
   458  0011                     	;# 
   459  0012                     	;# 
   460  0013                     	;# 
   461  0014                     	;# 
   462  0015                     	;# 
   463  0015                     	;# 
   464  0016                     	;# 
   465  0016                     	;# 
   466  0017                     	;# 
   467  0018                     	;# 
   468  0019                     	;# 
   469  0019                     	;# 
   470  001A                     	;# 
   471  001B                     	;# 
   472  001C                     	;# 
   473  001D                     	;# 
   474  001E                     	;# 
   475  001F                     	;# 
   476  008C                     	;# 
   477  008D                     	;# 
   478  008E                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0094                     	;# 
   484  0097                     	;# 
   485  009B                     	;# 
   486  009B                     	;# 
   487  009C                     	;# 
   488  009D                     	;# 
   489  009E                     	;# 
   490  009F                     	;# 
   491  010C                     	;# 
   492  010D                     	;# 
   493  010E                     	;# 
   494  0111                     	;# 
   495  0112                     	;# 
   496  0113                     	;# 
   497  0114                     	;# 
   498  0115                     	;# 
   499  0116                     	;# 
   500  0117                     	;# 
   501  0118                     	;# 
   502  0119                     	;# 
   503  018C                     	;# 
   504  018D                     	;# 
   505  018E                     	;# 
   506  0197                     	;# 
   507  0199                     	;# 
   508  0199                     	;# 
   509  0199                     	;# 
   510  019A                     	;# 
   511  019A                     	;# 
   512  019A                     	;# 
   513  019B                     	;# 
   514  019B                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019C                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019D                     	;# 
   522  019D                     	;# 
   523  019D                     	;# 
   524  019E                     	;# 
   525  019E                     	;# 
   526  019E                     	;# 
   527  019F                     	;# 
   528  019F                     	;# 
   529  019F                     	;# 
   530  019F                     	;# 
   531  019F                     	;# 
   532  020C                     	;# 
   533  020D                     	;# 
   534  020E                     	;# 
   535  0211                     	;# 
   536  0211                     	;# 
   537  0212                     	;# 
   538  0212                     	;# 
   539  0213                     	;# 
   540  0213                     	;# 
   541  0214                     	;# 
   542  0214                     	;# 
   543  0215                     	;# 
   544  0215                     	;# 
   545  0215                     	;# 
   546  0215                     	;# 
   547  0216                     	;# 
   548  0216                     	;# 
   549  0217                     	;# 
   550  0217                     	;# 
   551  028C                     	;# 
   552  028D                     	;# 
   553  028E                     	;# 
   554  0291                     	;# 
   555  0291                     	;# 
   556  0292                     	;# 
   557  0293                     	;# 
   558  0294                     	;# 
   559  0295                     	;# 
   560  0295                     	;# 
   561  0296                     	;# 
   562  0297                     	;# 
   563  0298                     	;# 
   564  029F                     	;# 
   565  030C                     	;# 
   566  030D                     	;# 
   567  030E                     	;# 
   568  0311                     	;# 
   569  0311                     	;# 
   570  0312                     	;# 
   571  0313                     	;# 
   572  0314                     	;# 
   573  0315                     	;# 
   574  0315                     	;# 
   575  0316                     	;# 
   576  0317                     	;# 
   577  0318                     	;# 
   578  038C                     	;# 
   579  038D                     	;# 
   580  038E                     	;# 
   581  0391                     	;# 
   582  0392                     	;# 
   583  0393                     	;# 
   584  0394                     	;# 
   585  0395                     	;# 
   586  0396                     	;# 
   587  0397                     	;# 
   588  0398                     	;# 
   589  0399                     	;# 
   590  039A                     	;# 
   591  039C                     	;# 
   592  039D                     	;# 
   593  039E                     	;# 
   594  039F                     	;# 
   595  0411                     	;# 
   596  0411                     	;# 
   597  0412                     	;# 
   598  0413                     	;# 
   599  0414                     	;# 
   600  0415                     	;# 
   601  0416                     	;# 
   602  0417                     	;# 
   603  0418                     	;# 
   604  0418                     	;# 
   605  0419                     	;# 
   606  041A                     	;# 
   607  041B                     	;# 
   608  041C                     	;# 
   609  041D                     	;# 
   610  041E                     	;# 
   611  041F                     	;# 
   612  0498                     	;# 
   613  0498                     	;# 
   614  0499                     	;# 
   615  049A                     	;# 
   616  049B                     	;# 
   617  049B                     	;# 
   618  049C                     	;# 
   619  049D                     	;# 
   620  049E                     	;# 
   621  049F                     	;# 
   622  0617                     	;# 
   623  0618                     	;# 
   624  0619                     	;# 
   625  0619                     	;# 
   626  061A                     	;# 
   627  061B                     	;# 
   628  061C                     	;# 
   629  061C                     	;# 
   630  061F                     	;# 
   631  0691                     	;# 
   632  0692                     	;# 
   633  0693                     	;# 
   634  0694                     	;# 
   635  0695                     	;# 
   636  0696                     	;# 
   637  0697                     	;# 
   638  0698                     	;# 
   639  0699                     	;# 
   640  0711                     	;# 
   641  0712                     	;# 
   642  0713                     	;# 
   643  0714                     	;# 
   644  0715                     	;# 
   645  0716                     	;# 
   646  0717                     	;# 
   647  0718                     	;# 
   648  0719                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0891                     	;# 
   652  0891                     	;# 
   653  0891                     	;# 
   654  0891                     	;# 
   655  0892                     	;# 
   656  0892                     	;# 
   657  0892                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0893                     	;# 
   661  0893                     	;# 
   662  0893                     	;# 
   663  0893                     	;# 
   664  0894                     	;# 
   665  0894                     	;# 
   666  0894                     	;# 
   667  0895                     	;# 
   668  0895                     	;# 
   669  0895                     	;# 
   670  0896                     	;# 
   671  0896                     	;# 
   672  0896                     	;# 
   673  089B                     	;# 
   674  0911                     	;# 
   675  0912                     	;# 
   676  0913                     	;# 
   677  0914                     	;# 
   678  0915                     	;# 
   679  0916                     	;# 
   680  0918                     	;# 
   681  0919                     	;# 
   682  091A                     	;# 
   683  091B                     	;# 
   684  091C                     	;# 
   685  091D                     	;# 
   686  091E                     	;# 
   687  091F                     	;# 
   688  0E0F                     	;# 
   689  0E10                     	;# 
   690  0E11                     	;# 
   691  0E12                     	;# 
   692  0E13                     	;# 
   693  0E14                     	;# 
   694  0E15                     	;# 
   695  0E16                     	;# 
   696  0E17                     	;# 
   697  0E18                     	;# 
   698  0E19                     	;# 
   699  0E1A                     	;# 
   700  0E1B                     	;# 
   701  0E1C                     	;# 
   702  0E20                     	;# 
   703  0E21                     	;# 
   704  0E22                     	;# 
   705  0E24                     	;# 
   706  0E25                     	;# 
   707  0E28                     	;# 
   708  0E29                     	;# 
   709  0E2A                     	;# 
   710  0E2B                     	;# 
   711  0E2C                     	;# 
   712  0E2D                     	;# 
   713  0E2E                     	;# 
   714  0E2F                     	;# 
   715  0E90                     	;# 
   716  0E91                     	;# 
   717  0E92                     	;# 
   718  0E94                     	;# 
   719  0E95                     	;# 
   720  0E9C                     	;# 
   721  0E9D                     	;# 
   722  0E9E                     	;# 
   723  0E9F                     	;# 
   724  0EA0                     	;# 
   725  0EA1                     	;# 
   726  0EA2                     	;# 
   727  0EA3                     	;# 
   728  0EA4                     	;# 
   729  0EA5                     	;# 
   730  0EA6                     	;# 
   731  0EA7                     	;# 
   732  0F0F                     	;# 
   733  0F10                     	;# 
   734  0F11                     	;# 
   735  0F12                     	;# 
   736  0F13                     	;# 
   737  0F14                     	;# 
   738  0F15                     	;# 
   739  0F16                     	;# 
   740  0F17                     	;# 
   741  0F18                     	;# 
   742  0F19                     	;# 
   743  0F1A                     	;# 
   744  0F1B                     	;# 
   745  0F1C                     	;# 
   746  0F1D                     	;# 
   747  0F1E                     	;# 
   748  0F1F                     	;# 
   749  0F20                     	;# 
   750  0F21                     	;# 
   751  0F22                     	;# 
   752  0F23                     	;# 
   753  0F24                     	;# 
   754  0F25                     	;# 
   755  0F26                     	;# 
   756  0F27                     	;# 
   757  0F28                     	;# 
   758  0F29                     	;# 
   759  0F2A                     	;# 
   760  0F2B                     	;# 
   761  0F2C                     	;# 
   762  0F2D                     	;# 
   763  0F2E                     	;# 
   764  0F2F                     	;# 
   765  0F30                     	;# 
   766  0F31                     	;# 
   767  0F32                     	;# 
   768  0F33                     	;# 
   769  0F34                     	;# 
   770  0F35                     	;# 
   771  0F36                     	;# 
   772  0F37                     	;# 
   773  0FE4                     	;# 
   774  0FE5                     	;# 
   775  0FE6                     	;# 
   776  0FE7                     	;# 
   777  0FE8                     	;# 
   778  0FE9                     	;# 
   779  0FEA                     	;# 
   780  0FEB                     	;# 
   781  0FED                     	;# 
   782  0FEE                     	;# 
   783  0FEF                     	;# 
   784  0000                     	;# 
   785  0001                     	;# 
   786  0002                     	;# 
   787  0003                     	;# 
   788  0004                     	;# 
   789  0005                     	;# 
   790  0006                     	;# 
   791  0007                     	;# 
   792  0008                     	;# 
   793  0009                     	;# 
   794  000A                     	;# 
   795  000B                     	;# 
   796  000C                     	;# 
   797  000D                     	;# 
   798  000E                     	;# 
   799  0010                     	;# 
   800  0011                     	;# 
   801  0012                     	;# 
   802  0013                     	;# 
   803  0014                     	;# 
   804  0015                     	;# 
   805  0015                     	;# 
   806  0016                     	;# 
   807  0016                     	;# 
   808  0017                     	;# 
   809  0018                     	;# 
   810  0019                     	;# 
   811  0019                     	;# 
   812  001A                     	;# 
   813  001B                     	;# 
   814  001C                     	;# 
   815  001D                     	;# 
   816  001E                     	;# 
   817  001F                     	;# 
   818  008C                     	;# 
   819  008D                     	;# 
   820  008E                     	;# 
   821  0090                     	;# 
   822  0091                     	;# 
   823  0092                     	;# 
   824  0093                     	;# 
   825  0094                     	;# 
   826  0097                     	;# 
   827  009B                     	;# 
   828  009B                     	;# 
   829  009C                     	;# 
   830  009D                     	;# 
   831  009E                     	;# 
   832  009F                     	;# 
   833  010C                     	;# 
   834  010D                     	;# 
   835  010E                     	;# 
   836  0111                     	;# 
   837  0112                     	;# 
   838  0113                     	;# 
   839  0114                     	;# 
   840  0115                     	;# 
   841  0116                     	;# 
   842  0117                     	;# 
   843  0118                     	;# 
   844  0119                     	;# 
   845  018C                     	;# 
   846  018D                     	;# 
   847  018E                     	;# 
   848  0197                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  0199                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019A                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019C                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019D                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019E                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  019F                     	;# 
   874  020C                     	;# 
   875  020D                     	;# 
   876  020E                     	;# 
   877  0211                     	;# 
   878  0211                     	;# 
   879  0212                     	;# 
   880  0212                     	;# 
   881  0213                     	;# 
   882  0213                     	;# 
   883  0214                     	;# 
   884  0214                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0215                     	;# 
   889  0216                     	;# 
   890  0216                     	;# 
   891  0217                     	;# 
   892  0217                     	;# 
   893  028C                     	;# 
   894  028D                     	;# 
   895  028E                     	;# 
   896  0291                     	;# 
   897  0291                     	;# 
   898  0292                     	;# 
   899  0293                     	;# 
   900  0294                     	;# 
   901  0295                     	;# 
   902  0295                     	;# 
   903  0296                     	;# 
   904  0297                     	;# 
   905  0298                     	;# 
   906  029F                     	;# 
   907  030C                     	;# 
   908  030D                     	;# 
   909  030E                     	;# 
   910  0311                     	;# 
   911  0311                     	;# 
   912  0312                     	;# 
   913  0313                     	;# 
   914  0314                     	;# 
   915  0315                     	;# 
   916  0315                     	;# 
   917  0316                     	;# 
   918  0317                     	;# 
   919  0318                     	;# 
   920  038C                     	;# 
   921  038D                     	;# 
   922  038E                     	;# 
   923  0391                     	;# 
   924  0392                     	;# 
   925  0393                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  0397                     	;# 
   930  0398                     	;# 
   931  0399                     	;# 
   932  039A                     	;# 
   933  039C                     	;# 
   934  039D                     	;# 
   935  039E                     	;# 
   936  039F                     	;# 
   937  0411                     	;# 
   938  0411                     	;# 
   939  0412                     	;# 
   940  0413                     	;# 
   941  0414                     	;# 
   942  0415                     	;# 
   943  0416                     	;# 
   944  0417                     	;# 
   945  0418                     	;# 
   946  0418                     	;# 
   947  0419                     	;# 
   948  041A                     	;# 
   949  041B                     	;# 
   950  041C                     	;# 
   951  041D                     	;# 
   952  041E                     	;# 
   953  041F                     	;# 
   954  0498                     	;# 
   955  0498                     	;# 
   956  0499                     	;# 
   957  049A                     	;# 
   958  049B                     	;# 
   959  049B                     	;# 
   960  049C                     	;# 
   961  049D                     	;# 
   962  049E                     	;# 
   963  049F                     	;# 
   964  0617                     	;# 
   965  0618                     	;# 
   966  0619                     	;# 
   967  0619                     	;# 
   968  061A                     	;# 
   969  061B                     	;# 
   970  061C                     	;# 
   971  061C                     	;# 
   972  061F                     	;# 
   973  0691                     	;# 
   974  0692                     	;# 
   975  0693                     	;# 
   976  0694                     	;# 
   977  0695                     	;# 
   978  0696                     	;# 
   979  0697                     	;# 
   980  0698                     	;# 
   981  0699                     	;# 
   982  0711                     	;# 
   983  0712                     	;# 
   984  0713                     	;# 
   985  0714                     	;# 
   986  0715                     	;# 
   987  0716                     	;# 
   988  0717                     	;# 
   989  0718                     	;# 
   990  0719                     	;# 
   991  0891                     	;# 
   992  0891                     	;# 
   993  0891                     	;# 
   994  0891                     	;# 
   995  0891                     	;# 
   996  0891                     	;# 
   997  0892                     	;# 
   998  0892                     	;# 
   999  0892                     	;# 
  1000  0893                     	;# 
  1001  0893                     	;# 
  1002  0893                     	;# 
  1003  0893                     	;# 
  1004  0893                     	;# 
  1005  0893                     	;# 
  1006  0894                     	;# 
  1007  0894                     	;# 
  1008  0894                     	;# 
  1009  0895                     	;# 
  1010  0895                     	;# 
  1011  0895                     	;# 
  1012  0896                     	;# 
  1013  0896                     	;# 
  1014  0896                     	;# 
  1015  089B                     	;# 
  1016  0911                     	;# 
  1017  0912                     	;# 
  1018  0913                     	;# 
  1019  0914                     	;# 
  1020  0915                     	;# 
  1021  0916                     	;# 
  1022  0918                     	;# 
  1023  0919                     	;# 
  1024  091A                     	;# 
  1025  091B                     	;# 
  1026  091C                     	;# 
  1027  091D                     	;# 
  1028  091E                     	;# 
  1029  091F                     	;# 
  1030  0E0F                     	;# 
  1031  0E10                     	;# 
  1032  0E11                     	;# 
  1033  0E12                     	;# 
  1034  0E13                     	;# 
  1035  0E14                     	;# 
  1036  0E15                     	;# 
  1037  0E16                     	;# 
  1038  0E17                     	;# 
  1039  0E18                     	;# 
  1040  0E19                     	;# 
  1041  0E1A                     	;# 
  1042  0E1B                     	;# 
  1043  0E1C                     	;# 
  1044  0E20                     	;# 
  1045  0E21                     	;# 
  1046  0E22                     	;# 
  1047  0E24                     	;# 
  1048  0E25                     	;# 
  1049  0E28                     	;# 
  1050  0E29                     	;# 
  1051  0E2A                     	;# 
  1052  0E2B                     	;# 
  1053  0E2C                     	;# 
  1054  0E2D                     	;# 
  1055  0E2E                     	;# 
  1056  0E2F                     	;# 
  1057  0E90                     	;# 
  1058  0E91                     	;# 
  1059  0E92                     	;# 
  1060  0E94                     	;# 
  1061  0E95                     	;# 
  1062  0E9C                     	;# 
  1063  0E9D                     	;# 
  1064  0E9E                     	;# 
  1065  0E9F                     	;# 
  1066  0EA0                     	;# 
  1067  0EA1                     	;# 
  1068  0EA2                     	;# 
  1069  0EA3                     	;# 
  1070  0EA4                     	;# 
  1071  0EA5                     	;# 
  1072  0EA6                     	;# 
  1073  0EA7                     	;# 
  1074  0F0F                     	;# 
  1075  0F10                     	;# 
  1076  0F11                     	;# 
  1077  0F12                     	;# 
  1078  0F13                     	;# 
  1079  0F14                     	;# 
  1080  0F15                     	;# 
  1081  0F16                     	;# 
  1082  0F17                     	;# 
  1083  0F18                     	;# 
  1084  0F19                     	;# 
  1085  0F1A                     	;# 
  1086  0F1B                     	;# 
  1087  0F1C                     	;# 
  1088  0F1D                     	;# 
  1089  0F1E                     	;# 
  1090  0F1F                     	;# 
  1091  0F20                     	;# 
  1092  0F21                     	;# 
  1093  0F22                     	;# 
  1094  0F23                     	;# 
  1095  0F24                     	;# 
  1096  0F25                     	;# 
  1097  0F26                     	;# 
  1098  0F27                     	;# 
  1099  0F28                     	;# 
  1100  0F29                     	;# 
  1101  0F2A                     	;# 
  1102  0F2B                     	;# 
  1103  0F2C                     	;# 
  1104  0F2D                     	;# 
  1105  0F2E                     	;# 
  1106  0F2F                     	;# 
  1107  0F30                     	;# 
  1108  0F31                     	;# 
  1109  0F32                     	;# 
  1110  0F33                     	;# 
  1111  0F34                     	;# 
  1112  0F35                     	;# 
  1113  0F36                     	;# 
  1114  0F37                     	;# 
  1115  0FE4                     	;# 
  1116  0FE5                     	;# 
  1117  0FE6                     	;# 
  1118  0FE7                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEB                     	;# 
  1123  0FED                     	;# 
  1124  0FEE                     	;# 
  1125  0FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000D                     	;# 
  1140  000E                     	;# 
  1141  0010                     	;# 
  1142  0011                     	;# 
  1143  0012                     	;# 
  1144  0013                     	;# 
  1145  0014                     	;# 
  1146  0015                     	;# 
  1147  0015                     	;# 
  1148  0016                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  0019                     	;# 
  1154  001A                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  001D                     	;# 
  1158  001E                     	;# 
  1159  001F                     	;# 
  1160  008C                     	;# 
  1161  008D                     	;# 
  1162  008E                     	;# 
  1163  0090                     	;# 
  1164  0091                     	;# 
  1165  0092                     	;# 
  1166  0093                     	;# 
  1167  0094                     	;# 
  1168  0097                     	;# 
  1169  009B                     	;# 
  1170  009B                     	;# 
  1171  009C                     	;# 
  1172  009D                     	;# 
  1173  009E                     	;# 
  1174  009F                     	;# 
  1175  010C                     	;# 
  1176  010D                     	;# 
  1177  010E                     	;# 
  1178  0111                     	;# 
  1179  0112                     	;# 
  1180  0113                     	;# 
  1181  0114                     	;# 
  1182  0115                     	;# 
  1183  0116                     	;# 
  1184  0117                     	;# 
  1185  0118                     	;# 
  1186  0119                     	;# 
  1187  018C                     	;# 
  1188  018D                     	;# 
  1189  018E                     	;# 
  1190  0197                     	;# 
  1191  0199                     	;# 
  1192  0199                     	;# 
  1193  0199                     	;# 
  1194  019A                     	;# 
  1195  019A                     	;# 
  1196  019A                     	;# 
  1197  019B                     	;# 
  1198  019B                     	;# 
  1199  019B                     	;# 
  1200  019B                     	;# 
  1201  019B                     	;# 
  1202  019C                     	;# 
  1203  019C                     	;# 
  1204  019C                     	;# 
  1205  019D                     	;# 
  1206  019D                     	;# 
  1207  019D                     	;# 
  1208  019E                     	;# 
  1209  019E                     	;# 
  1210  019E                     	;# 
  1211  019F                     	;# 
  1212  019F                     	;# 
  1213  019F                     	;# 
  1214  019F                     	;# 
  1215  019F                     	;# 
  1216  020C                     	;# 
  1217  020D                     	;# 
  1218  020E                     	;# 
  1219  0211                     	;# 
  1220  0211                     	;# 
  1221  0212                     	;# 
  1222  0212                     	;# 
  1223  0213                     	;# 
  1224  0213                     	;# 
  1225  0214                     	;# 
  1226  0214                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0215                     	;# 
  1230  0215                     	;# 
  1231  0216                     	;# 
  1232  0216                     	;# 
  1233  0217                     	;# 
  1234  0217                     	;# 
  1235  028C                     	;# 
  1236  028D                     	;# 
  1237  028E                     	;# 
  1238  0291                     	;# 
  1239  0291                     	;# 
  1240  0292                     	;# 
  1241  0293                     	;# 
  1242  0294                     	;# 
  1243  0295                     	;# 
  1244  0295                     	;# 
  1245  0296                     	;# 
  1246  0297                     	;# 
  1247  0298                     	;# 
  1248  029F                     	;# 
  1249  030C                     	;# 
  1250  030D                     	;# 
  1251  030E                     	;# 
  1252  0311                     	;# 
  1253  0311                     	;# 
  1254  0312                     	;# 
  1255  0313                     	;# 
  1256  0314                     	;# 
  1257  0315                     	;# 
  1258  0315                     	;# 
  1259  0316                     	;# 
  1260  0317                     	;# 
  1261  0318                     	;# 
  1262  038C                     	;# 
  1263  038D                     	;# 
  1264  038E                     	;# 
  1265  0391                     	;# 
  1266  0392                     	;# 
  1267  0393                     	;# 
  1268  0394                     	;# 
  1269  0395                     	;# 
  1270  0396                     	;# 
  1271  0397                     	;# 
  1272  0398                     	;# 
  1273  0399                     	;# 
  1274  039A                     	;# 
  1275  039C                     	;# 
  1276  039D                     	;# 
  1277  039E                     	;# 
  1278  039F                     	;# 
  1279  0411                     	;# 
  1280  0411                     	;# 
  1281  0412                     	;# 
  1282  0413                     	;# 
  1283  0414                     	;# 
  1284  0415                     	;# 
  1285  0416                     	;# 
  1286  0417                     	;# 
  1287  0418                     	;# 
  1288  0418                     	;# 
  1289  0419                     	;# 
  1290  041A                     	;# 
  1291  041B                     	;# 
  1292  041C                     	;# 
  1293  041D                     	;# 
  1294  041E                     	;# 
  1295  041F                     	;# 
  1296  0498                     	;# 
  1297  0498                     	;# 
  1298  0499                     	;# 
  1299  049A                     	;# 
  1300  049B                     	;# 
  1301  049B                     	;# 
  1302  049C                     	;# 
  1303  049D                     	;# 
  1304  049E                     	;# 
  1305  049F                     	;# 
  1306  0617                     	;# 
  1307  0618                     	;# 
  1308  0619                     	;# 
  1309  0619                     	;# 
  1310  061A                     	;# 
  1311  061B                     	;# 
  1312  061C                     	;# 
  1313  061C                     	;# 
  1314  061F                     	;# 
  1315  0691                     	;# 
  1316  0692                     	;# 
  1317  0693                     	;# 
  1318  0694                     	;# 
  1319  0695                     	;# 
  1320  0696                     	;# 
  1321  0697                     	;# 
  1322  0698                     	;# 
  1323  0699                     	;# 
  1324  0711                     	;# 
  1325  0712                     	;# 
  1326  0713                     	;# 
  1327  0714                     	;# 
  1328  0715                     	;# 
  1329  0716                     	;# 
  1330  0717                     	;# 
  1331  0718                     	;# 
  1332  0719                     	;# 
  1333  0891                     	;# 
  1334  0891                     	;# 
  1335  0891                     	;# 
  1336  0891                     	;# 
  1337  0891                     	;# 
  1338  0891                     	;# 
  1339  0892                     	;# 
  1340  0892                     	;# 
  1341  0892                     	;# 
  1342  0893                     	;# 
  1343  0893                     	;# 
  1344  0893                     	;# 
  1345  0893                     	;# 
  1346  0893                     	;# 
  1347  0893                     	;# 
  1348  0894                     	;# 
  1349  0894                     	;# 
  1350  0894                     	;# 
  1351  0895                     	;# 
  1352  0895                     	;# 
  1353  0895                     	;# 
  1354  0896                     	;# 
  1355  0896                     	;# 
  1356  0896                     	;# 
  1357  089B                     	;# 
  1358  0911                     	;# 
  1359  0912                     	;# 
  1360  0913                     	;# 
  1361  0914                     	;# 
  1362  0915                     	;# 
  1363  0916                     	;# 
  1364  0918                     	;# 
  1365  0919                     	;# 
  1366  091A                     	;# 
  1367  091B                     	;# 
  1368  091C                     	;# 
  1369  091D                     	;# 
  1370  091E                     	;# 
  1371  091F                     	;# 
  1372  0E0F                     	;# 
  1373  0E10                     	;# 
  1374  0E11                     	;# 
  1375  0E12                     	;# 
  1376  0E13                     	;# 
  1377  0E14                     	;# 
  1378  0E15                     	;# 
  1379  0E16                     	;# 
  1380  0E17                     	;# 
  1381  0E18                     	;# 
  1382  0E19                     	;# 
  1383  0E1A                     	;# 
  1384  0E1B                     	;# 
  1385  0E1C                     	;# 
  1386  0E20                     	;# 
  1387  0E21                     	;# 
  1388  0E22                     	;# 
  1389  0E24                     	;# 
  1390  0E25                     	;# 
  1391  0E28                     	;# 
  1392  0E29                     	;# 
  1393  0E2A                     	;# 
  1394  0E2B                     	;# 
  1395  0E2C                     	;# 
  1396  0E2D                     	;# 
  1397  0E2E                     	;# 
  1398  0E2F                     	;# 
  1399  0E90                     	;# 
  1400  0E91                     	;# 
  1401  0E92                     	;# 
  1402  0E94                     	;# 
  1403  0E95                     	;# 
  1404  0E9C                     	;# 
  1405  0E9D                     	;# 
  1406  0E9E                     	;# 
  1407  0E9F                     	;# 
  1408  0EA0                     	;# 
  1409  0EA1                     	;# 
  1410  0EA2                     	;# 
  1411  0EA3                     	;# 
  1412  0EA4                     	;# 
  1413  0EA5                     	;# 
  1414  0EA6                     	;# 
  1415  0EA7                     	;# 
  1416  0F0F                     	;# 
  1417  0F10                     	;# 
  1418  0F11                     	;# 
  1419  0F12                     	;# 
  1420  0F13                     	;# 
  1421  0F14                     	;# 
  1422  0F15                     	;# 
  1423  0F16                     	;# 
  1424  0F17                     	;# 
  1425  0F18                     	;# 
  1426  0F19                     	;# 
  1427  0F1A                     	;# 
  1428  0F1B                     	;# 
  1429  0F1C                     	;# 
  1430  0F1D                     	;# 
  1431  0F1E                     	;# 
  1432  0F1F                     	;# 
  1433  0F20                     	;# 
  1434  0F21                     	;# 
  1435  0F22                     	;# 
  1436  0F23                     	;# 
  1437  0F24                     	;# 
  1438  0F25                     	;# 
  1439  0F26                     	;# 
  1440  0F27                     	;# 
  1441  0F28                     	;# 
  1442  0F29                     	;# 
  1443  0F2A                     	;# 
  1444  0F2B                     	;# 
  1445  0F2C                     	;# 
  1446  0F2D                     	;# 
  1447  0F2E                     	;# 
  1448  0F2F                     	;# 
  1449  0F30                     	;# 
  1450  0F31                     	;# 
  1451  0F32                     	;# 
  1452  0F33                     	;# 
  1453  0F34                     	;# 
  1454  0F35                     	;# 
  1455  0F36                     	;# 
  1456  0F37                     	;# 
  1457  0FE4                     	;# 
  1458  0FE5                     	;# 
  1459  0FE6                     	;# 
  1460  0FE7                     	;# 
  1461  0FE8                     	;# 
  1462  0FE9                     	;# 
  1463  0FEA                     	;# 
  1464  0FEB                     	;# 
  1465  0FED                     	;# 
  1466  0FEE                     	;# 
  1467  0FEF                     	;# 
  1468  0000                     	;# 
  1469  0001                     	;# 
  1470  0002                     	;# 
  1471  0003                     	;# 
  1472  0004                     	;# 
  1473  0005                     	;# 
  1474  0006                     	;# 
  1475  0007                     	;# 
  1476  0008                     	;# 
  1477  0009                     	;# 
  1478  000A                     	;# 
  1479  000B                     	;# 
  1480  000C                     	;# 
  1481  000D                     	;# 
  1482  000E                     	;# 
  1483  0010                     	;# 
  1484  0011                     	;# 
  1485  0012                     	;# 
  1486  0013                     	;# 
  1487  0014                     	;# 
  1488  0015                     	;# 
  1489  0015                     	;# 
  1490  0016                     	;# 
  1491  0016                     	;# 
  1492  0017                     	;# 
  1493  0018                     	;# 
  1494  0019                     	;# 
  1495  0019                     	;# 
  1496  001A                     	;# 
  1497  001B                     	;# 
  1498  001C                     	;# 
  1499  001D                     	;# 
  1500  001E                     	;# 
  1501  001F                     	;# 
  1502  008C                     	;# 
  1503  008D                     	;# 
  1504  008E                     	;# 
  1505  0090                     	;# 
  1506  0091                     	;# 
  1507  0092                     	;# 
  1508  0093                     	;# 
  1509  0094                     	;# 
  1510  0097                     	;# 
  1511  009B                     	;# 
  1512  009B                     	;# 
  1513  009C                     	;# 
  1514  009D                     	;# 
  1515  009E                     	;# 
  1516  009F                     	;# 
  1517  010C                     	;# 
  1518  010D                     	;# 
  1519  010E                     	;# 
  1520  0111                     	;# 
  1521  0112                     	;# 
  1522  0113                     	;# 
  1523  0114                     	;# 
  1524  0115                     	;# 
  1525  0116                     	;# 
  1526  0117                     	;# 
  1527  0118                     	;# 
  1528  0119                     	;# 
  1529  018C                     	;# 
  1530  018D                     	;# 
  1531  018E                     	;# 
  1532  0197                     	;# 
  1533  0199                     	;# 
  1534  0199                     	;# 
  1535  0199                     	;# 
  1536  019A                     	;# 
  1537  019A                     	;# 
  1538  019A                     	;# 
  1539  019B                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019C                     	;# 
  1545  019C                     	;# 
  1546  019C                     	;# 
  1547  019D                     	;# 
  1548  019D                     	;# 
  1549  019D                     	;# 
  1550  019E                     	;# 
  1551  019E                     	;# 
  1552  019E                     	;# 
  1553  019F                     	;# 
  1554  019F                     	;# 
  1555  019F                     	;# 
  1556  019F                     	;# 
  1557  019F                     	;# 
  1558  020C                     	;# 
  1559  020D                     	;# 
  1560  020E                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  028C                     	;# 
  1578  028D                     	;# 
  1579  028E                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0294                     	;# 
  1585  0295                     	;# 
  1586  0295                     	;# 
  1587  0296                     	;# 
  1588  0297                     	;# 
  1589  0298                     	;# 
  1590  029F                     	;# 
  1591  030C                     	;# 
  1592  030D                     	;# 
  1593  030E                     	;# 
  1594  0311                     	;# 
  1595  0311                     	;# 
  1596  0312                     	;# 
  1597  0313                     	;# 
  1598  0314                     	;# 
  1599  0315                     	;# 
  1600  0315                     	;# 
  1601  0316                     	;# 
  1602  0317                     	;# 
  1603  0318                     	;# 
  1604  038C                     	;# 
  1605  038D                     	;# 
  1606  038E                     	;# 
  1607  0391                     	;# 
  1608  0392                     	;# 
  1609  0393                     	;# 
  1610  0394                     	;# 
  1611  0395                     	;# 
  1612  0396                     	;# 
  1613  0397                     	;# 
  1614  0398                     	;# 
  1615  0399                     	;# 
  1616  039A                     	;# 
  1617  039C                     	;# 
  1618  039D                     	;# 
  1619  039E                     	;# 
  1620  039F                     	;# 
  1621  0411                     	;# 
  1622  0411                     	;# 
  1623  0412                     	;# 
  1624  0413                     	;# 
  1625  0414                     	;# 
  1626  0415                     	;# 
  1627  0416                     	;# 
  1628  0417                     	;# 
  1629  0418                     	;# 
  1630  0418                     	;# 
  1631  0419                     	;# 
  1632  041A                     	;# 
  1633  041B                     	;# 
  1634  041C                     	;# 
  1635  041D                     	;# 
  1636  041E                     	;# 
  1637  041F                     	;# 
  1638  0498                     	;# 
  1639  0498                     	;# 
  1640  0499                     	;# 
  1641  049A                     	;# 
  1642  049B                     	;# 
  1643  049B                     	;# 
  1644  049C                     	;# 
  1645  049D                     	;# 
  1646  049E                     	;# 
  1647  049F                     	;# 
  1648  0617                     	;# 
  1649  0618                     	;# 
  1650  0619                     	;# 
  1651  0619                     	;# 
  1652  061A                     	;# 
  1653  061B                     	;# 
  1654  061C                     	;# 
  1655  061C                     	;# 
  1656  061F                     	;# 
  1657  0691                     	;# 
  1658  0692                     	;# 
  1659  0693                     	;# 
  1660  0694                     	;# 
  1661  0695                     	;# 
  1662  0696                     	;# 
  1663  0697                     	;# 
  1664  0698                     	;# 
  1665  0699                     	;# 
  1666  0711                     	;# 
  1667  0712                     	;# 
  1668  0713                     	;# 
  1669  0714                     	;# 
  1670  0715                     	;# 
  1671  0716                     	;# 
  1672  0717                     	;# 
  1673  0718                     	;# 
  1674  0719                     	;# 
  1675  0891                     	;# 
  1676  0891                     	;# 
  1677  0891                     	;# 
  1678  0891                     	;# 
  1679  0891                     	;# 
  1680  0891                     	;# 
  1681  0892                     	;# 
  1682  0892                     	;# 
  1683  0892                     	;# 
  1684  0893                     	;# 
  1685  0893                     	;# 
  1686  0893                     	;# 
  1687  0893                     	;# 
  1688  0893                     	;# 
  1689  0893                     	;# 
  1690  0894                     	;# 
  1691  0894                     	;# 
  1692  0894                     	;# 
  1693  0895                     	;# 
  1694  0895                     	;# 
  1695  0895                     	;# 
  1696  0896                     	;# 
  1697  0896                     	;# 
  1698  0896                     	;# 
  1699  089B                     	;# 
  1700  0911                     	;# 
  1701  0912                     	;# 
  1702  0913                     	;# 
  1703  0914                     	;# 
  1704  0915                     	;# 
  1705  0916                     	;# 
  1706  0918                     	;# 
  1707  0919                     	;# 
  1708  091A                     	;# 
  1709  091B                     	;# 
  1710  091C                     	;# 
  1711  091D                     	;# 
  1712  091E                     	;# 
  1713  091F                     	;# 
  1714  0E0F                     	;# 
  1715  0E10                     	;# 
  1716  0E11                     	;# 
  1717  0E12                     	;# 
  1718  0E13                     	;# 
  1719  0E14                     	;# 
  1720  0E15                     	;# 
  1721  0E16                     	;# 
  1722  0E17                     	;# 
  1723  0E18                     	;# 
  1724  0E19                     	;# 
  1725  0E1A                     	;# 
  1726  0E1B                     	;# 
  1727  0E1C                     	;# 
  1728  0E20                     	;# 
  1729  0E21                     	;# 
  1730  0E22                     	;# 
  1731  0E24                     	;# 
  1732  0E25                     	;# 
  1733  0E28                     	;# 
  1734  0E29                     	;# 
  1735  0E2A                     	;# 
  1736  0E2B                     	;# 
  1737  0E2C                     	;# 
  1738  0E2D                     	;# 
  1739  0E2E                     	;# 
  1740  0E2F                     	;# 
  1741  0E90                     	;# 
  1742  0E91                     	;# 
  1743  0E92                     	;# 
  1744  0E94                     	;# 
  1745  0E95                     	;# 
  1746  0E9C                     	;# 
  1747  0E9D                     	;# 
  1748  0E9E                     	;# 
  1749  0E9F                     	;# 
  1750  0EA0                     	;# 
  1751  0EA1                     	;# 
  1752  0EA2                     	;# 
  1753  0EA3                     	;# 
  1754  0EA4                     	;# 
  1755  0EA5                     	;# 
  1756  0EA6                     	;# 
  1757  0EA7                     	;# 
  1758  0F0F                     	;# 
  1759  0F10                     	;# 
  1760  0F11                     	;# 
  1761  0F12                     	;# 
  1762  0F13                     	;# 
  1763  0F14                     	;# 
  1764  0F15                     	;# 
  1765  0F16                     	;# 
  1766  0F17                     	;# 
  1767  0F18                     	;# 
  1768  0F19                     	;# 
  1769  0F1A                     	;# 
  1770  0F1B                     	;# 
  1771  0F1C                     	;# 
  1772  0F1D                     	;# 
  1773  0F1E                     	;# 
  1774  0F1F                     	;# 
  1775  0F20                     	;# 
  1776  0F21                     	;# 
  1777  0F22                     	;# 
  1778  0F23                     	;# 
  1779  0F24                     	;# 
  1780  0F25                     	;# 
  1781  0F26                     	;# 
  1782  0F27                     	;# 
  1783  0F28                     	;# 
  1784  0F29                     	;# 
  1785  0F2A                     	;# 
  1786  0F2B                     	;# 
  1787  0F2C                     	;# 
  1788  0F2D                     	;# 
  1789  0F2E                     	;# 
  1790  0F2F                     	;# 
  1791  0F30                     	;# 
  1792  0F31                     	;# 
  1793  0F32                     	;# 
  1794  0F33                     	;# 
  1795  0F34                     	;# 
  1796  0F35                     	;# 
  1797  0F36                     	;# 
  1798  0F37                     	;# 
  1799  0FE4                     	;# 
  1800  0FE5                     	;# 
  1801  0FE6                     	;# 
  1802  0FE7                     	;# 
  1803  0FE8                     	;# 
  1804  0FE9                     	;# 
  1805  0FEA                     	;# 
  1806  0FEB                     	;# 
  1807  0FED                     	;# 
  1808  0FEE                     	;# 
  1809  0FEF                     	;# 
  1810  0000                     	;# 
  1811  0001                     	;# 
  1812  0002                     	;# 
  1813  0003                     	;# 
  1814  0004                     	;# 
  1815  0005                     	;# 
  1816  0006                     	;# 
  1817  0007                     	;# 
  1818  0008                     	;# 
  1819  0009                     	;# 
  1820  000A                     	;# 
  1821  000B                     	;# 
  1822  000C                     	;# 
  1823  000D                     	;# 
  1824  000E                     	;# 
  1825  0010                     	;# 
  1826  0011                     	;# 
  1827  0012                     	;# 
  1828  0013                     	;# 
  1829  0014                     	;# 
  1830  0015                     	;# 
  1831  0015                     	;# 
  1832  0016                     	;# 
  1833  0016                     	;# 
  1834  0017                     	;# 
  1835  0018                     	;# 
  1836  0019                     	;# 
  1837  0019                     	;# 
  1838  001A                     	;# 
  1839  001B                     	;# 
  1840  001C                     	;# 
  1841  001D                     	;# 
  1842  001E                     	;# 
  1843  001F                     	;# 
  1844  008C                     	;# 
  1845  008D                     	;# 
  1846  008E                     	;# 
  1847  0090                     	;# 
  1848  0091                     	;# 
  1849  0092                     	;# 
  1850  0093                     	;# 
  1851  0094                     	;# 
  1852  0097                     	;# 
  1853  009B                     	;# 
  1854  009B                     	;# 
  1855  009C                     	;# 
  1856  009D                     	;# 
  1857  009E                     	;# 
  1858  009F                     	;# 
  1859  010C                     	;# 
  1860  010D                     	;# 
  1861  010E                     	;# 
  1862  0111                     	;# 
  1863  0112                     	;# 
  1864  0113                     	;# 
  1865  0114                     	;# 
  1866  0115                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  0118                     	;# 
  1870  0119                     	;# 
  1871  018C                     	;# 
  1872  018D                     	;# 
  1873  018E                     	;# 
  1874  0197                     	;# 
  1875  0199                     	;# 
  1876  0199                     	;# 
  1877  0199                     	;# 
  1878  019A                     	;# 
  1879  019A                     	;# 
  1880  019A                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019C                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019D                     	;# 
  1891  019D                     	;# 
  1892  019E                     	;# 
  1893  019E                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  019F                     	;# 
  1897  019F                     	;# 
  1898  019F                     	;# 
  1899  019F                     	;# 
  1900  020C                     	;# 
  1901  020D                     	;# 
  1902  020E                     	;# 
  1903  0211                     	;# 
  1904  0211                     	;# 
  1905  0212                     	;# 
  1906  0212                     	;# 
  1907  0213                     	;# 
  1908  0213                     	;# 
  1909  0214                     	;# 
  1910  0214                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  028C                     	;# 
  1920  028D                     	;# 
  1921  028E                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0294                     	;# 
  1927  0295                     	;# 
  1928  0295                     	;# 
  1929  0296                     	;# 
  1930  0297                     	;# 
  1931  0298                     	;# 
  1932  029F                     	;# 
  1933  030C                     	;# 
  1934  030D                     	;# 
  1935  030E                     	;# 
  1936  0311                     	;# 
  1937  0311                     	;# 
  1938  0312                     	;# 
  1939  0313                     	;# 
  1940  0314                     	;# 
  1941  0315                     	;# 
  1942  0315                     	;# 
  1943  0316                     	;# 
  1944  0317                     	;# 
  1945  0318                     	;# 
  1946  038C                     	;# 
  1947  038D                     	;# 
  1948  038E                     	;# 
  1949  0391                     	;# 
  1950  0392                     	;# 
  1951  0393                     	;# 
  1952  0394                     	;# 
  1953  0395                     	;# 
  1954  0396                     	;# 
  1955  0397                     	;# 
  1956  0398                     	;# 
  1957  0399                     	;# 
  1958  039A                     	;# 
  1959  039C                     	;# 
  1960  039D                     	;# 
  1961  039E                     	;# 
  1962  039F                     	;# 
  1963  0411                     	;# 
  1964  0411                     	;# 
  1965  0412                     	;# 
  1966  0413                     	;# 
  1967  0414                     	;# 
  1968  0415                     	;# 
  1969  0416                     	;# 
  1970  0417                     	;# 
  1971  0418                     	;# 
  1972  0418                     	;# 
  1973  0419                     	;# 
  1974  041A                     	;# 
  1975  041B                     	;# 
  1976  041C                     	;# 
  1977  041D                     	;# 
  1978  041E                     	;# 
  1979  041F                     	;# 
  1980  0498                     	;# 
  1981  0498                     	;# 
  1982  0499                     	;# 
  1983  049A                     	;# 
  1984  049B                     	;# 
  1985  049B                     	;# 
  1986  049C                     	;# 
  1987  049D                     	;# 
  1988  049E                     	;# 
  1989  049F                     	;# 
  1990  0617                     	;# 
  1991  0618                     	;# 
  1992  0619                     	;# 
  1993  0619                     	;# 
  1994  061A                     	;# 
  1995  061B                     	;# 
  1996  061C                     	;# 
  1997  061C                     	;# 
  1998  061F                     	;# 
  1999  0691                     	;# 
  2000  0692                     	;# 
  2001  0693                     	;# 
  2002  0694                     	;# 
  2003  0695                     	;# 
  2004  0696                     	;# 
  2005  0697                     	;# 
  2006  0698                     	;# 
  2007  0699                     	;# 
  2008  0711                     	;# 
  2009  0712                     	;# 
  2010  0713                     	;# 
  2011  0714                     	;# 
  2012  0715                     	;# 
  2013  0716                     	;# 
  2014  0717                     	;# 
  2015  0718                     	;# 
  2016  0719                     	;# 
  2017  0891                     	;# 
  2018  0891                     	;# 
  2019  0891                     	;# 
  2020  0891                     	;# 
  2021  0891                     	;# 
  2022  0891                     	;# 
  2023  0892                     	;# 
  2024  0892                     	;# 
  2025  0892                     	;# 
  2026  0893                     	;# 
  2027  0893                     	;# 
  2028  0893                     	;# 
  2029  0893                     	;# 
  2030  0893                     	;# 
  2031  0893                     	;# 
  2032  0894                     	;# 
  2033  0894                     	;# 
  2034  0894                     	;# 
  2035  0895                     	;# 
  2036  0895                     	;# 
  2037  0895                     	;# 
  2038  0896                     	;# 
  2039  0896                     	;# 
  2040  0896                     	;# 
  2041  089B                     	;# 
  2042  0911                     	;# 
  2043  0912                     	;# 
  2044  0913                     	;# 
  2045  0914                     	;# 
  2046  0915                     	;# 
  2047  0916                     	;# 
  2048  0918                     	;# 
  2049  0919                     	;# 
  2050  091A                     	;# 
  2051  091B                     	;# 
  2052  091C                     	;# 
  2053  091D                     	;# 
  2054  091E                     	;# 
  2055  091F                     	;# 
  2056  0E0F                     	;# 
  2057  0E10                     	;# 
  2058  0E11                     	;# 
  2059  0E12                     	;# 
  2060  0E13                     	;# 
  2061  0E14                     	;# 
  2062  0E15                     	;# 
  2063  0E16                     	;# 
  2064  0E17                     	;# 
  2065  0E18                     	;# 
  2066  0E19                     	;# 
  2067  0E1A                     	;# 
  2068  0E1B                     	;# 
  2069  0E1C                     	;# 
  2070  0E20                     	;# 
  2071  0E21                     	;# 
  2072  0E22                     	;# 
  2073  0E24                     	;# 
  2074  0E25                     	;# 
  2075  0E28                     	;# 
  2076  0E29                     	;# 
  2077  0E2A                     	;# 
  2078  0E2B                     	;# 
  2079  0E2C                     	;# 
  2080  0E2D                     	;# 
  2081  0E2E                     	;# 
  2082  0E2F                     	;# 
  2083  0E90                     	;# 
  2084  0E91                     	;# 
  2085  0E92                     	;# 
  2086  0E94                     	;# 
  2087  0E95                     	;# 
  2088  0E9C                     	;# 
  2089  0E9D                     	;# 
  2090  0E9E                     	;# 
  2091  0E9F                     	;# 
  2092  0EA0                     	;# 
  2093  0EA1                     	;# 
  2094  0EA2                     	;# 
  2095  0EA3                     	;# 
  2096  0EA4                     	;# 
  2097  0EA5                     	;# 
  2098  0EA6                     	;# 
  2099  0EA7                     	;# 
  2100  0F0F                     	;# 
  2101  0F10                     	;# 
  2102  0F11                     	;# 
  2103  0F12                     	;# 
  2104  0F13                     	;# 
  2105  0F14                     	;# 
  2106  0F15                     	;# 
  2107  0F16                     	;# 
  2108  0F17                     	;# 
  2109  0F18                     	;# 
  2110  0F19                     	;# 
  2111  0F1A                     	;# 
  2112  0F1B                     	;# 
  2113  0F1C                     	;# 
  2114  0F1D                     	;# 
  2115  0F1E                     	;# 
  2116  0F1F                     	;# 
  2117  0F20                     	;# 
  2118  0F21                     	;# 
  2119  0F22                     	;# 
  2120  0F23                     	;# 
  2121  0F24                     	;# 
  2122  0F25                     	;# 
  2123  0F26                     	;# 
  2124  0F27                     	;# 
  2125  0F28                     	;# 
  2126  0F29                     	;# 
  2127  0F2A                     	;# 
  2128  0F2B                     	;# 
  2129  0F2C                     	;# 
  2130  0F2D                     	;# 
  2131  0F2E                     	;# 
  2132  0F2F                     	;# 
  2133  0F30                     	;# 
  2134  0F31                     	;# 
  2135  0F32                     	;# 
  2136  0F33                     	;# 
  2137  0F34                     	;# 
  2138  0F35                     	;# 
  2139  0F36                     	;# 
  2140  0F37                     	;# 
  2141  0FE4                     	;# 
  2142  0FE5                     	;# 
  2143  0FE6                     	;# 
  2144  0FE7                     	;# 
  2145  0FE8                     	;# 
  2146  0FE9                     	;# 
  2147  0FEA                     	;# 
  2148  0FEB                     	;# 
  2149  0FED                     	;# 
  2150  0FEE                     	;# 
  2151  0FEF                     	;# 
  2152  0000                     	;# 
  2153  0001                     	;# 
  2154  0002                     	;# 
  2155  0003                     	;# 
  2156  0004                     	;# 
  2157  0005                     	;# 
  2158  0006                     	;# 
  2159  0007                     	;# 
  2160  0008                     	;# 
  2161  0009                     	;# 
  2162  000A                     	;# 
  2163  000B                     	;# 
  2164  000C                     	;# 
  2165  000D                     	;# 
  2166  000E                     	;# 
  2167  0010                     	;# 
  2168  0011                     	;# 
  2169  0012                     	;# 
  2170  0013                     	;# 
  2171  0014                     	;# 
  2172  0015                     	;# 
  2173  0015                     	;# 
  2174  0016                     	;# 
  2175  0016                     	;# 
  2176  0017                     	;# 
  2177  0018                     	;# 
  2178  0019                     	;# 
  2179  0019                     	;# 
  2180  001A                     	;# 
  2181  001B                     	;# 
  2182  001C                     	;# 
  2183  001D                     	;# 
  2184  001E                     	;# 
  2185  001F                     	;# 
  2186  008C                     	;# 
  2187  008D                     	;# 
  2188  008E                     	;# 
  2189  0090                     	;# 
  2190  0091                     	;# 
  2191  0092                     	;# 
  2192  0093                     	;# 
  2193  0094                     	;# 
  2194  0097                     	;# 
  2195  009B                     	;# 
  2196  009B                     	;# 
  2197  009C                     	;# 
  2198  009D                     	;# 
  2199  009E                     	;# 
  2200  009F                     	;# 
  2201  010C                     	;# 
  2202  010D                     	;# 
  2203  010E                     	;# 
  2204  0111                     	;# 
  2205  0112                     	;# 
  2206  0113                     	;# 
  2207  0114                     	;# 
  2208  0115                     	;# 
  2209  0116                     	;# 
  2210  0117                     	;# 
  2211  0118                     	;# 
  2212  0119                     	;# 
  2213  018C                     	;# 
  2214  018D                     	;# 
  2215  018E                     	;# 
  2216  0197                     	;# 
  2217  0199                     	;# 
  2218  0199                     	;# 
  2219  0199                     	;# 
  2220  019A                     	;# 
  2221  019A                     	;# 
  2222  019A                     	;# 
  2223  019B                     	;# 
  2224  019B                     	;# 
  2225  019B                     	;# 
  2226  019B                     	;# 
  2227  019B                     	;# 
  2228  019C                     	;# 
  2229  019C                     	;# 
  2230  019C                     	;# 
  2231  019D                     	;# 
  2232  019D                     	;# 
  2233  019D                     	;# 
  2234  019E                     	;# 
  2235  019E                     	;# 
  2236  019E                     	;# 
  2237  019F                     	;# 
  2238  019F                     	;# 
  2239  019F                     	;# 
  2240  019F                     	;# 
  2241  019F                     	;# 
  2242  020C                     	;# 
  2243  020D                     	;# 
  2244  020E                     	;# 
  2245  0211                     	;# 
  2246  0211                     	;# 
  2247  0212                     	;# 
  2248  0212                     	;# 
  2249  0213                     	;# 
  2250  0213                     	;# 
  2251  0214                     	;# 
  2252  0214                     	;# 
  2253  0215                     	;# 
  2254  0215                     	;# 
  2255  0215                     	;# 
  2256  0215                     	;# 
  2257  0216                     	;# 
  2258  0216                     	;# 
  2259  0217                     	;# 
  2260  0217                     	;# 
  2261  028C                     	;# 
  2262  028D                     	;# 
  2263  028E                     	;# 
  2264  0291                     	;# 
  2265  0291                     	;# 
  2266  0292                     	;# 
  2267  0293                     	;# 
  2268  0294                     	;# 
  2269  0295                     	;# 
  2270  0295                     	;# 
  2271  0296                     	;# 
  2272  0297                     	;# 
  2273  0298                     	;# 
  2274  029F                     	;# 
  2275  030C                     	;# 
  2276  030D                     	;# 
  2277  030E                     	;# 
  2278  0311                     	;# 
  2279  0311                     	;# 
  2280  0312                     	;# 
  2281  0313                     	;# 
  2282  0314                     	;# 
  2283  0315                     	;# 
  2284  0315                     	;# 
  2285  0316                     	;# 
  2286  0317                     	;# 
  2287  0318                     	;# 
  2288  038C                     	;# 
  2289  038D                     	;# 
  2290  038E                     	;# 
  2291  0391                     	;# 
  2292  0392                     	;# 
  2293  0393                     	;# 
  2294  0394                     	;# 
  2295  0395                     	;# 
  2296  0396                     	;# 
  2297  0397                     	;# 
  2298  0398                     	;# 
  2299  0399                     	;# 
  2300  039A                     	;# 
  2301  039C                     	;# 
  2302  039D                     	;# 
  2303  039E                     	;# 
  2304  039F                     	;# 
  2305  0411                     	;# 
  2306  0411                     	;# 
  2307  0412                     	;# 
  2308  0413                     	;# 
  2309  0414                     	;# 
  2310  0415                     	;# 
  2311  0416                     	;# 
  2312  0417                     	;# 
  2313  0418                     	;# 
  2314  0418                     	;# 
  2315  0419                     	;# 
  2316  041A                     	;# 
  2317  041B                     	;# 
  2318  041C                     	;# 
  2319  041D                     	;# 
  2320  041E                     	;# 
  2321  041F                     	;# 
  2322  0498                     	;# 
  2323  0498                     	;# 
  2324  0499                     	;# 
  2325  049A                     	;# 
  2326  049B                     	;# 
  2327  049B                     	;# 
  2328  049C                     	;# 
  2329  049D                     	;# 
  2330  049E                     	;# 
  2331  049F                     	;# 
  2332  0617                     	;# 
  2333  0618                     	;# 
  2334  0619                     	;# 
  2335  0619                     	;# 
  2336  061A                     	;# 
  2337  061B                     	;# 
  2338  061C                     	;# 
  2339  061C                     	;# 
  2340  061F                     	;# 
  2341  0691                     	;# 
  2342  0692                     	;# 
  2343  0693                     	;# 
  2344  0694                     	;# 
  2345  0695                     	;# 
  2346  0696                     	;# 
  2347  0697                     	;# 
  2348  0698                     	;# 
  2349  0699                     	;# 
  2350  0711                     	;# 
  2351  0712                     	;# 
  2352  0713                     	;# 
  2353  0714                     	;# 
  2354  0715                     	;# 
  2355  0716                     	;# 
  2356  0717                     	;# 
  2357  0718                     	;# 
  2358  0719                     	;# 
  2359  0891                     	;# 
  2360  0891                     	;# 
  2361  0891                     	;# 
  2362  0891                     	;# 
  2363  0891                     	;# 
  2364  0891                     	;# 
  2365  0892                     	;# 
  2366  0892                     	;# 
  2367  0892                     	;# 
  2368  0893                     	;# 
  2369  0893                     	;# 
  2370  0893                     	;# 
  2371  0893                     	;# 
  2372  0893                     	;# 
  2373  0893                     	;# 
  2374  0894                     	;# 
  2375  0894                     	;# 
  2376  0894                     	;# 
  2377  0895                     	;# 
  2378  0895                     	;# 
  2379  0895                     	;# 
  2380  0896                     	;# 
  2381  0896                     	;# 
  2382  0896                     	;# 
  2383  089B                     	;# 
  2384  0911                     	;# 
  2385  0912                     	;# 
  2386  0913                     	;# 
  2387  0914                     	;# 
  2388  0915                     	;# 
  2389  0916                     	;# 
  2390  0918                     	;# 
  2391  0919                     	;# 
  2392  091A                     	;# 
  2393  091B                     	;# 
  2394  091C                     	;# 
  2395  091D                     	;# 
  2396  091E                     	;# 
  2397  091F                     	;# 
  2398  0E0F                     	;# 
  2399  0E10                     	;# 
  2400  0E11                     	;# 
  2401  0E12                     	;# 
  2402  0E13                     	;# 
  2403  0E14                     	;# 
  2404  0E15                     	;# 
  2405  0E16                     	;# 
  2406  0E17                     	;# 
  2407  0E18                     	;# 
  2408  0E19                     	;# 
  2409  0E1A                     	;# 
  2410  0E1B                     	;# 
  2411  0E1C                     	;# 
  2412  0E20                     	;# 
  2413  0E21                     	;# 
  2414  0E22                     	;# 
  2415  0E24                     	;# 
  2416  0E25                     	;# 
  2417  0E28                     	;# 
  2418  0E29                     	;# 
  2419  0E2A                     	;# 
  2420  0E2B                     	;# 
  2421  0E2C                     	;# 
  2422  0E2D                     	;# 
  2423  0E2E                     	;# 
  2424  0E2F                     	;# 
  2425  0E90                     	;# 
  2426  0E91                     	;# 
  2427  0E92                     	;# 
  2428  0E94                     	;# 
  2429  0E95                     	;# 
  2430  0E9C                     	;# 
  2431  0E9D                     	;# 
  2432  0E9E                     	;# 
  2433  0E9F                     	;# 
  2434  0EA0                     	;# 
  2435  0EA1                     	;# 
  2436  0EA2                     	;# 
  2437  0EA3                     	;# 
  2438  0EA4                     	;# 
  2439  0EA5                     	;# 
  2440  0EA6                     	;# 
  2441  0EA7                     	;# 
  2442  0F0F                     	;# 
  2443  0F10                     	;# 
  2444  0F11                     	;# 
  2445  0F12                     	;# 
  2446  0F13                     	;# 
  2447  0F14                     	;# 
  2448  0F15                     	;# 
  2449  0F16                     	;# 
  2450  0F17                     	;# 
  2451  0F18                     	;# 
  2452  0F19                     	;# 
  2453  0F1A                     	;# 
  2454  0F1B                     	;# 
  2455  0F1C                     	;# 
  2456  0F1D                     	;# 
  2457  0F1E                     	;# 
  2458  0F1F                     	;# 
  2459  0F20                     	;# 
  2460  0F21                     	;# 
  2461  0F22                     	;# 
  2462  0F23                     	;# 
  2463  0F24                     	;# 
  2464  0F25                     	;# 
  2465  0F26                     	;# 
  2466  0F27                     	;# 
  2467  0F28                     	;# 
  2468  0F29                     	;# 
  2469  0F2A                     	;# 
  2470  0F2B                     	;# 
  2471  0F2C                     	;# 
  2472  0F2D                     	;# 
  2473  0F2E                     	;# 
  2474  0F2F                     	;# 
  2475  0F30                     	;# 
  2476  0F31                     	;# 
  2477  0F32                     	;# 
  2478  0F33                     	;# 
  2479  0F34                     	;# 
  2480  0F35                     	;# 
  2481  0F36                     	;# 
  2482  0F37                     	;# 
  2483  0FE4                     	;# 
  2484  0FE5                     	;# 
  2485  0FE6                     	;# 
  2486  0FE7                     	;# 
  2487  0FE8                     	;# 
  2488  0FE9                     	;# 
  2489  0FEA                     	;# 
  2490  0FEB                     	;# 
  2491  0FED                     	;# 
  2492  0FEE                     	;# 
  2493  0FEF                     	;# 
  2494  0000                     	;# 
  2495  0001                     	;# 
  2496  0002                     	;# 
  2497  0003                     	;# 
  2498  0004                     	;# 
  2499  0005                     	;# 
  2500  0006                     	;# 
  2501  0007                     	;# 
  2502  0008                     	;# 
  2503  0009                     	;# 
  2504  000A                     	;# 
  2505  000B                     	;# 
  2506  000C                     	;# 
  2507  000D                     	;# 
  2508  000E                     	;# 
  2509  0010                     	;# 
  2510  0011                     	;# 
  2511  0012                     	;# 
  2512  0013                     	;# 
  2513  0014                     	;# 
  2514  0015                     	;# 
  2515  0015                     	;# 
  2516  0016                     	;# 
  2517  0016                     	;# 
  2518  0017                     	;# 
  2519  0018                     	;# 
  2520  0019                     	;# 
  2521  0019                     	;# 
  2522  001A                     	;# 
  2523  001B                     	;# 
  2524  001C                     	;# 
  2525  001D                     	;# 
  2526  001E                     	;# 
  2527  001F                     	;# 
  2528  008C                     	;# 
  2529  008D                     	;# 
  2530  008E                     	;# 
  2531  0090                     	;# 
  2532  0091                     	;# 
  2533  0092                     	;# 
  2534  0093                     	;# 
  2535  0094                     	;# 
  2536  0097                     	;# 
  2537  009B                     	;# 
  2538  009B                     	;# 
  2539  009C                     	;# 
  2540  009D                     	;# 
  2541  009E                     	;# 
  2542  009F                     	;# 
  2543  010C                     	;# 
  2544  010D                     	;# 
  2545  010E                     	;# 
  2546  0111                     	;# 
  2547  0112                     	;# 
  2548  0113                     	;# 
  2549  0114                     	;# 
  2550  0115                     	;# 
  2551  0116                     	;# 
  2552  0117                     	;# 
  2553  0118                     	;# 
  2554  0119                     	;# 
  2555  018C                     	;# 
  2556  018D                     	;# 
  2557  018E                     	;# 
  2558  0197                     	;# 
  2559  0199                     	;# 
  2560  0199                     	;# 
  2561  0199                     	;# 
  2562  019A                     	;# 
  2563  019A                     	;# 
  2564  019A                     	;# 
  2565  019B                     	;# 
  2566  019B                     	;# 
  2567  019B                     	;# 
  2568  019B                     	;# 
  2569  019B                     	;# 
  2570  019C                     	;# 
  2571  019C                     	;# 
  2572  019C                     	;# 
  2573  019D                     	;# 
  2574  019D                     	;# 
  2575  019D                     	;# 
  2576  019E                     	;# 
  2577  019E                     	;# 
  2578  019E                     	;# 
  2579  019F                     	;# 
  2580  019F                     	;# 
  2581  019F                     	;# 
  2582  019F                     	;# 
  2583  019F                     	;# 
  2584  020C                     	;# 
  2585  020D                     	;# 
  2586  020E                     	;# 
  2587  0211                     	;# 
  2588  0211                     	;# 
  2589  0212                     	;# 
  2590  0212                     	;# 
  2591  0213                     	;# 
  2592  0213                     	;# 
  2593  0214                     	;# 
  2594  0214                     	;# 
  2595  0215                     	;# 
  2596  0215                     	;# 
  2597  0215                     	;# 
  2598  0215                     	;# 
  2599  0216                     	;# 
  2600  0216                     	;# 
  2601  0217                     	;# 
  2602  0217                     	;# 
  2603  028C                     	;# 
  2604  028D                     	;# 
  2605  028E                     	;# 
  2606  0291                     	;# 
  2607  0291                     	;# 
  2608  0292                     	;# 
  2609  0293                     	;# 
  2610  0294                     	;# 
  2611  0295                     	;# 
  2612  0295                     	;# 
  2613  0296                     	;# 
  2614  0297                     	;# 
  2615  0298                     	;# 
  2616  029F                     	;# 
  2617  030C                     	;# 
  2618  030D                     	;# 
  2619  030E                     	;# 
  2620  0311                     	;# 
  2621  0311                     	;# 
  2622  0312                     	;# 
  2623  0313                     	;# 
  2624  0314                     	;# 
  2625  0315                     	;# 
  2626  0315                     	;# 
  2627  0316                     	;# 
  2628  0317                     	;# 
  2629  0318                     	;# 
  2630  038C                     	;# 
  2631  038D                     	;# 
  2632  038E                     	;# 
  2633  0391                     	;# 
  2634  0392                     	;# 
  2635  0393                     	;# 
  2636  0394                     	;# 
  2637  0395                     	;# 
  2638  0396                     	;# 
  2639  0397                     	;# 
  2640  0398                     	;# 
  2641  0399                     	;# 
  2642  039A                     	;# 
  2643  039C                     	;# 
  2644  039D                     	;# 
  2645  039E                     	;# 
  2646  039F                     	;# 
  2647  0411                     	;# 
  2648  0411                     	;# 
  2649  0412                     	;# 
  2650  0413                     	;# 
  2651  0414                     	;# 
  2652  0415                     	;# 
  2653  0416                     	;# 
  2654  0417                     	;# 
  2655  0418                     	;# 
  2656  0418                     	;# 
  2657  0419                     	;# 
  2658  041A                     	;# 
  2659  041B                     	;# 
  2660  041C                     	;# 
  2661  041D                     	;# 
  2662  041E                     	;# 
  2663  041F                     	;# 
  2664  0498                     	;# 
  2665  0498                     	;# 
  2666  0499                     	;# 
  2667  049A                     	;# 
  2668  049B                     	;# 
  2669  049B                     	;# 
  2670  049C                     	;# 
  2671  049D                     	;# 
  2672  049E                     	;# 
  2673  049F                     	;# 
  2674  0617                     	;# 
  2675  0618                     	;# 
  2676  0619                     	;# 
  2677  0619                     	;# 
  2678  061A                     	;# 
  2679  061B                     	;# 
  2680  061C                     	;# 
  2681  061C                     	;# 
  2682  061F                     	;# 
  2683  0691                     	;# 
  2684  0692                     	;# 
  2685  0693                     	;# 
  2686  0694                     	;# 
  2687  0695                     	;# 
  2688  0696                     	;# 
  2689  0697                     	;# 
  2690  0698                     	;# 
  2691  0699                     	;# 
  2692  0711                     	;# 
  2693  0712                     	;# 
  2694  0713                     	;# 
  2695  0714                     	;# 
  2696  0715                     	;# 
  2697  0716                     	;# 
  2698  0717                     	;# 
  2699  0718                     	;# 
  2700  0719                     	;# 
  2701  0891                     	;# 
  2702  0891                     	;# 
  2703  0891                     	;# 
  2704  0891                     	;# 
  2705  0891                     	;# 
  2706  0891                     	;# 
  2707  0892                     	;# 
  2708  0892                     	;# 
  2709  0892                     	;# 
  2710  0893                     	;# 
  2711  0893                     	;# 
  2712  0893                     	;# 
  2713  0893                     	;# 
  2714  0893                     	;# 
  2715  0893                     	;# 
  2716  0894                     	;# 
  2717  0894                     	;# 
  2718  0894                     	;# 
  2719  0895                     	;# 
  2720  0895                     	;# 
  2721  0895                     	;# 
  2722  0896                     	;# 
  2723  0896                     	;# 
  2724  0896                     	;# 
  2725  089B                     	;# 
  2726  0911                     	;# 
  2727  0912                     	;# 
  2728  0913                     	;# 
  2729  0914                     	;# 
  2730  0915                     	;# 
  2731  0916                     	;# 
  2732  0918                     	;# 
  2733  0919                     	;# 
  2734  091A                     	;# 
  2735  091B                     	;# 
  2736  091C                     	;# 
  2737  091D                     	;# 
  2738  091E                     	;# 
  2739  091F                     	;# 
  2740  0E0F                     	;# 
  2741  0E10                     	;# 
  2742  0E11                     	;# 
  2743  0E12                     	;# 
  2744  0E13                     	;# 
  2745  0E14                     	;# 
  2746  0E15                     	;# 
  2747  0E16                     	;# 
  2748  0E17                     	;# 
  2749  0E18                     	;# 
  2750  0E19                     	;# 
  2751  0E1A                     	;# 
  2752  0E1B                     	;# 
  2753  0E1C                     	;# 
  2754  0E20                     	;# 
  2755  0E21                     	;# 
  2756  0E22                     	;# 
  2757  0E24                     	;# 
  2758  0E25                     	;# 
  2759  0E28                     	;# 
  2760  0E29                     	;# 
  2761  0E2A                     	;# 
  2762  0E2B                     	;# 
  2763  0E2C                     	;# 
  2764  0E2D                     	;# 
  2765  0E2E                     	;# 
  2766  0E2F                     	;# 
  2767  0E90                     	;# 
  2768  0E91                     	;# 
  2769  0E92                     	;# 
  2770  0E94                     	;# 
  2771  0E95                     	;# 
  2772  0E9C                     	;# 
  2773  0E9D                     	;# 
  2774  0E9E                     	;# 
  2775  0E9F                     	;# 
  2776  0EA0                     	;# 
  2777  0EA1                     	;# 
  2778  0EA2                     	;# 
  2779  0EA3                     	;# 
  2780  0EA4                     	;# 
  2781  0EA5                     	;# 
  2782  0EA6                     	;# 
  2783  0EA7                     	;# 
  2784  0F0F                     	;# 
  2785  0F10                     	;# 
  2786  0F11                     	;# 
  2787  0F12                     	;# 
  2788  0F13                     	;# 
  2789  0F14                     	;# 
  2790  0F15                     	;# 
  2791  0F16                     	;# 
  2792  0F17                     	;# 
  2793  0F18                     	;# 
  2794  0F19                     	;# 
  2795  0F1A                     	;# 
  2796  0F1B                     	;# 
  2797  0F1C                     	;# 
  2798  0F1D                     	;# 
  2799  0F1E                     	;# 
  2800  0F1F                     	;# 
  2801  0F20                     	;# 
  2802  0F21                     	;# 
  2803  0F22                     	;# 
  2804  0F23                     	;# 
  2805  0F24                     	;# 
  2806  0F25                     	;# 
  2807  0F26                     	;# 
  2808  0F27                     	;# 
  2809  0F28                     	;# 
  2810  0F29                     	;# 
  2811  0F2A                     	;# 
  2812  0F2B                     	;# 
  2813  0F2C                     	;# 
  2814  0F2D                     	;# 
  2815  0F2E                     	;# 
  2816  0F2F                     	;# 
  2817  0F30                     	;# 
  2818  0F31                     	;# 
  2819  0F32                     	;# 
  2820  0F33                     	;# 
  2821  0F34                     	;# 
  2822  0F35                     	;# 
  2823  0F36                     	;# 
  2824  0F37                     	;# 
  2825  0FE4                     	;# 
  2826  0FE5                     	;# 
  2827  0FE6                     	;# 
  2828  0FE7                     	;# 
  2829  0FE8                     	;# 
  2830  0FE9                     	;# 
  2831  0FEA                     	;# 
  2832  0FEB                     	;# 
  2833  0FED                     	;# 
  2834  0FEE                     	;# 
  2835  0FEF                     	;# 
  2836  0000                     	;# 
  2837  0001                     	;# 
  2838  0002                     	;# 
  2839  0003                     	;# 
  2840  0004                     	;# 
  2841  0005                     	;# 
  2842  0006                     	;# 
  2843  0007                     	;# 
  2844  0008                     	;# 
  2845  0009                     	;# 
  2846  000A                     	;# 
  2847  000B                     	;# 
  2848  000C                     	;# 
  2849  000D                     	;# 
  2850  000E                     	;# 
  2851  0010                     	;# 
  2852  0011                     	;# 
  2853  0012                     	;# 
  2854  0013                     	;# 
  2855  0014                     	;# 
  2856  0015                     	;# 
  2857  0015                     	;# 
  2858  0016                     	;# 
  2859  0016                     	;# 
  2860  0017                     	;# 
  2861  0018                     	;# 
  2862  0019                     	;# 
  2863  0019                     	;# 
  2864  001A                     	;# 
  2865  001B                     	;# 
  2866  001C                     	;# 
  2867  001D                     	;# 
  2868  001E                     	;# 
  2869  001F                     	;# 
  2870  008C                     	;# 
  2871  008D                     	;# 
  2872  008E                     	;# 
  2873  0090                     	;# 
  2874  0091                     	;# 
  2875  0092                     	;# 
  2876  0093                     	;# 
  2877  0094                     	;# 
  2878  0097                     	;# 
  2879  009B                     	;# 
  2880  009B                     	;# 
  2881  009C                     	;# 
  2882  009D                     	;# 
  2883  009E                     	;# 
  2884  009F                     	;# 
  2885  010C                     	;# 
  2886  010D                     	;# 
  2887  010E                     	;# 
  2888  0111                     	;# 
  2889  0112                     	;# 
  2890  0113                     	;# 
  2891  0114                     	;# 
  2892  0115                     	;# 
  2893  0116                     	;# 
  2894  0117                     	;# 
  2895  0118                     	;# 
  2896  0119                     	;# 
  2897  018C                     	;# 
  2898  018D                     	;# 
  2899  018E                     	;# 
  2900  0197                     	;# 
  2901  0199                     	;# 
  2902  0199                     	;# 
  2903  0199                     	;# 
  2904  019A                     	;# 
  2905  019A                     	;# 
  2906  019A                     	;# 
  2907  019B                     	;# 
  2908  019B                     	;# 
  2909  019B                     	;# 
  2910  019B                     	;# 
  2911  019B                     	;# 
  2912  019C                     	;# 
  2913  019C                     	;# 
  2914  019C                     	;# 
  2915  019D                     	;# 
  2916  019D                     	;# 
  2917  019D                     	;# 
  2918  019E                     	;# 
  2919  019E                     	;# 
  2920  019E                     	;# 
  2921  019F                     	;# 
  2922  019F                     	;# 
  2923  019F                     	;# 
  2924  019F                     	;# 
  2925  019F                     	;# 
  2926  020C                     	;# 
  2927  020D                     	;# 
  2928  020E                     	;# 
  2929  0211                     	;# 
  2930  0211                     	;# 
  2931  0212                     	;# 
  2932  0212                     	;# 
  2933  0213                     	;# 
  2934  0213                     	;# 
  2935  0214                     	;# 
  2936  0214                     	;# 
  2937  0215                     	;# 
  2938  0215                     	;# 
  2939  0215                     	;# 
  2940  0215                     	;# 
  2941  0216                     	;# 
  2942  0216                     	;# 
  2943  0217                     	;# 
  2944  0217                     	;# 
  2945  028C                     	;# 
  2946  028D                     	;# 
  2947  028E                     	;# 
  2948  0291                     	;# 
  2949  0291                     	;# 
  2950  0292                     	;# 
  2951  0293                     	;# 
  2952  0294                     	;# 
  2953  0295                     	;# 
  2954  0295                     	;# 
  2955  0296                     	;# 
  2956  0297                     	;# 
  2957  0298                     	;# 
  2958  029F                     	;# 
  2959  030C                     	;# 
  2960  030D                     	;# 
  2961  030E                     	;# 
  2962  0311                     	;# 
  2963  0311                     	;# 
  2964  0312                     	;# 
  2965  0313                     	;# 
  2966  0314                     	;# 
  2967  0315                     	;# 
  2968  0315                     	;# 
  2969  0316                     	;# 
  2970  0317                     	;# 
  2971  0318                     	;# 
  2972  038C                     	;# 
  2973  038D                     	;# 
  2974  038E                     	;# 
  2975  0391                     	;# 
  2976  0392                     	;# 
  2977  0393                     	;# 
  2978  0394                     	;# 
  2979  0395                     	;# 
  2980  0396                     	;# 
  2981  0397                     	;# 
  2982  0398                     	;# 
  2983  0399                     	;# 
  2984  039A                     	;# 
  2985  039C                     	;# 
  2986  039D                     	;# 
  2987  039E                     	;# 
  2988  039F                     	;# 
  2989  0411                     	;# 
  2990  0411                     	;# 
  2991  0412                     	;# 
  2992  0413                     	;# 
  2993  0414                     	;# 
  2994  0415                     	;# 
  2995  0416                     	;# 
  2996  0417                     	;# 
  2997  0418                     	;# 
  2998  0418                     	;# 
  2999  0419                     	;# 
  3000  041A                     	;# 
  3001  041B                     	;# 
  3002  041C                     	;# 
  3003  041D                     	;# 
  3004  041E                     	;# 
  3005  041F                     	;# 
  3006  0498                     	;# 
  3007  0498                     	;# 
  3008  0499                     	;# 
  3009  049A                     	;# 
  3010  049B                     	;# 
  3011  049B                     	;# 
  3012  049C                     	;# 
  3013  049D                     	;# 
  3014  049E                     	;# 
  3015  049F                     	;# 
  3016  0617                     	;# 
  3017  0618                     	;# 
  3018  0619                     	;# 
  3019  0619                     	;# 
  3020  061A                     	;# 
  3021  061B                     	;# 
  3022  061C                     	;# 
  3023  061C                     	;# 
  3024  061F                     	;# 
  3025  0691                     	;# 
  3026  0692                     	;# 
  3027  0693                     	;# 
  3028  0694                     	;# 
  3029  0695                     	;# 
  3030  0696                     	;# 
  3031  0697                     	;# 
  3032  0698                     	;# 
  3033  0699                     	;# 
  3034  0711                     	;# 
  3035  0712                     	;# 
  3036  0713                     	;# 
  3037  0714                     	;# 
  3038  0715                     	;# 
  3039  0716                     	;# 
  3040  0717                     	;# 
  3041  0718                     	;# 
  3042  0719                     	;# 
  3043  0891                     	;# 
  3044  0891                     	;# 
  3045  0891                     	;# 
  3046  0891                     	;# 
  3047  0891                     	;# 
  3048  0891                     	;# 
  3049  0892                     	;# 
  3050  0892                     	;# 
  3051  0892                     	;# 
  3052  0893                     	;# 
  3053  0893                     	;# 
  3054  0893                     	;# 
  3055  0893                     	;# 
  3056  0893                     	;# 
  3057  0893                     	;# 
  3058  0894                     	;# 
  3059  0894                     	;# 
  3060  0894                     	;# 
  3061  0895                     	;# 
  3062  0895                     	;# 
  3063  0895                     	;# 
  3064  0896                     	;# 
  3065  0896                     	;# 
  3066  0896                     	;# 
  3067  089B                     	;# 
  3068  0911                     	;# 
  3069  0912                     	;# 
  3070  0913                     	;# 
  3071  0914                     	;# 
  3072  0915                     	;# 
  3073  0916                     	;# 
  3074  0918                     	;# 
  3075  0919                     	;# 
  3076  091A                     	;# 
  3077  091B                     	;# 
  3078  091C                     	;# 
  3079  091D                     	;# 
  3080  091E                     	;# 
  3081  091F                     	;# 
  3082  0E0F                     	;# 
  3083  0E10                     	;# 
  3084  0E11                     	;# 
  3085  0E12                     	;# 
  3086  0E13                     	;# 
  3087  0E14                     	;# 
  3088  0E15                     	;# 
  3089  0E16                     	;# 
  3090  0E17                     	;# 
  3091  0E18                     	;# 
  3092  0E19                     	;# 
  3093  0E1A                     	;# 
  3094  0E1B                     	;# 
  3095  0E1C                     	;# 
  3096  0E20                     	;# 
  3097  0E21                     	;# 
  3098  0E22                     	;# 
  3099  0E24                     	;# 
  3100  0E25                     	;# 
  3101  0E28                     	;# 
  3102  0E29                     	;# 
  3103  0E2A                     	;# 
  3104  0E2B                     	;# 
  3105  0E2C                     	;# 
  3106  0E2D                     	;# 
  3107  0E2E                     	;# 
  3108  0E2F                     	;# 
  3109  0E90                     	;# 
  3110  0E91                     	;# 
  3111  0E92                     	;# 
  3112  0E94                     	;# 
  3113  0E95                     	;# 
  3114  0E9C                     	;# 
  3115  0E9D                     	;# 
  3116  0E9E                     	;# 
  3117  0E9F                     	;# 
  3118  0EA0                     	;# 
  3119  0EA1                     	;# 
  3120  0EA2                     	;# 
  3121  0EA3                     	;# 
  3122  0EA4                     	;# 
  3123  0EA5                     	;# 
  3124  0EA6                     	;# 
  3125  0EA7                     	;# 
  3126  0F0F                     	;# 
  3127  0F10                     	;# 
  3128  0F11                     	;# 
  3129  0F12                     	;# 
  3130  0F13                     	;# 
  3131  0F14                     	;# 
  3132  0F15                     	;# 
  3133  0F16                     	;# 
  3134  0F17                     	;# 
  3135  0F18                     	;# 
  3136  0F19                     	;# 
  3137  0F1A                     	;# 
  3138  0F1B                     	;# 
  3139  0F1C                     	;# 
  3140  0F1D                     	;# 
  3141  0F1E                     	;# 
  3142  0F1F                     	;# 
  3143  0F20                     	;# 
  3144  0F21                     	;# 
  3145  0F22                     	;# 
  3146  0F23                     	;# 
  3147  0F24                     	;# 
  3148  0F25                     	;# 
  3149  0F26                     	;# 
  3150  0F27                     	;# 
  3151  0F28                     	;# 
  3152  0F29                     	;# 
  3153  0F2A                     	;# 
  3154  0F2B                     	;# 
  3155  0F2C                     	;# 
  3156  0F2D                     	;# 
  3157  0F2E                     	;# 
  3158  0F2F                     	;# 
  3159  0F30                     	;# 
  3160  0F31                     	;# 
  3161  0F32                     	;# 
  3162  0F33                     	;# 
  3163  0F34                     	;# 
  3164  0F35                     	;# 
  3165  0F36                     	;# 
  3166  0F37                     	;# 
  3167  0FE4                     	;# 
  3168  0FE5                     	;# 
  3169  0FE6                     	;# 
  3170  0FE7                     	;# 
  3171  0FE8                     	;# 
  3172  0FE9                     	;# 
  3173  0FEA                     	;# 
  3174  0FEB                     	;# 
  3175  0FED                     	;# 
  3176  0FEE                     	;# 
  3177  0FEF                     	;# 
  3178  0000                     	;# 
  3179  0001                     	;# 
  3180  0002                     	;# 
  3181  0003                     	;# 
  3182  0004                     	;# 
  3183  0005                     	;# 
  3184  0006                     	;# 
  3185  0007                     	;# 
  3186  0008                     	;# 
  3187  0009                     	;# 
  3188  000A                     	;# 
  3189  000B                     	;# 
  3190  000C                     	;# 
  3191  000D                     	;# 
  3192  000E                     	;# 
  3193  0010                     	;# 
  3194  0011                     	;# 
  3195  0012                     	;# 
  3196  0013                     	;# 
  3197  0014                     	;# 
  3198  0015                     	;# 
  3199  0015                     	;# 
  3200  0016                     	;# 
  3201  0016                     	;# 
  3202  0017                     	;# 
  3203  0018                     	;# 
  3204  0019                     	;# 
  3205  0019                     	;# 
  3206  001A                     	;# 
  3207  001B                     	;# 
  3208  001C                     	;# 
  3209  001D                     	;# 
  3210  001E                     	;# 
  3211  001F                     	;# 
  3212  008C                     	;# 
  3213  008D                     	;# 
  3214  008E                     	;# 
  3215  0090                     	;# 
  3216  0091                     	;# 
  3217  0092                     	;# 
  3218  0093                     	;# 
  3219  0094                     	;# 
  3220  0097                     	;# 
  3221  009B                     	;# 
  3222  009B                     	;# 
  3223  009C                     	;# 
  3224  009D                     	;# 
  3225  009E                     	;# 
  3226  009F                     	;# 
  3227  010C                     	;# 
  3228  010D                     	;# 
  3229  010E                     	;# 
  3230  0111                     	;# 
  3231  0112                     	;# 
  3232  0113                     	;# 
  3233  0114                     	;# 
  3234  0115                     	;# 
  3235  0116                     	;# 
  3236  0117                     	;# 
  3237  0118                     	;# 
  3238  0119                     	;# 
  3239  018C                     	;# 
  3240  018D                     	;# 
  3241  018E                     	;# 
  3242  0197                     	;# 
  3243  0199                     	;# 
  3244  0199                     	;# 
  3245  0199                     	;# 
  3246  019A                     	;# 
  3247  019A                     	;# 
  3248  019A                     	;# 
  3249  019B                     	;# 
  3250  019B                     	;# 
  3251  019B                     	;# 
  3252  019B                     	;# 
  3253  019B                     	;# 
  3254  019C                     	;# 
  3255  019C                     	;# 
  3256  019C                     	;# 
  3257  019D                     	;# 
  3258  019D                     	;# 
  3259  019D                     	;# 
  3260  019E                     	;# 
  3261  019E                     	;# 
  3262  019E                     	;# 
  3263  019F                     	;# 
  3264  019F                     	;# 
  3265  019F                     	;# 
  3266  019F                     	;# 
  3267  019F                     	;# 
  3268  020C                     	;# 
  3269  020D                     	;# 
  3270  020E                     	;# 
  3271  0211                     	;# 
  3272  0211                     	;# 
  3273  0212                     	;# 
  3274  0212                     	;# 
  3275  0213                     	;# 
  3276  0213                     	;# 
  3277  0214                     	;# 
  3278  0214                     	;# 
  3279  0215                     	;# 
  3280  0215                     	;# 
  3281  0215                     	;# 
  3282  0215                     	;# 
  3283  0216                     	;# 
  3284  0216                     	;# 
  3285  0217                     	;# 
  3286  0217                     	;# 
  3287  028C                     	;# 
  3288  028D                     	;# 
  3289  028E                     	;# 
  3290  0291                     	;# 
  3291  0291                     	;# 
  3292  0292                     	;# 
  3293  0293                     	;# 
  3294  0294                     	;# 
  3295  0295                     	;# 
  3296  0295                     	;# 
  3297  0296                     	;# 
  3298  0297                     	;# 
  3299  0298                     	;# 
  3300  029F                     	;# 
  3301  030C                     	;# 
  3302  030D                     	;# 
  3303  030E                     	;# 
  3304  0311                     	;# 
  3305  0311                     	;# 
  3306  0312                     	;# 
  3307  0313                     	;# 
  3308  0314                     	;# 
  3309  0315                     	;# 
  3310  0315                     	;# 
  3311  0316                     	;# 
  3312  0317                     	;# 
  3313  0318                     	;# 
  3314  038C                     	;# 
  3315  038D                     	;# 
  3316  038E                     	;# 
  3317  0391                     	;# 
  3318  0392                     	;# 
  3319  0393                     	;# 
  3320  0394                     	;# 
  3321  0395                     	;# 
  3322  0396                     	;# 
  3323  0397                     	;# 
  3324  0398                     	;# 
  3325  0399                     	;# 
  3326  039A                     	;# 
  3327  039C                     	;# 
  3328  039D                     	;# 
  3329  039E                     	;# 
  3330  039F                     	;# 
  3331  0411                     	;# 
  3332  0411                     	;# 
  3333  0412                     	;# 
  3334  0413                     	;# 
  3335  0414                     	;# 
  3336  0415                     	;# 
  3337  0416                     	;# 
  3338  0417                     	;# 
  3339  0418                     	;# 
  3340  0418                     	;# 
  3341  0419                     	;# 
  3342  041A                     	;# 
  3343  041B                     	;# 
  3344  041C                     	;# 
  3345  041D                     	;# 
  3346  041E                     	;# 
  3347  041F                     	;# 
  3348  0498                     	;# 
  3349  0498                     	;# 
  3350  0499                     	;# 
  3351  049A                     	;# 
  3352  049B                     	;# 
  3353  049B                     	;# 
  3354  049C                     	;# 
  3355  049D                     	;# 
  3356  049E                     	;# 
  3357  049F                     	;# 
  3358  0617                     	;# 
  3359  0618                     	;# 
  3360  0619                     	;# 
  3361  0619                     	;# 
  3362  061A                     	;# 
  3363  061B                     	;# 
  3364  061C                     	;# 
  3365  061C                     	;# 
  3366  061F                     	;# 
  3367  0691                     	;# 
  3368  0692                     	;# 
  3369  0693                     	;# 
  3370  0694                     	;# 
  3371  0695                     	;# 
  3372  0696                     	;# 
  3373  0697                     	;# 
  3374  0698                     	;# 
  3375  0699                     	;# 
  3376  0711                     	;# 
  3377  0712                     	;# 
  3378  0713                     	;# 
  3379  0714                     	;# 
  3380  0715                     	;# 
  3381  0716                     	;# 
  3382  0717                     	;# 
  3383  0718                     	;# 
  3384  0719                     	;# 
  3385  0891                     	;# 
  3386  0891                     	;# 
  3387  0891                     	;# 
  3388  0891                     	;# 
  3389  0891                     	;# 
  3390  0891                     	;# 
  3391  0892                     	;# 
  3392  0892                     	;# 
  3393  0892                     	;# 
  3394  0893                     	;# 
  3395  0893                     	;# 
  3396  0893                     	;# 
  3397  0893                     	;# 
  3398  0893                     	;# 
  3399  0893                     	;# 
  3400  0894                     	;# 
  3401  0894                     	;# 
  3402  0894                     	;# 
  3403  0895                     	;# 
  3404  0895                     	;# 
  3405  0895                     	;# 
  3406  0896                     	;# 
  3407  0896                     	;# 
  3408  0896                     	;# 
  3409  089B                     	;# 
  3410  0911                     	;# 
  3411  0912                     	;# 
  3412  0913                     	;# 
  3413  0914                     	;# 
  3414  0915                     	;# 
  3415  0916                     	;# 
  3416  0918                     	;# 
  3417  0919                     	;# 
  3418  091A                     	;# 
  3419  091B                     	;# 
  3420  091C                     	;# 
  3421  091D                     	;# 
  3422  091E                     	;# 
  3423  091F                     	;# 
  3424  0E0F                     	;# 
  3425  0E10                     	;# 
  3426  0E11                     	;# 
  3427  0E12                     	;# 
  3428  0E13                     	;# 
  3429  0E14                     	;# 
  3430  0E15                     	;# 
  3431  0E16                     	;# 
  3432  0E17                     	;# 
  3433  0E18                     	;# 
  3434  0E19                     	;# 
  3435  0E1A                     	;# 
  3436  0E1B                     	;# 
  3437  0E1C                     	;# 
  3438  0E20                     	;# 
  3439  0E21                     	;# 
  3440  0E22                     	;# 
  3441  0E24                     	;# 
  3442  0E25                     	;# 
  3443  0E28                     	;# 
  3444  0E29                     	;# 
  3445  0E2A                     	;# 
  3446  0E2B                     	;# 
  3447  0E2C                     	;# 
  3448  0E2D                     	;# 
  3449  0E2E                     	;# 
  3450  0E2F                     	;# 
  3451  0E90                     	;# 
  3452  0E91                     	;# 
  3453  0E92                     	;# 
  3454  0E94                     	;# 
  3455  0E95                     	;# 
  3456  0E9C                     	;# 
  3457  0E9D                     	;# 
  3458  0E9E                     	;# 
  3459  0E9F                     	;# 
  3460  0EA0                     	;# 
  3461  0EA1                     	;# 
  3462  0EA2                     	;# 
  3463  0EA3                     	;# 
  3464  0EA4                     	;# 
  3465  0EA5                     	;# 
  3466  0EA6                     	;# 
  3467  0EA7                     	;# 
  3468  0F0F                     	;# 
  3469  0F10                     	;# 
  3470  0F11                     	;# 
  3471  0F12                     	;# 
  3472  0F13                     	;# 
  3473  0F14                     	;# 
  3474  0F15                     	;# 
  3475  0F16                     	;# 
  3476  0F17                     	;# 
  3477  0F18                     	;# 
  3478  0F19                     	;# 
  3479  0F1A                     	;# 
  3480  0F1B                     	;# 
  3481  0F1C                     	;# 
  3482  0F1D                     	;# 
  3483  0F1E                     	;# 
  3484  0F1F                     	;# 
  3485  0F20                     	;# 
  3486  0F21                     	;# 
  3487  0F22                     	;# 
  3488  0F23                     	;# 
  3489  0F24                     	;# 
  3490  0F25                     	;# 
  3491  0F26                     	;# 
  3492  0F27                     	;# 
  3493  0F28                     	;# 
  3494  0F29                     	;# 
  3495  0F2A                     	;# 
  3496  0F2B                     	;# 
  3497  0F2C                     	;# 
  3498  0F2D                     	;# 
  3499  0F2E                     	;# 
  3500  0F2F                     	;# 
  3501  0F30                     	;# 
  3502  0F31                     	;# 
  3503  0F32                     	;# 
  3504  0F33                     	;# 
  3505  0F34                     	;# 
  3506  0F35                     	;# 
  3507  0F36                     	;# 
  3508  0F37                     	;# 
  3509  0FE4                     	;# 
  3510  0FE5                     	;# 
  3511  0FE6                     	;# 
  3512  0FE7                     	;# 
  3513  0FE8                     	;# 
  3514  0FE9                     	;# 
  3515  0FEA                     	;# 
  3516  0FEB                     	;# 
  3517  0FED                     	;# 
  3518  0FEE                     	;# 
  3519  0FEF                     	;# 
  3520  0000                     	;# 
  3521  0001                     	;# 
  3522  0002                     	;# 
  3523  0003                     	;# 
  3524  0004                     	;# 
  3525  0005                     	;# 
  3526  0006                     	;# 
  3527  0007                     	;# 
  3528  0008                     	;# 
  3529  0009                     	;# 
  3530  000A                     	;# 
  3531  000B                     	;# 
  3532  000C                     	;# 
  3533  000D                     	;# 
  3534  000E                     	;# 
  3535  0010                     	;# 
  3536  0011                     	;# 
  3537  0012                     	;# 
  3538  0013                     	;# 
  3539  0014                     	;# 
  3540  0015                     	;# 
  3541  0015                     	;# 
  3542  0016                     	;# 
  3543  0016                     	;# 
  3544  0017                     	;# 
  3545  0018                     	;# 
  3546  0019                     	;# 
  3547  0019                     	;# 
  3548  001A                     	;# 
  3549  001B                     	;# 
  3550  001C                     	;# 
  3551  001D                     	;# 
  3552  001E                     	;# 
  3553  001F                     	;# 
  3554  008C                     	;# 
  3555  008D                     	;# 
  3556  008E                     	;# 
  3557  0090                     	;# 
  3558  0091                     	;# 
  3559  0092                     	;# 
  3560  0093                     	;# 
  3561  0094                     	;# 
  3562  0097                     	;# 
  3563  009B                     	;# 
  3564  009B                     	;# 
  3565  009C                     	;# 
  3566  009D                     	;# 
  3567  009E                     	;# 
  3568  009F                     	;# 
  3569  010C                     	;# 
  3570  010D                     	;# 
  3571  010E                     	;# 
  3572  0111                     	;# 
  3573  0112                     	;# 
  3574  0113                     	;# 
  3575  0114                     	;# 
  3576  0115                     	;# 
  3577  0116                     	;# 
  3578  0117                     	;# 
  3579  0118                     	;# 
  3580  0119                     	;# 
  3581  018C                     	;# 
  3582  018D                     	;# 
  3583  018E                     	;# 
  3584  0197                     	;# 
  3585  0199                     	;# 
  3586  0199                     	;# 
  3587  0199                     	;# 
  3588  019A                     	;# 
  3589  019A                     	;# 
  3590  019A                     	;# 
  3591  019B                     	;# 
  3592  019B                     	;# 
  3593  019B                     	;# 
  3594  019B                     	;# 
  3595  019B                     	;# 
  3596  019C                     	;# 
  3597  019C                     	;# 
  3598  019C                     	;# 
  3599  019D                     	;# 
  3600  019D                     	;# 
  3601  019D                     	;# 
  3602  019E                     	;# 
  3603  019E                     	;# 
  3604  019E                     	;# 
  3605  019F                     	;# 
  3606  019F                     	;# 
  3607  019F                     	;# 
  3608  019F                     	;# 
  3609  019F                     	;# 
  3610  020C                     	;# 
  3611  020D                     	;# 
  3612  020E                     	;# 
  3613  0211                     	;# 
  3614  0211                     	;# 
  3615  0212                     	;# 
  3616  0212                     	;# 
  3617  0213                     	;# 
  3618  0213                     	;# 
  3619  0214                     	;# 
  3620  0214                     	;# 
  3621  0215                     	;# 
  3622  0215                     	;# 
  3623  0215                     	;# 
  3624  0215                     	;# 
  3625  0216                     	;# 
  3626  0216                     	;# 
  3627  0217                     	;# 
  3628  0217                     	;# 
  3629  028C                     	;# 
  3630  028D                     	;# 
  3631  028E                     	;# 
  3632  0291                     	;# 
  3633  0291                     	;# 
  3634  0292                     	;# 
  3635  0293                     	;# 
  3636  0294                     	;# 
  3637  0295                     	;# 
  3638  0295                     	;# 
  3639  0296                     	;# 
  3640  0297                     	;# 
  3641  0298                     	;# 
  3642  029F                     	;# 
  3643  030C                     	;# 
  3644  030D                     	;# 
  3645  030E                     	;# 
  3646  0311                     	;# 
  3647  0311                     	;# 
  3648  0312                     	;# 
  3649  0313                     	;# 
  3650  0314                     	;# 
  3651  0315                     	;# 
  3652  0315                     	;# 
  3653  0316                     	;# 
  3654  0317                     	;# 
  3655  0318                     	;# 
  3656  038C                     	;# 
  3657  038D                     	;# 
  3658  038E                     	;# 
  3659  0391                     	;# 
  3660  0392                     	;# 
  3661  0393                     	;# 
  3662  0394                     	;# 
  3663  0395                     	;# 
  3664  0396                     	;# 
  3665  0397                     	;# 
  3666  0398                     	;# 
  3667  0399                     	;# 
  3668  039A                     	;# 
  3669  039C                     	;# 
  3670  039D                     	;# 
  3671  039E                     	;# 
  3672  039F                     	;# 
  3673  0411                     	;# 
  3674  0411                     	;# 
  3675  0412                     	;# 
  3676  0413                     	;# 
  3677  0414                     	;# 
  3678  0415                     	;# 
  3679  0416                     	;# 
  3680  0417                     	;# 
  3681  0418                     	;# 
  3682  0418                     	;# 
  3683  0419                     	;# 
  3684  041A                     	;# 
  3685  041B                     	;# 
  3686  041C                     	;# 
  3687  041D                     	;# 
  3688  041E                     	;# 
  3689  041F                     	;# 
  3690  0498                     	;# 
  3691  0498                     	;# 
  3692  0499                     	;# 
  3693  049A                     	;# 
  3694  049B                     	;# 
  3695  049B                     	;# 
  3696  049C                     	;# 
  3697  049D                     	;# 
  3698  049E                     	;# 
  3699  049F                     	;# 
  3700  0617                     	;# 
  3701  0618                     	;# 
  3702  0619                     	;# 
  3703  0619                     	;# 
  3704  061A                     	;# 
  3705  061B                     	;# 
  3706  061C                     	;# 
  3707  061C                     	;# 
  3708  061F                     	;# 
  3709  0691                     	;# 
  3710  0692                     	;# 
  3711  0693                     	;# 
  3712  0694                     	;# 
  3713  0695                     	;# 
  3714  0696                     	;# 
  3715  0697                     	;# 
  3716  0698                     	;# 
  3717  0699                     	;# 
  3718  0711                     	;# 
  3719  0712                     	;# 
  3720  0713                     	;# 
  3721  0714                     	;# 
  3722  0715                     	;# 
  3723  0716                     	;# 
  3724  0717                     	;# 
  3725  0718                     	;# 
  3726  0719                     	;# 
  3727  0891                     	;# 
  3728  0891                     	;# 
  3729  0891                     	;# 
  3730  0891                     	;# 
  3731  0891                     	;# 
  3732  0891                     	;# 
  3733  0892                     	;# 
  3734  0892                     	;# 
  3735  0892                     	;# 
  3736  0893                     	;# 
  3737  0893                     	;# 
  3738  0893                     	;# 
  3739  0893                     	;# 
  3740  0893                     	;# 
  3741  0893                     	;# 
  3742  0894                     	;# 
  3743  0894                     	;# 
  3744  0894                     	;# 
  3745  0895                     	;# 
  3746  0895                     	;# 
  3747  0895                     	;# 
  3748  0896                     	;# 
  3749  0896                     	;# 
  3750  0896                     	;# 
  3751  089B                     	;# 
  3752  0911                     	;# 
  3753  0912                     	;# 
  3754  0913                     	;# 
  3755  0914                     	;# 
  3756  0915                     	;# 
  3757  0916                     	;# 
  3758  0918                     	;# 
  3759  0919                     	;# 
  3760  091A                     	;# 
  3761  091B                     	;# 
  3762  091C                     	;# 
  3763  091D                     	;# 
  3764  091E                     	;# 
  3765  091F                     	;# 
  3766  0E0F                     	;# 
  3767  0E10                     	;# 
  3768  0E11                     	;# 
  3769  0E12                     	;# 
  3770  0E13                     	;# 
  3771  0E14                     	;# 
  3772  0E15                     	;# 
  3773  0E16                     	;# 
  3774  0E17                     	;# 
  3775  0E18                     	;# 
  3776  0E19                     	;# 
  3777  0E1A                     	;# 
  3778  0E1B                     	;# 
  3779  0E1C                     	;# 
  3780  0E20                     	;# 
  3781  0E21                     	;# 
  3782  0E22                     	;# 
  3783  0E24                     	;# 
  3784  0E25                     	;# 
  3785  0E28                     	;# 
  3786  0E29                     	;# 
  3787  0E2A                     	;# 
  3788  0E2B                     	;# 
  3789  0E2C                     	;# 
  3790  0E2D                     	;# 
  3791  0E2E                     	;# 
  3792  0E2F                     	;# 
  3793  0E90                     	;# 
  3794  0E91                     	;# 
  3795  0E92                     	;# 
  3796  0E94                     	;# 
  3797  0E95                     	;# 
  3798  0E9C                     	;# 
  3799  0E9D                     	;# 
  3800  0E9E                     	;# 
  3801  0E9F                     	;# 
  3802  0EA0                     	;# 
  3803  0EA1                     	;# 
  3804  0EA2                     	;# 
  3805  0EA3                     	;# 
  3806  0EA4                     	;# 
  3807  0EA5                     	;# 
  3808  0EA6                     	;# 
  3809  0EA7                     	;# 
  3810  0F0F                     	;# 
  3811  0F10                     	;# 
  3812  0F11                     	;# 
  3813  0F12                     	;# 
  3814  0F13                     	;# 
  3815  0F14                     	;# 
  3816  0F15                     	;# 
  3817  0F16                     	;# 
  3818  0F17                     	;# 
  3819  0F18                     	;# 
  3820  0F19                     	;# 
  3821  0F1A                     	;# 
  3822  0F1B                     	;# 
  3823  0F1C                     	;# 
  3824  0F1D                     	;# 
  3825  0F1E                     	;# 
  3826  0F1F                     	;# 
  3827  0F20                     	;# 
  3828  0F21                     	;# 
  3829  0F22                     	;# 
  3830  0F23                     	;# 
  3831  0F24                     	;# 
  3832  0F25                     	;# 
  3833  0F26                     	;# 
  3834  0F27                     	;# 
  3835  0F28                     	;# 
  3836  0F29                     	;# 
  3837  0F2A                     	;# 
  3838  0F2B                     	;# 
  3839  0F2C                     	;# 
  3840  0F2D                     	;# 
  3841  0F2E                     	;# 
  3842  0F2F                     	;# 
  3843  0F30                     	;# 
  3844  0F31                     	;# 
  3845  0F32                     	;# 
  3846  0F33                     	;# 
  3847  0F34                     	;# 
  3848  0F35                     	;# 
  3849  0F36                     	;# 
  3850  0F37                     	;# 
  3851  0FE4                     	;# 
  3852  0FE5                     	;# 
  3853  0FE6                     	;# 
  3854  0FE7                     	;# 
  3855  0FE8                     	;# 
  3856  0FE9                     	;# 
  3857  0FEA                     	;# 
  3858  0FEB                     	;# 
  3859  0FED                     	;# 
  3860  0FEE                     	;# 
  3861  0FEF                     	;# 
  3862  0000                     	;# 
  3863  0001                     	;# 
  3864  0002                     	;# 
  3865  0003                     	;# 
  3866  0004                     	;# 
  3867  0005                     	;# 
  3868  0006                     	;# 
  3869  0007                     	;# 
  3870  0008                     	;# 
  3871  0009                     	;# 
  3872  000A                     	;# 
  3873  000B                     	;# 
  3874  000C                     	;# 
  3875  000D                     	;# 
  3876  000E                     	;# 
  3877  0010                     	;# 
  3878  0011                     	;# 
  3879  0012                     	;# 
  3880  0013                     	;# 
  3881  0014                     	;# 
  3882  0015                     	;# 
  3883  0015                     	;# 
  3884  0016                     	;# 
  3885  0016                     	;# 
  3886  0017                     	;# 
  3887  0018                     	;# 
  3888  0019                     	;# 
  3889  0019                     	;# 
  3890  001A                     	;# 
  3891  001B                     	;# 
  3892  001C                     	;# 
  3893  001D                     	;# 
  3894  001E                     	;# 
  3895  001F                     	;# 
  3896  008C                     	;# 
  3897  008D                     	;# 
  3898  008E                     	;# 
  3899  0090                     	;# 
  3900  0091                     	;# 
  3901  0092                     	;# 
  3902  0093                     	;# 
  3903  0094                     	;# 
  3904  0097                     	;# 
  3905  009B                     	;# 
  3906  009B                     	;# 
  3907  009C                     	;# 
  3908  009D                     	;# 
  3909  009E                     	;# 
  3910  009F                     	;# 
  3911  010C                     	;# 
  3912  010D                     	;# 
  3913  010E                     	;# 
  3914  0111                     	;# 
  3915  0112                     	;# 
  3916  0113                     	;# 
  3917  0114                     	;# 
  3918  0115                     	;# 
  3919  0116                     	;# 
  3920  0117                     	;# 
  3921  0118                     	;# 
  3922  0119                     	;# 
  3923  018C                     	;# 
  3924  018D                     	;# 
  3925  018E                     	;# 
  3926  0197                     	;# 
  3927  0199                     	;# 
  3928  0199                     	;# 
  3929  0199                     	;# 
  3930  019A                     	;# 
  3931  019A                     	;# 
  3932  019A                     	;# 
  3933  019B                     	;# 
  3934  019B                     	;# 
  3935  019B                     	;# 
  3936  019B                     	;# 
  3937  019B                     	;# 
  3938  019C                     	;# 
  3939  019C                     	;# 
  3940  019C                     	;# 
  3941  019D                     	;# 
  3942  019D                     	;# 
  3943  019D                     	;# 
  3944  019E                     	;# 
  3945  019E                     	;# 
  3946  019E                     	;# 
  3947  019F                     	;# 
  3948  019F                     	;# 
  3949  019F                     	;# 
  3950  019F                     	;# 
  3951  019F                     	;# 
  3952  020C                     	;# 
  3953  020D                     	;# 
  3954  020E                     	;# 
  3955  0211                     	;# 
  3956  0211                     	;# 
  3957  0212                     	;# 
  3958  0212                     	;# 
  3959  0213                     	;# 
  3960  0213                     	;# 
  3961  0214                     	;# 
  3962  0214                     	;# 
  3963  0215                     	;# 
  3964  0215                     	;# 
  3965  0215                     	;# 
  3966  0215                     	;# 
  3967  0216                     	;# 
  3968  0216                     	;# 
  3969  0217                     	;# 
  3970  0217                     	;# 
  3971  028C                     	;# 
  3972  028D                     	;# 
  3973  028E                     	;# 
  3974  0291                     	;# 
  3975  0291                     	;# 
  3976  0292                     	;# 
  3977  0293                     	;# 
  3978  0294                     	;# 
  3979  0295                     	;# 
  3980  0295                     	;# 
  3981  0296                     	;# 
  3982  0297                     	;# 
  3983  0298                     	;# 
  3984  029F                     	;# 
  3985  030C                     	;# 
  3986  030D                     	;# 
  3987  030E                     	;# 
  3988  0311                     	;# 
  3989  0311                     	;# 
  3990  0312                     	;# 
  3991  0313                     	;# 
  3992  0314                     	;# 
  3993  0315                     	;# 
  3994  0315                     	;# 
  3995  0316                     	;# 
  3996  0317                     	;# 
  3997  0318                     	;# 
  3998  038C                     	;# 
  3999  038D                     	;# 
  4000  038E                     	;# 
  4001  0391                     	;# 
  4002  0392                     	;# 
  4003  0393                     	;# 
  4004  0394                     	;# 
  4005  0395                     	;# 
  4006  0396                     	;# 
  4007  0397                     	;# 
  4008  0398                     	;# 
  4009  0399                     	;# 
  4010  039A                     	;# 
  4011  039C                     	;# 
  4012  039D                     	;# 
  4013  039E                     	;# 
  4014  039F                     	;# 
  4015  0411                     	;# 
  4016  0411                     	;# 
  4017  0412                     	;# 
  4018  0413                     	;# 
  4019  0414                     	;# 
  4020  0415                     	;# 
  4021  0416                     	;# 
  4022  0417                     	;# 
  4023  0418                     	;# 
  4024  0418                     	;# 
  4025  0419                     	;# 
  4026  041A                     	;# 
  4027  041B                     	;# 
  4028  041C                     	;# 
  4029  041D                     	;# 
  4030  041E                     	;# 
  4031  041F                     	;# 
  4032  0498                     	;# 
  4033  0498                     	;# 
  4034  0499                     	;# 
  4035  049A                     	;# 
  4036  049B                     	;# 
  4037  049B                     	;# 
  4038  049C                     	;# 
  4039  049D                     	;# 
  4040  049E                     	;# 
  4041  049F                     	;# 
  4042  0617                     	;# 
  4043  0618                     	;# 
  4044  0619                     	;# 
  4045  0619                     	;# 
  4046  061A                     	;# 
  4047  061B                     	;# 
  4048  061C                     	;# 
  4049  061C                     	;# 
  4050  061F                     	;# 
  4051  0691                     	;# 
  4052  0692                     	;# 
  4053  0693                     	;# 
  4054  0694                     	;# 
  4055  0695                     	;# 
  4056  0696                     	;# 
  4057  0697                     	;# 
  4058  0698                     	;# 
  4059  0699                     	;# 
  4060  0711                     	;# 
  4061  0712                     	;# 
  4062  0713                     	;# 
  4063  0714                     	;# 
  4064  0715                     	;# 
  4065  0716                     	;# 
  4066  0717                     	;# 
  4067  0718                     	;# 
  4068  0719                     	;# 
  4069  0891                     	;# 
  4070  0891                     	;# 
  4071  0891                     	;# 
  4072  0891                     	;# 
  4073  0891                     	;# 
  4074  0891                     	;# 
  4075  0892                     	;# 
  4076  0892                     	;# 
  4077  0892                     	;# 
  4078  0893                     	;# 
  4079  0893                     	;# 
  4080  0893                     	;# 
  4081  0893                     	;# 
  4082  0893                     	;# 
  4083  0893                     	;# 
  4084  0894                     	;# 
  4085  0894                     	;# 
  4086  0894                     	;# 
  4087  0895                     	;# 
  4088  0895                     	;# 
  4089  0895                     	;# 
  4090  0896                     	;# 
  4091  0896                     	;# 
  4092  0896                     	;# 
  4093  089B                     	;# 
  4094  0911                     	;# 
  4095  0912                     	;# 
  4096  0913                     	;# 
  4097  0914                     	;# 
  4098  0915                     	;# 
  4099  0916                     	;# 
  4100  0918                     	;# 
  4101  0919                     	;# 
  4102  091A                     	;# 
  4103  091B                     	;# 
  4104  091C                     	;# 
  4105  091D                     	;# 
  4106  091E                     	;# 
  4107  091F                     	;# 
  4108  0E0F                     	;# 
  4109  0E10                     	;# 
  4110  0E11                     	;# 
  4111  0E12                     	;# 
  4112  0E13                     	;# 
  4113  0E14                     	;# 
  4114  0E15                     	;# 
  4115  0E16                     	;# 
  4116  0E17                     	;# 
  4117  0E18                     	;# 
  4118  0E19                     	;# 
  4119  0E1A                     	;# 
  4120  0E1B                     	;# 
  4121  0E1C                     	;# 
  4122  0E20                     	;# 
  4123  0E21                     	;# 
  4124  0E22                     	;# 
  4125  0E24                     	;# 
  4126  0E25                     	;# 
  4127  0E28                     	;# 
  4128  0E29                     	;# 
  4129  0E2A                     	;# 
  4130  0E2B                     	;# 
  4131  0E2C                     	;# 
  4132  0E2D                     	;# 
  4133  0E2E                     	;# 
  4134  0E2F                     	;# 
  4135  0E90                     	;# 
  4136  0E91                     	;# 
  4137  0E92                     	;# 
  4138  0E94                     	;# 
  4139  0E95                     	;# 
  4140  0E9C                     	;# 
  4141  0E9D                     	;# 
  4142  0E9E                     	;# 
  4143  0E9F                     	;# 
  4144  0EA0                     	;# 
  4145  0EA1                     	;# 
  4146  0EA2                     	;# 
  4147  0EA3                     	;# 
  4148  0EA4                     	;# 
  4149  0EA5                     	;# 
  4150  0EA6                     	;# 
  4151  0EA7                     	;# 
  4152  0F0F                     	;# 
  4153  0F10                     	;# 
  4154  0F11                     	;# 
  4155  0F12                     	;# 
  4156  0F13                     	;# 
  4157  0F14                     	;# 
  4158  0F15                     	;# 
  4159  0F16                     	;# 
  4160  0F17                     	;# 
  4161  0F18                     	;# 
  4162  0F19                     	;# 
  4163  0F1A                     	;# 
  4164  0F1B                     	;# 
  4165  0F1C                     	;# 
  4166  0F1D                     	;# 
  4167  0F1E                     	;# 
  4168  0F1F                     	;# 
  4169  0F20                     	;# 
  4170  0F21                     	;# 
  4171  0F22                     	;# 
  4172  0F23                     	;# 
  4173  0F24                     	;# 
  4174  0F25                     	;# 
  4175  0F26                     	;# 
  4176  0F27                     	;# 
  4177  0F28                     	;# 
  4178  0F29                     	;# 
  4179  0F2A                     	;# 
  4180  0F2B                     	;# 
  4181  0F2C                     	;# 
  4182  0F2D                     	;# 
  4183  0F2E                     	;# 
  4184  0F2F                     	;# 
  4185  0F30                     	;# 
  4186  0F31                     	;# 
  4187  0F32                     	;# 
  4188  0F33                     	;# 
  4189  0F34                     	;# 
  4190  0F35                     	;# 
  4191  0F36                     	;# 
  4192  0F37                     	;# 
  4193  0FE4                     	;# 
  4194  0FE5                     	;# 
  4195  0FE6                     	;# 
  4196  0FE7                     	;# 
  4197  0FE8                     	;# 
  4198  0FE9                     	;# 
  4199  0FEA                     	;# 
  4200  0FEB                     	;# 
  4201  0FED                     	;# 
  4202  0FEE                     	;# 
  4203  0FEF                     	;# 
  4204  0000                     	;# 
  4205  0001                     	;# 
  4206  0002                     	;# 
  4207  0003                     	;# 
  4208  0004                     	;# 
  4209  0005                     	;# 
  4210  0006                     	;# 
  4211  0007                     	;# 
  4212  0008                     	;# 
  4213  0009                     	;# 
  4214  000A                     	;# 
  4215  000B                     	;# 
  4216  000C                     	;# 
  4217  000D                     	;# 
  4218  000E                     	;# 
  4219  0010                     	;# 
  4220  0011                     	;# 
  4221  0012                     	;# 
  4222  0013                     	;# 
  4223  0014                     	;# 
  4224  0015                     	;# 
  4225  0015                     	;# 
  4226  0016                     	;# 
  4227  0016                     	;# 
  4228  0017                     	;# 
  4229  0018                     	;# 
  4230  0019                     	;# 
  4231  0019                     	;# 
  4232  001A                     	;# 
  4233  001B                     	;# 
  4234  001C                     	;# 
  4235  001D                     	;# 
  4236  001E                     	;# 
  4237  001F                     	;# 
  4238  008C                     	;# 
  4239  008D                     	;# 
  4240  008E                     	;# 
  4241  0090                     	;# 
  4242  0091                     	;# 
  4243  0092                     	;# 
  4244  0093                     	;# 
  4245  0094                     	;# 
  4246  0097                     	;# 
  4247  009B                     	;# 
  4248  009B                     	;# 
  4249  009C                     	;# 
  4250  009D                     	;# 
  4251  009E                     	;# 
  4252  009F                     	;# 
  4253  010C                     	;# 
  4254  010D                     	;# 
  4255  010E                     	;# 
  4256  0111                     	;# 
  4257  0112                     	;# 
  4258  0113                     	;# 
  4259  0114                     	;# 
  4260  0115                     	;# 
  4261  0116                     	;# 
  4262  0117                     	;# 
  4263  0118                     	;# 
  4264  0119                     	;# 
  4265  018C                     	;# 
  4266  018D                     	;# 
  4267  018E                     	;# 
  4268  0197                     	;# 
  4269  0199                     	;# 
  4270  0199                     	;# 
  4271  0199                     	;# 
  4272  019A                     	;# 
  4273  019A                     	;# 
  4274  019A                     	;# 
  4275  019B                     	;# 
  4276  019B                     	;# 
  4277  019B                     	;# 
  4278  019B                     	;# 
  4279  019B                     	;# 
  4280  019C                     	;# 
  4281  019C                     	;# 
  4282  019C                     	;# 
  4283  019D                     	;# 
  4284  019D                     	;# 
  4285  019D                     	;# 
  4286  019E                     	;# 
  4287  019E                     	;# 
  4288  019E                     	;# 
  4289  019F                     	;# 
  4290  019F                     	;# 
  4291  019F                     	;# 
  4292  019F                     	;# 
  4293  019F                     	;# 
  4294  020C                     	;# 
  4295  020D                     	;# 
  4296  020E                     	;# 
  4297  0211                     	;# 
  4298  0211                     	;# 
  4299  0212                     	;# 
  4300  0212                     	;# 
  4301  0213                     	;# 
  4302  0213                     	;# 
  4303  0214                     	;# 
  4304  0214                     	;# 
  4305  0215                     	;# 
  4306  0215                     	;# 
  4307  0215                     	;# 
  4308  0215                     	;# 
  4309  0216                     	;# 
  4310  0216                     	;# 
  4311  0217                     	;# 
  4312  0217                     	;# 
  4313  028C                     	;# 
  4314  028D                     	;# 
  4315  028E                     	;# 
  4316  0291                     	;# 
  4317  0291                     	;# 
  4318  0292                     	;# 
  4319  0293                     	;# 
  4320  0294                     	;# 
  4321  0295                     	;# 
  4322  0295                     	;# 
  4323  0296                     	;# 
  4324  0297                     	;# 
  4325  0298                     	;# 
  4326  029F                     	;# 
  4327  030C                     	;# 
  4328  030D                     	;# 
  4329  030E                     	;# 
  4330  0311                     	;# 
  4331  0311                     	;# 
  4332  0312                     	;# 
  4333  0313                     	;# 
  4334  0314                     	;# 
  4335  0315                     	;# 
  4336  0315                     	;# 
  4337  0316                     	;# 
  4338  0317                     	;# 
  4339  0318                     	;# 
  4340  038C                     	;# 
  4341  038D                     	;# 
  4342  038E                     	;# 
  4343  0391                     	;# 
  4344  0392                     	;# 
  4345  0393                     	;# 
  4346  0394                     	;# 
  4347  0395                     	;# 
  4348  0396                     	;# 
  4349  0397                     	;# 
  4350  0398                     	;# 
  4351  0399                     	;# 
  4352  039A                     	;# 
  4353  039C                     	;# 
  4354  039D                     	;# 
  4355  039E                     	;# 
  4356  039F                     	;# 
  4357  0411                     	;# 
  4358  0411                     	;# 
  4359  0412                     	;# 
  4360  0413                     	;# 
  4361  0414                     	;# 
  4362  0415                     	;# 
  4363  0416                     	;# 
  4364  0417                     	;# 
  4365  0418                     	;# 
  4366  0418                     	;# 
  4367  0419                     	;# 
  4368  041A                     	;# 
  4369  041B                     	;# 
  4370  041C                     	;# 
  4371  041D                     	;# 
  4372  041E                     	;# 
  4373  041F                     	;# 
  4374  0498                     	;# 
  4375  0498                     	;# 
  4376  0499                     	;# 
  4377  049A                     	;# 
  4378  049B                     	;# 
  4379  049B                     	;# 
  4380  049C                     	;# 
  4381  049D                     	;# 
  4382  049E                     	;# 
  4383  049F                     	;# 
  4384  0617                     	;# 
  4385  0618                     	;# 
  4386  0619                     	;# 
  4387  0619                     	;# 
  4388  061A                     	;# 
  4389  061B                     	;# 
  4390  061C                     	;# 
  4391  061C                     	;# 
  4392  061F                     	;# 
  4393  0691                     	;# 
  4394  0692                     	;# 
  4395  0693                     	;# 
  4396  0694                     	;# 
  4397  0695                     	;# 
  4398  0696                     	;# 
  4399  0697                     	;# 
  4400  0698                     	;# 
  4401  0699                     	;# 
  4402  0711                     	;# 
  4403  0712                     	;# 
  4404  0713                     	;# 
  4405  0714                     	;# 
  4406  0715                     	;# 
  4407  0716                     	;# 
  4408  0717                     	;# 
  4409  0718                     	;# 
  4410  0719                     	;# 
  4411  0891                     	;# 
  4412  0891                     	;# 
  4413  0891                     	;# 
  4414  0891                     	;# 
  4415  0891                     	;# 
  4416  0891                     	;# 
  4417  0892                     	;# 
  4418  0892                     	;# 
  4419  0892                     	;# 
  4420  0893                     	;# 
  4421  0893                     	;# 
  4422  0893                     	;# 
  4423  0893                     	;# 
  4424  0893                     	;# 
  4425  0893                     	;# 
  4426  0894                     	;# 
  4427  0894                     	;# 
  4428  0894                     	;# 
  4429  0895                     	;# 
  4430  0895                     	;# 
  4431  0895                     	;# 
  4432  0896                     	;# 
  4433  0896                     	;# 
  4434  0896                     	;# 
  4435  089B                     	;# 
  4436  0911                     	;# 
  4437  0912                     	;# 
  4438  0913                     	;# 
  4439  0914                     	;# 
  4440  0915                     	;# 
  4441  0916                     	;# 
  4442  0918                     	;# 
  4443  0919                     	;# 
  4444  091A                     	;# 
  4445  091B                     	;# 
  4446  091C                     	;# 
  4447  091D                     	;# 
  4448  091E                     	;# 
  4449  091F                     	;# 
  4450  0E0F                     	;# 
  4451  0E10                     	;# 
  4452  0E11                     	;# 
  4453  0E12                     	;# 
  4454  0E13                     	;# 
  4455  0E14                     	;# 
  4456  0E15                     	;# 
  4457  0E16                     	;# 
  4458  0E17                     	;# 
  4459  0E18                     	;# 
  4460  0E19                     	;# 
  4461  0E1A                     	;# 
  4462  0E1B                     	;# 
  4463  0E1C                     	;# 
  4464  0E20                     	;# 
  4465  0E21                     	;# 
  4466  0E22                     	;# 
  4467  0E24                     	;# 
  4468  0E25                     	;# 
  4469  0E28                     	;# 
  4470  0E29                     	;# 
  4471  0E2A                     	;# 
  4472  0E2B                     	;# 
  4473  0E2C                     	;# 
  4474  0E2D                     	;# 
  4475  0E2E                     	;# 
  4476  0E2F                     	;# 
  4477  0E90                     	;# 
  4478  0E91                     	;# 
  4479  0E92                     	;# 
  4480  0E94                     	;# 
  4481  0E95                     	;# 
  4482  0E9C                     	;# 
  4483  0E9D                     	;# 
  4484  0E9E                     	;# 
  4485  0E9F                     	;# 
  4486  0EA0                     	;# 
  4487  0EA1                     	;# 
  4488  0EA2                     	;# 
  4489  0EA3                     	;# 
  4490  0EA4                     	;# 
  4491  0EA5                     	;# 
  4492  0EA6                     	;# 
  4493  0EA7                     	;# 
  4494  0F0F                     	;# 
  4495  0F10                     	;# 
  4496  0F11                     	;# 
  4497  0F12                     	;# 
  4498  0F13                     	;# 
  4499  0F14                     	;# 
  4500  0F15                     	;# 
  4501  0F16                     	;# 
  4502  0F17                     	;# 
  4503  0F18                     	;# 
  4504  0F19                     	;# 
  4505  0F1A                     	;# 
  4506  0F1B                     	;# 
  4507  0F1C                     	;# 
  4508  0F1D                     	;# 
  4509  0F1E                     	;# 
  4510  0F1F                     	;# 
  4511  0F20                     	;# 
  4512  0F21                     	;# 
  4513  0F22                     	;# 
  4514  0F23                     	;# 
  4515  0F24                     	;# 
  4516  0F25                     	;# 
  4517  0F26                     	;# 
  4518  0F27                     	;# 
  4519  0F28                     	;# 
  4520  0F29                     	;# 
  4521  0F2A                     	;# 
  4522  0F2B                     	;# 
  4523  0F2C                     	;# 
  4524  0F2D                     	;# 
  4525  0F2E                     	;# 
  4526  0F2F                     	;# 
  4527  0F30                     	;# 
  4528  0F31                     	;# 
  4529  0F32                     	;# 
  4530  0F33                     	;# 
  4531  0F34                     	;# 
  4532  0F35                     	;# 
  4533  0F36                     	;# 
  4534  0F37                     	;# 
  4535  0FE4                     	;# 
  4536  0FE5                     	;# 
  4537  0FE6                     	;# 
  4538  0FE7                     	;# 
  4539  0FE8                     	;# 
  4540  0FE9                     	;# 
  4541  0FEA                     	;# 
  4542  0FEB                     	;# 
  4543  0FED                     	;# 
  4544  0FEE                     	;# 
  4545  0FEF                     	;# 
  4546  0000                     	;# 
  4547  0001                     	;# 
  4548  0002                     	;# 
  4549  0003                     	;# 
  4550  0004                     	;# 
  4551  0005                     	;# 
  4552  0006                     	;# 
  4553  0007                     	;# 
  4554  0008                     	;# 
  4555  0009                     	;# 
  4556  000A                     	;# 
  4557  000B                     	;# 
  4558  000C                     	;# 
  4559  000D                     	;# 
  4560  000E                     	;# 
  4561  0010                     	;# 
  4562  0011                     	;# 
  4563  0012                     	;# 
  4564  0013                     	;# 
  4565  0014                     	;# 
  4566  0015                     	;# 
  4567  0015                     	;# 
  4568  0016                     	;# 
  4569  0016                     	;# 
  4570  0017                     	;# 
  4571  0018                     	;# 
  4572  0019                     	;# 
  4573  0019                     	;# 
  4574  001A                     	;# 
  4575  001B                     	;# 
  4576  001C                     	;# 
  4577  001D                     	;# 
  4578  001E                     	;# 
  4579  001F                     	;# 
  4580  008C                     	;# 
  4581  008D                     	;# 
  4582  008E                     	;# 
  4583  0090                     	;# 
  4584  0091                     	;# 
  4585  0092                     	;# 
  4586  0093                     	;# 
  4587  0094                     	;# 
  4588  0097                     	;# 
  4589  009B                     	;# 
  4590  009B                     	;# 
  4591  009C                     	;# 
  4592  009D                     	;# 
  4593  009E                     	;# 
  4594  009F                     	;# 
  4595  010C                     	;# 
  4596  010D                     	;# 
  4597  010E                     	;# 
  4598  0111                     	;# 
  4599  0112                     	;# 
  4600  0113                     	;# 
  4601  0114                     	;# 
  4602  0115                     	;# 
  4603  0116                     	;# 
  4604  0117                     	;# 
  4605  0118                     	;# 
  4606  0119                     	;# 
  4607  018C                     	;# 
  4608  018D                     	;# 
  4609  018E                     	;# 
  4610  0197                     	;# 
  4611  0199                     	;# 
  4612  0199                     	;# 
  4613  0199                     	;# 
  4614  019A                     	;# 
  4615  019A                     	;# 
  4616  019A                     	;# 
  4617  019B                     	;# 
  4618  019B                     	;# 
  4619  019B                     	;# 
  4620  019B                     	;# 
  4621  019B                     	;# 
  4622  019C                     	;# 
  4623  019C                     	;# 
  4624  019C                     	;# 
  4625  019D                     	;# 
  4626  019D                     	;# 
  4627  019D                     	;# 
  4628  019E                     	;# 
  4629  019E                     	;# 
  4630  019E                     	;# 
  4631  019F                     	;# 
  4632  019F                     	;# 
  4633  019F                     	;# 
  4634  019F                     	;# 
  4635  019F                     	;# 
  4636  020C                     	;# 
  4637  020D                     	;# 
  4638  020E                     	;# 
  4639  0211                     	;# 
  4640  0211                     	;# 
  4641  0212                     	;# 
  4642  0212                     	;# 
  4643  0213                     	;# 
  4644  0213                     	;# 
  4645  0214                     	;# 
  4646  0214                     	;# 
  4647  0215                     	;# 
  4648  0215                     	;# 
  4649  0215                     	;# 
  4650  0215                     	;# 
  4651  0216                     	;# 
  4652  0216                     	;# 
  4653  0217                     	;# 
  4654  0217                     	;# 
  4655  028C                     	;# 
  4656  028D                     	;# 
  4657  028E                     	;# 
  4658  0291                     	;# 
  4659  0291                     	;# 
  4660  0292                     	;# 
  4661  0293                     	;# 
  4662  0294                     	;# 
  4663  0295                     	;# 
  4664  0295                     	;# 
  4665  0296                     	;# 
  4666  0297                     	;# 
  4667  0298                     	;# 
  4668  029F                     	;# 
  4669  030C                     	;# 
  4670  030D                     	;# 
  4671  030E                     	;# 
  4672  0311                     	;# 
  4673  0311                     	;# 
  4674  0312                     	;# 
  4675  0313                     	;# 
  4676  0314                     	;# 
  4677  0315                     	;# 
  4678  0315                     	;# 
  4679  0316                     	;# 
  4680  0317                     	;# 
  4681  0318                     	;# 
  4682  038C                     	;# 
  4683  038D                     	;# 
  4684  038E                     	;# 
  4685  0391                     	;# 
  4686  0392                     	;# 
  4687  0393                     	;# 
  4688  0394                     	;# 
  4689  0395                     	;# 
  4690  0396                     	;# 
  4691  0397                     	;# 
  4692  0398                     	;# 
  4693  0399                     	;# 
  4694  039A                     	;# 
  4695  039C                     	;# 
  4696  039D                     	;# 
  4697  039E                     	;# 
  4698  039F                     	;# 
  4699  0411                     	;# 
  4700  0411                     	;# 
  4701  0412                     	;# 
  4702  0413                     	;# 
  4703  0414                     	;# 
  4704  0415                     	;# 
  4705  0416                     	;# 
  4706  0417                     	;# 
  4707  0418                     	;# 
  4708  0418                     	;# 
  4709  0419                     	;# 
  4710  041A                     	;# 
  4711  041B                     	;# 
  4712  041C                     	;# 
  4713  041D                     	;# 
  4714  041E                     	;# 
  4715  041F                     	;# 
  4716  0498                     	;# 
  4717  0498                     	;# 
  4718  0499                     	;# 
  4719  049A                     	;# 
  4720  049B                     	;# 
  4721  049B                     	;# 
  4722  049C                     	;# 
  4723  049D                     	;# 
  4724  049E                     	;# 
  4725  049F                     	;# 
  4726  0617                     	;# 
  4727  0618                     	;# 
  4728  0619                     	;# 
  4729  0619                     	;# 
  4730  061A                     	;# 
  4731  061B                     	;# 
  4732  061C                     	;# 
  4733  061C                     	;# 
  4734  061F                     	;# 
  4735  0691                     	;# 
  4736  0692                     	;# 
  4737  0693                     	;# 
  4738  0694                     	;# 
  4739  0695                     	;# 
  4740  0696                     	;# 
  4741  0697                     	;# 
  4742  0698                     	;# 
  4743  0699                     	;# 
  4744  0711                     	;# 
  4745  0712                     	;# 
  4746  0713                     	;# 
  4747  0714                     	;# 
  4748  0715                     	;# 
  4749  0716                     	;# 
  4750  0717                     	;# 
  4751  0718                     	;# 
  4752  0719                     	;# 
  4753  0891                     	;# 
  4754  0891                     	;# 
  4755  0891                     	;# 
  4756  0891                     	;# 
  4757  0891                     	;# 
  4758  0891                     	;# 
  4759  0892                     	;# 
  4760  0892                     	;# 
  4761  0892                     	;# 
  4762  0893                     	;# 
  4763  0893                     	;# 
  4764  0893                     	;# 
  4765  0893                     	;# 
  4766  0893                     	;# 
  4767  0893                     	;# 
  4768  0894                     	;# 
  4769  0894                     	;# 
  4770  0894                     	;# 
  4771  0895                     	;# 
  4772  0895                     	;# 
  4773  0895                     	;# 
  4774  0896                     	;# 
  4775  0896                     	;# 
  4776  0896                     	;# 
  4777  089B                     	;# 
  4778  0911                     	;# 
  4779  0912                     	;# 
  4780  0913                     	;# 
  4781  0914                     	;# 
  4782  0915                     	;# 
  4783  0916                     	;# 
  4784  0918                     	;# 
  4785  0919                     	;# 
  4786  091A                     	;# 
  4787  091B                     	;# 
  4788  091C                     	;# 
  4789  091D                     	;# 
  4790  091E                     	;# 
  4791  091F                     	;# 
  4792  0E0F                     	;# 
  4793  0E10                     	;# 
  4794  0E11                     	;# 
  4795  0E12                     	;# 
  4796  0E13                     	;# 
  4797  0E14                     	;# 
  4798  0E15                     	;# 
  4799  0E16                     	;# 
  4800  0E17                     	;# 
  4801  0E18                     	;# 
  4802  0E19                     	;# 
  4803  0E1A                     	;# 
  4804  0E1B                     	;# 
  4805  0E1C                     	;# 
  4806  0E20                     	;# 
  4807  0E21                     	;# 
  4808  0E22                     	;# 
  4809  0E24                     	;# 
  4810  0E25                     	;# 
  4811  0E28                     	;# 
  4812  0E29                     	;# 
  4813  0E2A                     	;# 
  4814  0E2B                     	;# 
  4815  0E2C                     	;# 
  4816  0E2D                     	;# 
  4817  0E2E                     	;# 
  4818  0E2F                     	;# 
  4819  0E90                     	;# 
  4820  0E91                     	;# 
  4821  0E92                     	;# 
  4822  0E94                     	;# 
  4823  0E95                     	;# 
  4824  0E9C                     	;# 
  4825  0E9D                     	;# 
  4826  0E9E                     	;# 
  4827  0E9F                     	;# 
  4828  0EA0                     	;# 
  4829  0EA1                     	;# 
  4830  0EA2                     	;# 
  4831  0EA3                     	;# 
  4832  0EA4                     	;# 
  4833  0EA5                     	;# 
  4834  0EA6                     	;# 
  4835  0EA7                     	;# 
  4836  0F0F                     	;# 
  4837  0F10                     	;# 
  4838  0F11                     	;# 
  4839  0F12                     	;# 
  4840  0F13                     	;# 
  4841  0F14                     	;# 
  4842  0F15                     	;# 
  4843  0F16                     	;# 
  4844  0F17                     	;# 
  4845  0F18                     	;# 
  4846  0F19                     	;# 
  4847  0F1A                     	;# 
  4848  0F1B                     	;# 
  4849  0F1C                     	;# 
  4850  0F1D                     	;# 
  4851  0F1E                     	;# 
  4852  0F1F                     	;# 
  4853  0F20                     	;# 
  4854  0F21                     	;# 
  4855  0F22                     	;# 
  4856  0F23                     	;# 
  4857  0F24                     	;# 
  4858  0F25                     	;# 
  4859  0F26                     	;# 
  4860  0F27                     	;# 
  4861  0F28                     	;# 
  4862  0F29                     	;# 
  4863  0F2A                     	;# 
  4864  0F2B                     	;# 
  4865  0F2C                     	;# 
  4866  0F2D                     	;# 
  4867  0F2E                     	;# 
  4868  0F2F                     	;# 
  4869  0F30                     	;# 
  4870  0F31                     	;# 
  4871  0F32                     	;# 
  4872  0F33                     	;# 
  4873  0F34                     	;# 
  4874  0F35                     	;# 
  4875  0F36                     	;# 
  4876  0F37                     	;# 
  4877  0FE4                     	;# 
  4878  0FE5                     	;# 
  4879  0FE6                     	;# 
  4880  0FE7                     	;# 
  4881  0FE8                     	;# 
  4882  0FE9                     	;# 
  4883  0FEA                     	;# 
  4884  0FEB                     	;# 
  4885  0FED                     	;# 
  4886  0FEE                     	;# 
  4887  0FEF                     	;# 
  4888                           
  4889                           	psect	idataCOMMON
  4890  07FF                     __pidataCOMMON:	
  4891                           
  4892                           ;initializer for _LED_Color
  4893  07FF  3401               	retlw	1
  4894                           
  4895                           	psect	idataBANK0
  4896  0D56                     __pidataBANK0:	
  4897                           
  4898                           ;initializer for _ChannelNumberChar
  4899  0D56  3478               	retlw	120
  4900                           
  4901                           ;initializer for _SetLEDcolor
  4902  0D57  3452               	retlw	82
  4903                           
  4904                           ;initializer for _RxFrameType
  4905  0D58  3472               	retlw	114
  4906  000B                     _INTCONbits	set	11
  4907  0017                     _T0CON0bits	set	23
  4908  0010                     _PIR0bits	set	16
  4909  0015                     _TMR0L	set	21
  4910  0016                     _TMR0H	set	22
  4911  0018                     _T0CON1	set	24
  4912  0017                     _T0CON0	set	23
  4913  001F                     _T2CONbits	set	31
  4914  0011                     _PIR1bits	set	17
  4915  001D                     _TMR2	set	29
  4916  001E                     _PR2	set	30
  4917  001F                     _T2CON	set	31
  4918  005F                     _GIE	set	95
  4919  0090                     _PIE0bits	set	144
  4920  008C                     _TRISA	set	140
  4921  008E                     _TRISC	set	142
  4922  008D                     _TRISB	set	141
  4923  009D                     _ADCON0bits	set	157
  4924  009C                     _ADRESH	set	156
  4925  009B                     _ADRESL	set	155
  4926  009F                     _ADACT	set	159
  4927  009E                     _ADCON1	set	158
  4928  009D                     _ADCON0	set	157
  4929  010E                     _LATC	set	270
  4930  010C                     _LATA	set	268
  4931  010D                     _LATB	set	269
  4932  0872                     _LATC2	set	2162
  4933  0871                     _LATC1	set	2161
  4934  0870                     _LATC0	set	2160
  4935  0876                     _LATC6	set	2166
  4936  086E                     _LATB6	set	2158
  4937  019A                     _TX1REG	set	410
  4938  0199                     _RC1REG	set	409
  4939  019D                     _RC1STAbits	set	413
  4940  019C                     _SP1BRGH	set	412
  4941  019B                     _SP1BRGL	set	411
  4942  019E                     _TX1STA	set	414
  4943  019D                     _RC1STA	set	413
  4944  019F                     _BAUD1CON	set	415
  4945  018E                     _ANSELC	set	398
  4946  018D                     _ANSELB	set	397
  4947  018C                     _ANSELA	set	396
  4948  020E                     _WPUC	set	526
  4949  020D                     _WPUB	set	525
  4950  020C                     _WPUA	set	524
  4951  061F                     _PWMTMRSbits	set	1567
  4952  0617                     _PWM5DCL	set	1559
  4953  0618                     _PWM5DCH	set	1560
  4954  0619                     _PWM5CON	set	1561
  4955  0896                     _NVMCON2	set	2198
  4956  0893                     _NVMDATL	set	2195
  4957  0894                     _NVMDATH	set	2196
  4958  0895                     _NVMCON1bits	set	2197
  4959  0892                     _NVMADRH	set	2194
  4960  0891                     _NVMADRL	set	2193
  4961  091E                     _OSCTUNE	set	2334
  4962  091F                     _OSCFRQ	set	2335
  4963  091D                     _OSCEN	set	2333
  4964  091B                     _OSCCON3	set	2331
  4965  0919                     _OSCCON1	set	2329
  4966  0E24                     _RXPPSbits	set	3620
  4967  0E0F                     _PPSLOCKbits	set	3599
  4968  0E0F                     _PPSLOCK	set	3599
  4969  0E9D                     _RB5PPSbits	set	3741
  4970  0EA3                     _RC3PPSbits	set	3747
  4971                           
  4972                           ; #config settings
  4973  0000                     
  4974                           	psect	cinit
  4975  0018                     start_initialization:	
  4976  0018                     __initialization:	
  4977                           
  4978                           ; Initialize objects allocated to COMMON
  4979  0018  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  4980  001B  00FB               	movwf	__pdataCOMMON& (0+127)
  4981                           
  4982                           ; Initialize objects allocated to BANK0
  4983  001C  318D  2556  3180   	fcall	__pidataBANK0	;fetch initializer
  4984  001F  00E6               	movwf	__pdataBANK0& (0+127)
  4985  0020  318D  2557  3180   	fcall	__pidataBANK0+1	;fetch initializer
  4986  0023  00E7               	movwf	(__pdataBANK0+1)& (0+127)
  4987  0024  318D  2558  3180   	fcall	__pidataBANK0+2	;fetch initializer
  4988  0027  00E8               	movwf	(__pdataBANK0+2)& (0+127)
  4989                           
  4990                           ; Clear objects allocated to COMMON
  4991  0028  01FA               	clrf	__pbssCOMMON& (0+127)
  4992                           
  4993                           ; Clear objects allocated to BANK0
  4994  0029  3020               	movlw	low __pbssBANK0
  4995  002A  0084               	movwf	4
  4996  002B  3000               	movlw	high __pbssBANK0
  4997  002C  0085               	movwf	5
  4998  002D  3038               	movlw	56
  4999  002E  318D  256C  3180   	fcall	clear_ram0
  5000                           
  5001                           ; Clear objects allocated to BANK1
  5002  0031  30A0               	movlw	low __pbssBANK1
  5003  0032  0084               	movwf	4
  5004  0033  3000               	movlw	high __pbssBANK1
  5005  0034  0085               	movwf	5
  5006  0035  302A               	movlw	42
  5007  0036  318D  256C         	fcall	clear_ram0
  5008  0038                     end_of_initialization:	
  5009                           ;End of C runtime variable initialization code
  5010                           
  5011  0038                     __end_of__initialization:	
  5012  0038  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5013  0039  0020               	movlb	0
  5014  003A  3186  2E72         	ljmp	_main	;jump to C main() function
  5015                           
  5016                           	psect	bssCOMMON
  5017  007A                     __pbssCOMMON:	
  5018  007A                     _Led_ON:	
  5019  007A                     	ds	1
  5020                           
  5021                           	psect	dataCOMMON
  5022  007B                     __pdataCOMMON:	
  5023  007B                     _LED_Color:	
  5024  007B                     	ds	1
  5025                           
  5026                           	psect	bssBANK0
  5027  0020                     __pbssBANK0:	
  5028  0020                     _LedON_Duration_msec:	
  5029  0020                     	ds	2
  5030  0022                     _Blick_tickPoint:	
  5031  0022                     	ds	2
  5032  0024                     _Blick_tickPointMsec:	
  5033  0024                     	ds	2
  5034  0026                     _LED_msec_Cnt:	
  5035  0026                     	ds	2
  5036  0028                     _AnalogSenseRaw:	
  5037  0028                     	ds	2
  5038  002A                     _eepromReadAddr:	
  5039  002A                     	ds	2
  5040  002C                     _eepromWriteAddr:	
  5041  002C                     	ds	2
  5042  002E                     _Buzzer_Duration_1msec:	
  5043  002E                     	ds	2
  5044  0030                     _Bbeep_tickPoint:	
  5045  0030                     	ds	2
  5046  0032                     _Bbeep_tickPointMsec:	
  5047  0032                     	ds	2
  5048  0034                     _Buzzer_1msec_Cnt:	
  5049  0034                     	ds	2
  5050  0036                     _ToolTemp_adc:	
  5051  0036                     	ds	2
  5052  0038                     _DelayMsecCount:	
  5053  0038                     	ds	2
  5054  003A                     _Msec10_cnt:	
  5055  003A                     	ds	2
  5056  003C                     _Msec_cnt:	
  5057  003C                     	ds	2
  5058  003E                     _LED_Sec_Cnt:	
  5059  003E                     	ds	1
  5060  003F                     _LedON_Duration_sec:	
  5061  003F                     	ds	1
  5062  0040                     _Fan_ON:	
  5063  0040                     	ds	1
  5064  0041                     _txPacketlength:	
  5065  0041                     	ds	1
  5066  0042                     _lowByteChar:	
  5067  0042                     	ds	1
  5068  0043                     _highByteChar:	
  5069  0043                     	ds	1
  5070  0044                     _RXChecksum:	
  5071  0044                     	ds	1
  5072  0045                     _ChannelNumber:	
  5073  0045                     	ds	1
  5074  0046                     _CommandError:	
  5075  0046                     	ds	1
  5076  0047                     _eepromReadLen:	
  5077  0047                     	ds	1
  5078  0048                     _eepromWriteLen:	
  5079  0048                     	ds	1
  5080  0049                     _SetFANOnDurationSec:	
  5081  0049                     	ds	1
  5082  004A                     _SetBuzzNumBeep:	
  5083  004A                     	ds	1
  5084  004B                     _SetBuzzDurationSec:	
  5085  004B                     	ds	1
  5086  004C                     _SetLedONNumBlink:	
  5087  004C                     	ds	1
  5088  004D                     _SetLedONDurationSec:	
  5089  004D                     	ds	1
  5090  004E                     _RxFrameDataLenCnt:	
  5091  004E                     	ds	1
  5092  004F                     _RxFrameDataLen:	
  5093  004F                     	ds	1
  5094  0050                     _RxFrameDecodeState:	
  5095  0050                     	ds	1
  5096  0051                     _Buzzer_ON:	
  5097  0051                     	ds	1
  5098  0052                     _txRS485flag:	
  5099  0052                     	ds	1
  5100  0053                     _i:	
  5101  0053                     	ds	1
  5102  0054                     _AnalogSenseRawByte:	
  5103  0054                     	ds	2
  5104  0056                     _Checksum:	
  5105  0056                     	ds	1
  5106  0057                     _DigitalIN:	
  5107  0057                     	ds	1
  5108                           
  5109                           	psect	dataBANK0
  5110  0066                     __pdataBANK0:	
  5111  0066                     _ChannelNumberChar:	
  5112  0066                     	ds	1
  5113  0067                     _SetLEDcolor:	
  5114  0067                     	ds	1
  5115  0068                     _RxFrameType:	
  5116  0068                     	ds	1
  5117                           
  5118                           	psect	bssBANK1
  5119  00A0                     __pbssBANK1:	
  5120  00A0                     _eepromWriteData:	
  5121  00A0                     	ds	16
  5122  00B0                     _byteIN:	
  5123  00B0                     	ds	10
  5124  00BA                     _eepromReadData:	
  5125  00BA                     	ds	16
  5126                           
  5127                           	psect	clrtext
  5128  0D6C                     clear_ram0:	
  5129                           ;	Called with FSR0 containing the base address, and
  5130                           ;	WREG with the size to clear
  5131                           
  5132  0D6C  0064               	clrwdt	;clear the watchdog before getting into this loop
  5133  0D6D                     clrloop0:	
  5134  0D6D  0180               	clrf	0	;clear RAM location pointed to by FSR
  5135  0D6E  3101               	addfsr 0,1
  5136  0D6F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5137  0D70  2D6D               	goto	clrloop0	;have we reached the end yet?
  5138  0D71  3400               	retlw	0	;all done for this memory range, return
  5139                           
  5140                           	psect	cstackCOMMON
  5141  0070                     __pcstackCOMMON:	
  5142  0070                     ?_TMR2_StartTimer:	
  5143  0070                     ?_PIN_MANAGER_Initialize:	
  5144                           ; 1 bytes @ 0x0
  5145                           
  5146  0070                     ?_OSCILLATOR_Initialize:	
  5147                           ; 1 bytes @ 0x0
  5148                           
  5149  0070                     ?_TMR0_Initialize:	
  5150                           ; 1 bytes @ 0x0
  5151                           
  5152  0070                     ?_EUSART_Initialize:	
  5153                           ; 1 bytes @ 0x0
  5154                           
  5155  0070                     ?_TMR0_StartTimer:	
  5156                           ; 1 bytes @ 0x0
  5157                           
  5158  0070                     ?_TMR0_CallBack:	
  5159                           ; 1 bytes @ 0x0
  5160                           
  5161  0070                     ?_One_msec_task:	
  5162                           ; 1 bytes @ 0x0
  5163                           
  5164  0070                     ?_LedONStatusBusy:	
  5165                           ; 1 bytes @ 0x0
  5166                           
  5167  0070                     ?_FanStartConfig:	
  5168                           ; 1 bytes @ 0x0
  5169                           
  5170  0070                     ?_ProtocolManager:	
  5171                           ; 1 bytes @ 0x0
  5172                           
  5173  0070                     ?_Buzzer_Control_msec:	
  5174                           ; 1 bytes @ 0x0
  5175                           
  5176  0070                     ?_LedON_Control_msec:	
  5177                           ; 1 bytes @ 0x0
  5178                           
  5179  0070                     ??_LedON_Control_msec:	
  5180                           ; 1 bytes @ 0x0
  5181                           
  5182  0070                     ?_One_sec_task:	
  5183                           ; 1 bytes @ 0x0
  5184                           
  5185  0070                     ?_Fan_Control_Sec:	
  5186                           ; 1 bytes @ 0x0
  5187                           
  5188  0070                     ??_Fan_Control_Sec:	
  5189                           ; 1 bytes @ 0x0
  5190                           
  5191  0070                     ?_PackageTxResponseNACK:	
  5192                           ; 1 bytes @ 0x0
  5193                           
  5194  0070                     ?_PackageTxResponseACK:	
  5195                           ; 1 bytes @ 0x0
  5196                           
  5197  0070                     ?_PWM5_Initialize:	
  5198                           ; 1 bytes @ 0x0
  5199                           
  5200  0070                     ?_TMR2_Initialize:	
  5201                           ; 1 bytes @ 0x0
  5202                           
  5203  0070                     ?_TMR2_ToggleTimer:	
  5204                           ; 1 bytes @ 0x0
  5205                           
  5206  0070                     ??_TMR2_ToggleTimer:	
  5207                           ; 1 bytes @ 0x0
  5208                           
  5209  0070                     ?_TMR2_StopTimer:	
  5210                           ; 1 bytes @ 0x0
  5211                           
  5212  0070                     ??_TMR2_StopTimer:	
  5213                           ; 1 bytes @ 0x0
  5214                           
  5215  0070                     ?_TMR2_WriteTimer:	
  5216                           ; 1 bytes @ 0x0
  5217                           
  5218  0070                     ?_ADC_Initialize:	
  5219                           ; 1 bytes @ 0x0
  5220                           
  5221  0070                     ?_SYSTEM_Initialize:	
  5222                           ; 1 bytes @ 0x0
  5223                           
  5224  0070                     ?_TMR0_ISR:	
  5225                           ; 1 bytes @ 0x0
  5226                           
  5227  0070                     ?_INTERRUPT_InterruptManager:	
  5228                           ; 1 bytes @ 0x0
  5229                           
  5230  0070                     ?_EUSART_Read:	
  5231                           ; 1 bytes @ 0x0
  5232                           
  5233  0070                     ?_EUSART_Write:	
  5234                           ; 1 bytes @ 0x0
  5235                           
  5236  0070                     ?_EUSART_RX_Disable:	
  5237                           ; 1 bytes @ 0x0
  5238                           
  5239  0070                     ?_EUSART_RX_Enable:	
  5240                           ; 1 bytes @ 0x0
  5241                           
  5242  0070                     ?_EUSART_TX_Completed:	
  5243                           ; 1 bytes @ 0x0
  5244                           
  5245  0070                     ?_main:	
  5246                           ; 1 bytes @ 0x0
  5247                           
  5248  0070                     ?_valtoasciichar:	
  5249                           ; 1 bytes @ 0x0
  5250                           
  5251  0070                     ?_chartovalue:	
  5252                           ; 1 bytes @ 0x0
  5253                           
  5254  0070                     ?_valuetocharHighNibble:	
  5255                           ; 1 bytes @ 0x0
  5256                           
  5257  0070                     ?_valuetocharLowNibble:	
  5258                           ; 1 bytes @ 0x0
  5259                           
  5260  0070                     ?i1_TMR2_WriteTimer:	
  5261                           ; 1 bytes @ 0x0
  5262                           
  5263  0070                     ??i1_TMR2_WriteTimer:	
  5264                           ; 1 bytes @ 0x0
  5265                           
  5266  0070                     i1TMR2_WriteTimer@timerVal:	
  5267                           ; 1 bytes @ 0x0
  5268                           
  5269                           
  5270                           ; 1 bytes @ 0x0
  5271  0070                     	ds	1
  5272  0071                     ??_TMR0_CallBack:	
  5273  0071                     ??_One_msec_task:	
  5274                           ; 1 bytes @ 0x1
  5275                           
  5276  0071                     ??_Buzzer_Control_msec:	
  5277                           ; 1 bytes @ 0x1
  5278                           
  5279  0071                     ??_One_sec_task:	
  5280                           ; 1 bytes @ 0x1
  5281                           
  5282  0071                     ??_TMR0_ISR:	
  5283                           ; 1 bytes @ 0x1
  5284                           
  5285  0071                     ??_INTERRUPT_InterruptManager:	
  5286                           ; 1 bytes @ 0x1
  5287                           
  5288                           
  5289                           ; 1 bytes @ 0x1
  5290  0071                     	ds	1
  5291  0072                     ??_TMR2_StartTimer:	
  5292  0072                     ??_PIN_MANAGER_Initialize:	
  5293                           ; 1 bytes @ 0x2
  5294                           
  5295  0072                     ??_OSCILLATOR_Initialize:	
  5296                           ; 1 bytes @ 0x2
  5297                           
  5298  0072                     ??_TMR0_Initialize:	
  5299                           ; 1 bytes @ 0x2
  5300                           
  5301  0072                     ??_EUSART_Initialize:	
  5302                           ; 1 bytes @ 0x2
  5303                           
  5304  0072                     ??_TMR0_StartTimer:	
  5305                           ; 1 bytes @ 0x2
  5306                           
  5307  0072                     ??_LedONStatusBusy:	
  5308                           ; 1 bytes @ 0x2
  5309                           
  5310  0072                     ??_FanStartConfig:	
  5311                           ; 1 bytes @ 0x2
  5312                           
  5313  0072                     ??_PWM5_Initialize:	
  5314                           ; 1 bytes @ 0x2
  5315                           
  5316  0072                     ??_TMR2_Initialize:	
  5317                           ; 1 bytes @ 0x2
  5318                           
  5319  0072                     ??_TMR2_WriteTimer:	
  5320                           ; 1 bytes @ 0x2
  5321                           
  5322  0072                     ??_ADC_Initialize:	
  5323                           ; 1 bytes @ 0x2
  5324                           
  5325  0072                     ?_DATAEE_WriteByte:	
  5326                           ; 1 bytes @ 0x2
  5327                           
  5328  0072                     ?_DATAEE_ReadByte:	
  5329                           ; 1 bytes @ 0x2
  5330                           
  5331  0072                     ??_EUSART_Read:	
  5332                           ; 1 bytes @ 0x2
  5333                           
  5334  0072                     ??_EUSART_Write:	
  5335                           ; 1 bytes @ 0x2
  5336                           
  5337  0072                     ??_EUSART_RX_Disable:	
  5338                           ; 1 bytes @ 0x2
  5339                           
  5340  0072                     ??_EUSART_RX_Enable:	
  5341                           ; 1 bytes @ 0x2
  5342                           
  5343  0072                     ??_EUSART_TX_Completed:	
  5344                           ; 1 bytes @ 0x2
  5345                           
  5346  0072                     ??_valtoasciichar:	
  5347                           ; 1 bytes @ 0x2
  5348                           
  5349  0072                     ??_chartovalue:	
  5350                           ; 1 bytes @ 0x2
  5351                           
  5352  0072                     ?_ADC_GetConversion:	
  5353                           ; 1 bytes @ 0x2
  5354                           
  5355  0072                     ?___wmul:	
  5356                           ; 2 bytes @ 0x2
  5357                           
  5358  0072                     ?___lwdiv:	
  5359                           ; 2 bytes @ 0x2
  5360                           
  5361  0072                     TMR2_WriteTimer@timerVal:	
  5362                           ; 2 bytes @ 0x2
  5363                           
  5364  0072                     PIN_MANAGER_Initialize@state:	
  5365                           ; 1 bytes @ 0x2
  5366                           
  5367  0072                     EUSART_Write@txData:	
  5368                           ; 1 bytes @ 0x2
  5369                           
  5370  0072                     DATAEE_WriteByte@bAdd:	
  5371                           ; 1 bytes @ 0x2
  5372                           
  5373  0072                     DATAEE_ReadByte@bAdd:	
  5374                           ; 2 bytes @ 0x2
  5375                           
  5376  0072                     ___wmul@multiplier:	
  5377                           ; 2 bytes @ 0x2
  5378                           
  5379  0072                     ___lwdiv@divisor:	
  5380                           ; 2 bytes @ 0x2
  5381                           
  5382                           
  5383                           ; 2 bytes @ 0x2
  5384  0072                     	ds	1
  5385  0073                     ??_SYSTEM_Initialize:	
  5386  0073                     valtoasciichar@hexvalue1:	
  5387                           ; 1 bytes @ 0x3
  5388                           
  5389  0073                     chartovalue@charNibble:	
  5390                           ; 1 bytes @ 0x3
  5391                           
  5392  0073                     FanStartConfig@FanONDurationSec:	
  5393                           ; 1 bytes @ 0x3
  5394                           
  5395                           
  5396                           ; 1 bytes @ 0x3
  5397  0073                     	ds	1
  5398  0074                     ??_ADC_GetConversion:	
  5399  0074                     ??_DATAEE_ReadByte:	
  5400                           ; 1 bytes @ 0x4
  5401                           
  5402  0074                     DATAEE_WriteByte@bData:	
  5403                           ; 1 bytes @ 0x4
  5404                           
  5405  0074                     valtoasciichar@hexval:	
  5406                           ; 1 bytes @ 0x4
  5407                           
  5408  0074                     chartovalue@hexval:	
  5409                           ; 1 bytes @ 0x4
  5410                           
  5411  0074                     ___wmul@multiplicand:	
  5412                           ; 1 bytes @ 0x4
  5413                           
  5414  0074                     ___lwdiv@dividend:	
  5415                           ; 2 bytes @ 0x4
  5416                           
  5417                           
  5418                           ; 2 bytes @ 0x4
  5419  0074                     	ds	1
  5420  0075                     ?_char2bytetovalue:	
  5421  0075                     ?_char1bytetovalue:	
  5422                           ; 1 bytes @ 0x5
  5423                           
  5424  0075                     ??_DATAEE_WriteByte:	
  5425                           ; 1 bytes @ 0x5
  5426                           
  5427  0075                     ??_valuetocharHighNibble:	
  5428                           ; 1 bytes @ 0x5
  5429                           
  5430  0075                     ??_valuetocharLowNibble:	
  5431                           ; 1 bytes @ 0x5
  5432                           
  5433  0075                     ADC_GetConversion@channel:	
  5434                           ; 1 bytes @ 0x5
  5435                           
  5436  0075                     DATAEE_WriteByte@GIEBitValue:	
  5437                           ; 1 bytes @ 0x5
  5438                           
  5439  0075                     char2bytetovalue@LowBchar:	
  5440                           ; 1 bytes @ 0x5
  5441                           
  5442  0075                     char1bytetovalue@cksum:	
  5443                           ; 1 bytes @ 0x5
  5444                           
  5445                           
  5446                           ; 1 bytes @ 0x5
  5447  0075                     	ds	1
  5448  0076                     ??_char1bytetovalue:	
  5449  0076                     ??___wmul:	
  5450                           ; 1 bytes @ 0x6
  5451                           
  5452  0076                     ??___lwdiv:	
  5453                           ; 1 bytes @ 0x6
  5454                           
  5455  0076                     char2bytetovalue@cksum:	
  5456                           ; 1 bytes @ 0x6
  5457                           
  5458  0076                     valuetocharLowNibble@hexvalue:	
  5459                           ; 1 bytes @ 0x6
  5460                           
  5461  0076                     ___wmul@product:	
  5462                           ; 1 bytes @ 0x6
  5463                           
  5464                           
  5465                           ; 2 bytes @ 0x6
  5466  0076                     	ds	1
  5467  0077                     ??_char2bytetovalue:	
  5468  0077                     char1bytetovalue@valuehex:	
  5469                           ; 1 bytes @ 0x7
  5470                           
  5471  0077                     valuetocharHighNibble@hexvalue:	
  5472                           ; 1 bytes @ 0x7
  5473                           
  5474  0077                     valuetocharLowNibble@hexval:	
  5475                           ; 1 bytes @ 0x7
  5476                           
  5477  0077                     ___lwdiv@counter:	
  5478                           ; 1 bytes @ 0x7
  5479                           
  5480                           
  5481                           ; 1 bytes @ 0x7
  5482  0077                     	ds	1
  5483  0078                     char1bytetovalue@LowBChar:	
  5484  0078                     valuetocharHighNibble@hexval:	
  5485                           ; 1 bytes @ 0x8
  5486                           
  5487  0078                     ___lwdiv@quotient:	
  5488                           ; 1 bytes @ 0x8
  5489                           
  5490                           
  5491                           ; 2 bytes @ 0x8
  5492  0078                     	ds	1
  5493  0079                     ??_PackageTxResponseNACK:	
  5494  0079                     ??_PackageTxResponseACK:	
  5495                           ; 1 bytes @ 0x9
  5496                           
  5497                           
  5498                           ; 1 bytes @ 0x9
  5499  0079                     	ds	1
  5500                           
  5501                           	psect	cstackBANK0
  5502  0058                     __pcstackBANK0:	
  5503  0058                     ?_BuzzerStartConfig:	
  5504  0058                     ?_LedONStartConfig:	
  5505                           ; 1 bytes @ 0x0
  5506                           
  5507  0058                     BuzzerStartConfig@BuzzNumBeep:	
  5508                           ; 1 bytes @ 0x0
  5509                           
  5510  0058                     char2bytetovalue@valuehex:	
  5511                           ; 1 bytes @ 0x0
  5512                           
  5513  0058                     PackageTxResponseACK@frameType:	
  5514                           ; 1 bytes @ 0x0
  5515                           
  5516  0058                     PackageTxResponseNACK@frameType:	
  5517                           ; 1 bytes @ 0x0
  5518                           
  5519  0058                     LedONStartConfig@LedONDurationSec:	
  5520                           ; 1 bytes @ 0x0
  5521                           
  5522                           
  5523                           ; 1 bytes @ 0x0
  5524  0058                     	ds	1
  5525  0059                     ??_BuzzerStartConfig:	
  5526  0059                     ?_PackageTxResponseData:	
  5527                           ; 1 bytes @ 0x1
  5528                           
  5529  0059                     char2bytetovalue@highBchar:	
  5530                           ; 1 bytes @ 0x1
  5531                           
  5532  0059                     PackageTxResponseData@data:	
  5533                           ; 1 bytes @ 0x1
  5534                           
  5535  0059                     LedONStartConfig@LedONNumBlink:	
  5536                           ; 1 bytes @ 0x1
  5537                           
  5538                           
  5539                           ; 1 bytes @ 0x1
  5540  0059                     	ds	1
  5541  005A                     ??_LedONStartConfig:	
  5542  005A                     PackageTxResponseData@dataLen:	
  5543                           ; 1 bytes @ 0x2
  5544                           
  5545                           
  5546                           ; 1 bytes @ 0x2
  5547  005A                     	ds	1
  5548  005B                     ??_PackageTxResponseData:	
  5549  005B                     BuzzerStartConfig@BuzzDurationSec:	
  5550                           ; 1 bytes @ 0x3
  5551                           
  5552                           
  5553                           ; 1 bytes @ 0x3
  5554  005B                     	ds	1
  5555  005C                     LedONStartConfig@LEDcolor:	
  5556                           
  5557                           ; 1 bytes @ 0x4
  5558  005C                     	ds	1
  5559  005D                     PackageTxResponseData@i:	
  5560                           
  5561                           ; 1 bytes @ 0x5
  5562  005D                     	ds	1
  5563  005E                     PackageTxResponseData@frameType:	
  5564                           
  5565                           ; 1 bytes @ 0x6
  5566  005E                     	ds	1
  5567  005F                     ??_ProtocolManager:	
  5568                           
  5569                           ; 1 bytes @ 0x7
  5570  005F                     	ds	4
  5571  0063                     ProtocolManager@k:	
  5572                           
  5573                           ; 1 bytes @ 0xB
  5574  0063                     	ds	1
  5575  0064                     ??_main:	
  5576                           
  5577                           ; 1 bytes @ 0xC
  5578  0064                     	ds	2
  5579                           
  5580                           	psect	maintext
  5581  0672                     __pmaintext:	
  5582 ;;
  5583 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5584 ;;
  5585 ;; *************** function _main *****************
  5586 ;; Defined at:
  5587 ;;		line 68 in file "main.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;		None
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      void 
  5594 ;; Registers used:
  5595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : B1F/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5601 ;;      Params:         0       0       0       0       0       0       0       0
  5602 ;;      Locals:         0       0       0       0       0       0       0       0
  5603 ;;      Temps:          0       2       0       0       0       0       0       0
  5604 ;;      Totals:         0       2       0       0       0       0       0       0
  5605 ;;Total ram usage:        2 bytes
  5606 ;; Hardware stack levels required when called:   11
  5607 ;; This function calls:
  5608 ;;		_BuzzerStartConfig
  5609 ;;		_FanStartConfig
  5610 ;;		_LedONStartConfig
  5611 ;;		_LedONStatusBusy
  5612 ;;		_ProtocolManager
  5613 ;;		_SYSTEM_Initialize
  5614 ;; This function is called by:
  5615 ;;		Startup code after reset
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           
  5620                           ;psect for function _main
  5621  0672                     _main:	
  5622                           
  5623                           ;main.c: 71: SYSTEM_Initialize();
  5624                           
  5625                           ;incstack = 0
  5626                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5627  0672  3187  27EA  3186   	fcall	_SYSTEM_Initialize
  5628                           
  5629                           ;main.c: 78: (INTCONbits.GIE = 1);
  5630  0675  178B               	bsf	11,7	;volatile
  5631                           
  5632                           ;main.c: 81: (INTCONbits.PEIE = 1);
  5633  0676  170B               	bsf	11,6	;volatile
  5634                           
  5635                           ;main.c: 88: BuzzerStartConfig(1,10);
  5636  0677  300A               	movlw	10
  5637  0678  0020               	movlb	0	; select bank0
  5638  0679  00E4               	movwf	??_main
  5639  067A  0864               	movf	??_main,w
  5640  067B  00D8               	movwf	BuzzerStartConfig@BuzzNumBeep
  5641  067C  3001               	movlw	1
  5642  067D  3187  2798  3186   	fcall	_BuzzerStartConfig
  5643                           
  5644                           ;main.c: 90: LedONStartConfig(0, 4, 10);
  5645  0680  3004               	movlw	4
  5646  0681  0020               	movlb	0	; select bank0
  5647  0682  00E4               	movwf	??_main
  5648  0683  0864               	movf	??_main,w
  5649  0684  00D8               	movwf	LedONStartConfig@LedONDurationSec
  5650  0685  300A               	movlw	10
  5651  0686  00E5               	movwf	??_main+1
  5652  0687  0865               	movf	??_main+1,w
  5653  0688  00D9               	movwf	LedONStartConfig@LedONNumBlink
  5654  0689  3000               	movlw	0
  5655  068A  3186  26D9  3186   	fcall	_LedONStartConfig
  5656  068D                     l4414:	
  5657                           ;main.c: 91: while(LedONStatusBusy());
  5658                           
  5659  068D  3180  2002  3186   	fcall	_LedONStatusBusy
  5660  0690  3A00               	xorlw	0
  5661  0691  1D03               	skipz
  5662  0692  2E8D               	goto	l4414
  5663                           
  5664                           ;main.c: 94: FanStartConfig(2);
  5665  0693  3002               	movlw	2
  5666  0694  318E  2640  3186   	fcall	_FanStartConfig
  5667                           
  5668                           ;main.c: 95: BuzzerStartConfig(4,10);
  5669  0697  300A               	movlw	10
  5670  0698  0020               	movlb	0	; select bank0
  5671  0699  00E4               	movwf	??_main
  5672  069A  0864               	movf	??_main,w
  5673  069B  00D8               	movwf	BuzzerStartConfig@BuzzNumBeep
  5674  069C  3004               	movlw	4
  5675  069D  3187  2798  3186   	fcall	_BuzzerStartConfig
  5676                           
  5677                           ;main.c: 96: LedONStartConfig(1, 4, 10);
  5678  06A0  3004               	movlw	4
  5679  06A1  0020               	movlb	0	; select bank0
  5680  06A2  00E4               	movwf	??_main
  5681  06A3  0864               	movf	??_main,w
  5682  06A4  00D8               	movwf	LedONStartConfig@LedONDurationSec
  5683  06A5  300A               	movlw	10
  5684  06A6  00E5               	movwf	??_main+1
  5685  06A7  0865               	movf	??_main+1,w
  5686  06A8  00D9               	movwf	LedONStartConfig@LedONNumBlink
  5687  06A9  3001               	movlw	1
  5688  06AA  3186  26D9  3186   	fcall	_LedONStartConfig
  5689  06AD                     l4420:	
  5690                           ;main.c: 97: while(LedONStatusBusy());
  5691                           
  5692  06AD  3180  2002  3186   	fcall	_LedONStatusBusy
  5693  06B0  3A00               	xorlw	0
  5694  06B1  1D03               	skipz
  5695  06B2  2EAD               	goto	l4420
  5696                           
  5697                           ;main.c: 99: BuzzerStartConfig(1,10);
  5698  06B3  300A               	movlw	10
  5699  06B4  0020               	movlb	0	; select bank0
  5700  06B5  00E4               	movwf	??_main
  5701  06B6  0864               	movf	??_main,w
  5702  06B7  00D8               	movwf	BuzzerStartConfig@BuzzNumBeep
  5703  06B8  3001               	movlw	1
  5704  06B9  3187  2798  3186   	fcall	_BuzzerStartConfig
  5705                           
  5706                           ;main.c: 100: LedONStartConfig(2, 4, 10);
  5707  06BC  3004               	movlw	4
  5708  06BD  0020               	movlb	0	; select bank0
  5709  06BE  00E4               	movwf	??_main
  5710  06BF  0864               	movf	??_main,w
  5711  06C0  00D8               	movwf	LedONStartConfig@LedONDurationSec
  5712  06C1  300A               	movlw	10
  5713  06C2  00E5               	movwf	??_main+1
  5714  06C3  0865               	movf	??_main+1,w
  5715  06C4  00D9               	movwf	LedONStartConfig@LedONNumBlink
  5716  06C5  3002               	movlw	2
  5717  06C6  3186  26D9  3186   	fcall	_LedONStartConfig
  5718  06C9                     l4426:	
  5719                           ;main.c: 101: while(LedONStatusBusy());
  5720                           
  5721  06C9  3180  2002  3186   	fcall	_LedONStatusBusy
  5722  06CC  3A00               	xorlw	0
  5723  06CD  1D03               	skipz
  5724  06CE  2EC9               	goto	l4426
  5725                           
  5726                           ;main.c: 103: FanStartConfig(2);
  5727  06CF  3002               	movlw	2
  5728  06D0  318E  2640  3186   	fcall	_FanStartConfig
  5729                           
  5730                           ;main.c: 105: do { LATB6 = 0; } while(0);
  5731  06D3  0022               	movlb	2	; select bank2
  5732  06D4  130D               	bcf	13,6	;volatile
  5733  06D5                     l4432:	
  5734                           ;main.c: 107: while(1)
  5735                           
  5736                           
  5737                           ;main.c: 108: {
  5738                           ;main.c: 109: ProtocolManager();
  5739  06D5  3180  203C  3186   	fcall	_ProtocolManager
  5740  06D8  2ED5               	goto	l4432
  5741  06D9                     __end_of_main:	
  5742                           
  5743                           	psect	text1
  5744  07EA                     __ptext1:	
  5745 ;; *************** function _SYSTEM_Initialize *****************
  5746 ;; Defined at:
  5747 ;;		line 77 in file "mcc_generated_files/mcc.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;		None
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;		None
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0, pclath, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5761 ;;      Params:         0       0       0       0       0       0       0       0
  5762 ;;      Locals:         0       0       0       0       0       0       0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0
  5764 ;;      Totals:         0       0       0       0       0       0       0       0
  5765 ;;Total ram usage:        0 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    8
  5768 ;; This function calls:
  5769 ;;		_ADC_Initialize
  5770 ;;		_EUSART_Initialize
  5771 ;;		_OSCILLATOR_Initialize
  5772 ;;		_PIN_MANAGER_Initialize
  5773 ;;		_PWM5_Initialize
  5774 ;;		_TMR0_Initialize
  5775 ;;		_TMR2_Initialize
  5776 ;; This function is called by:
  5777 ;;		_main
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           
  5782                           ;psect for function _SYSTEM_Initialize
  5783  07EA                     _SYSTEM_Initialize:	
  5784                           
  5785                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  5786                           
  5787                           ;incstack = 0
  5788                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5789  07EA  318F  2776  3187   	fcall	_PIN_MANAGER_Initialize
  5790                           
  5791                           ;mcc.c: 80: OSCILLATOR_Initialize();
  5792  07ED  318D  2583  3187   	fcall	_OSCILLATOR_Initialize
  5793                           
  5794                           ;mcc.c: 81: ADC_Initialize();
  5795  07F0  318D  257A  3187   	fcall	_ADC_Initialize
  5796                           
  5797                           ;mcc.c: 82: PWM5_Initialize();
  5798  07F3  318D  2596  3187   	fcall	_PWM5_Initialize
  5799                           
  5800                           ;mcc.c: 83: TMR2_Initialize();
  5801  07F6  318D  25A0  3187   	fcall	_TMR2_Initialize
  5802                           
  5803                           ;mcc.c: 84: TMR0_Initialize();
  5804  07F9  318D  25C1  3187   	fcall	_TMR0_Initialize
  5805                           
  5806                           ;mcc.c: 85: EUSART_Initialize();
  5807  07FC  318D  25AA         	fcall	_EUSART_Initialize
  5808  07FE  0008               	return
  5809  07FF                     __end_of_SYSTEM_Initialize:	
  5810                           
  5811                           	psect	text2
  5812  0DA0                     __ptext2:	
  5813 ;; *************** function _TMR2_Initialize *****************
  5814 ;; Defined at:
  5815 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;		None
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;		None
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  1    wreg      void 
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0, pclath, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5829 ;;      Params:         0       0       0       0       0       0       0       0
  5830 ;;      Locals:         0       0       0       0       0       0       0       0
  5831 ;;      Temps:          0       0       0       0       0       0       0       0
  5832 ;;      Totals:         0       0       0       0       0       0       0       0
  5833 ;;Total ram usage:        0 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    7
  5836 ;; This function calls:
  5837 ;;		_TMR2_StartTimer
  5838 ;; This function is called by:
  5839 ;;		_SYSTEM_Initialize
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           
  5844                           ;psect for function _TMR2_Initialize
  5845  0DA0                     _TMR2_Initialize:	
  5846                           
  5847                           ;tmr2.c: 63: T2CON = 0x02;
  5848                           
  5849                           ;incstack = 0
  5850                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5851  0DA0  3002               	movlw	2
  5852  0DA1  0020               	movlb	0	; select bank0
  5853  0DA2  009F               	movwf	31	;volatile
  5854                           
  5855                           ;tmr2.c: 66: PR2 = 0x3F;
  5856  0DA3  303F               	movlw	63
  5857  0DA4  009E               	movwf	30	;volatile
  5858                           
  5859                           ;tmr2.c: 69: TMR2 = 0x00;
  5860  0DA5  019D               	clrf	29	;volatile
  5861                           
  5862                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  5863  0DA6  1091               	bcf	17,1	;volatile
  5864                           
  5865                           ;tmr2.c: 75: TMR2_StartTimer();
  5866  0DA7  318D  254A         	fcall	_TMR2_StartTimer
  5867  0DA9  0008               	return
  5868  0DAA                     __end_of_TMR2_Initialize:	
  5869                           
  5870                           	psect	text3
  5871  0DC1                     __ptext3:	
  5872 ;; *************** function _TMR0_Initialize *****************
  5873 ;; Defined at:
  5874 ;;		line 61 in file "mcc_generated_files/tmr0.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;		None
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;		None
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      void 
  5881 ;; Registers used:
  5882 ;;		wreg, status,2, status,0, pclath, cstack
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5888 ;;      Params:         0       0       0       0       0       0       0       0
  5889 ;;      Locals:         0       0       0       0       0       0       0       0
  5890 ;;      Temps:          0       0       0       0       0       0       0       0
  5891 ;;      Totals:         0       0       0       0       0       0       0       0
  5892 ;;Total ram usage:        0 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:    7
  5895 ;; This function calls:
  5896 ;;		_TMR0_StartTimer
  5897 ;; This function is called by:
  5898 ;;		_SYSTEM_Initialize
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           
  5903                           ;psect for function _TMR0_Initialize
  5904  0DC1                     _TMR0_Initialize:	
  5905                           
  5906                           ;tmr0.c: 66: T0CON0 = 0x00;
  5907                           
  5908                           ;incstack = 0
  5909                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5910  0DC1  0020               	movlb	0	; select bank0
  5911  0DC2  0197               	clrf	23	;volatile
  5912                           
  5913                           ;tmr0.c: 69: T0CON1 = 0x68;
  5914  0DC3  3068               	movlw	104
  5915  0DC4  0098               	movwf	24	;volatile
  5916                           
  5917                           ;tmr0.c: 72: TMR0H = 0x3E;
  5918  0DC5  303E               	movlw	62
  5919  0DC6  0096               	movwf	22	;volatile
  5920                           
  5921                           ;tmr0.c: 75: TMR0L = 0x00;
  5922  0DC7  0195               	clrf	21	;volatile
  5923                           
  5924                           ;tmr0.c: 78: PIR0bits.TMR0IF = 0;
  5925  0DC8  1290               	bcf	16,5	;volatile
  5926                           
  5927                           ;tmr0.c: 81: PIE0bits.TMR0IE = 1;
  5928  0DC9  0021               	movlb	1	; select bank1
  5929  0DCA  1690               	bsf	16,5	;volatile
  5930                           
  5931                           ;tmr0.c: 84: TMR0_StartTimer();
  5932  0DCB  318D  2553         	fcall	_TMR0_StartTimer
  5933  0DCD  0008               	return
  5934  0DCE                     __end_of_TMR0_Initialize:	
  5935                           
  5936                           	psect	text4
  5937  0D53                     __ptext4:	
  5938 ;; *************** function _TMR0_StartTimer *****************
  5939 ;; Defined at:
  5940 ;;		line 87 in file "mcc_generated_files/tmr0.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;		None
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;		None
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		None
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5954 ;;      Params:         0       0       0       0       0       0       0       0
  5955 ;;      Locals:         0       0       0       0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0
  5957 ;;      Totals:         0       0       0       0       0       0       0       0
  5958 ;;Total ram usage:        0 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; Hardware stack levels required when called:    6
  5961 ;; This function calls:
  5962 ;;		Nothing
  5963 ;; This function is called by:
  5964 ;;		_TMR0_Initialize
  5965 ;; This function uses a non-reentrant model
  5966 ;;
  5967                           
  5968                           
  5969                           ;psect for function _TMR0_StartTimer
  5970  0D53                     _TMR0_StartTimer:	
  5971                           
  5972                           ;tmr0.c: 90: T0CON0bits.T0EN = 1;
  5973                           
  5974                           ;incstack = 0
  5975                           ; Regs used in _TMR0_StartTimer: []
  5976  0D53  0020               	movlb	0	; select bank0
  5977  0D54  1797               	bsf	23,7	;volatile
  5978  0D55  0008               	return
  5979  0D56                     __end_of_TMR0_StartTimer:	
  5980                           
  5981                           	psect	text5
  5982  0D96                     __ptext5:	
  5983 ;; *************** function _PWM5_Initialize *****************
  5984 ;; Defined at:
  5985 ;;		line 58 in file "mcc_generated_files/pwm5.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;		None
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;		None
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  1    wreg      void 
  5992 ;; Registers used:
  5993 ;;		wreg, status,2, status,0
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5999 ;;      Params:         0       0       0       0       0       0       0       0
  6000 ;;      Locals:         0       0       0       0       0       0       0       0
  6001 ;;      Temps:          0       0       0       0       0       0       0       0
  6002 ;;      Totals:         0       0       0       0       0       0       0       0
  6003 ;;Total ram usage:        0 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:    6
  6006 ;; This function calls:
  6007 ;;		Nothing
  6008 ;; This function is called by:
  6009 ;;		_SYSTEM_Initialize
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           
  6014                           ;psect for function _PWM5_Initialize
  6015  0D96                     _PWM5_Initialize:	
  6016                           
  6017                           ;pwm5.c: 62: PWM5CON = 0x80;
  6018                           
  6019                           ;incstack = 0
  6020                           ; Regs used in _PWM5_Initialize: [wreg+status,2+status,0]
  6021  0D96  3080               	movlw	128
  6022  0D97  002C               	movlb	12	; select bank12
  6023  0D98  0099               	movwf	25	;volatile
  6024                           
  6025                           ;pwm5.c: 65: PWM5DCH = 0x2C;
  6026  0D99  302C               	movlw	44
  6027  0D9A  0098               	movwf	24	;volatile
  6028                           
  6029                           ;pwm5.c: 68: PWM5DCL = 0x80;
  6030  0D9B  3080               	movlw	128
  6031  0D9C  0097               	movwf	23	;volatile
  6032                           
  6033                           ;pwm5.c: 72: PWMTMRSbits.P5TSEL = 0;
  6034  0D9D  30FC               	movlw	-4
  6035  0D9E  059F               	andwf	31,f	;volatile
  6036  0D9F  0008               	return
  6037  0DA0                     __end_of_PWM5_Initialize:	
  6038                           
  6039                           	psect	text6
  6040  0F76                     __ptext6:	
  6041 ;; *************** function _PIN_MANAGER_Initialize *****************
  6042 ;; Defined at:
  6043 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  state           1    2[COMMON] unsigned char 
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      void 
  6050 ;; Registers used:
  6051 ;;		wreg, status,2, status,0
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6057 ;;      Params:         0       0       0       0       0       0       0       0
  6058 ;;      Locals:         1       0       0       0       0       0       0       0
  6059 ;;      Temps:          0       0       0       0       0       0       0       0
  6060 ;;      Totals:         1       0       0       0       0       0       0       0
  6061 ;;Total ram usage:        1 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    6
  6064 ;; This function calls:
  6065 ;;		Nothing
  6066 ;; This function is called by:
  6067 ;;		_SYSTEM_Initialize
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           
  6072                           ;psect for function _PIN_MANAGER_Initialize
  6073  0F76                     _PIN_MANAGER_Initialize:	
  6074                           
  6075                           ;pin_manager.c: 52: LATB = 0x20;
  6076                           
  6077                           ;incstack = 0
  6078                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
  6079  0F76  3020               	movlw	32
  6080  0F77  0022               	movlb	2	; select bank2
  6081  0F78  008D               	movwf	13	;volatile
  6082                           
  6083                           ;pin_manager.c: 53: LATA = 0x0;
  6084  0F79  018C               	clrf	12	;volatile
  6085                           
  6086                           ;pin_manager.c: 54: LATC = 0x0;
  6087  0F7A  018E               	clrf	14	;volatile
  6088                           
  6089                           ;pin_manager.c: 55: WPUA = 0x0;
  6090  0F7B  0024               	movlb	4	; select bank4
  6091  0F7C  018C               	clrf	12	;volatile
  6092                           
  6093                           ;pin_manager.c: 56: WPUB = 0x20;
  6094  0F7D  3020               	movlw	32
  6095  0F7E  008D               	movwf	13	;volatile
  6096                           
  6097                           ;pin_manager.c: 57: WPUC = 0x0;
  6098  0F7F  018E               	clrf	14	;volatile
  6099                           
  6100                           ;pin_manager.c: 58: ANSELA = 0x37;
  6101  0F80  3037               	movlw	55
  6102  0F81  0023               	movlb	3	; select bank3
  6103  0F82  008C               	movwf	12	;volatile
  6104                           
  6105                           ;pin_manager.c: 59: ANSELB = 0xE0;
  6106  0F83  30E0               	movlw	224
  6107  0F84  008D               	movwf	13	;volatile
  6108                           
  6109                           ;pin_manager.c: 60: ANSELC = 0xFF;
  6110  0F85  30FF               	movlw	255
  6111  0F86  008E               	movwf	14	;volatile
  6112                           
  6113                           ;pin_manager.c: 61: TRISB = 0x10;
  6114  0F87  3010               	movlw	16
  6115  0F88  0021               	movlb	1	; select bank1
  6116  0F89  008D               	movwf	13	;volatile
  6117                           
  6118                           ;pin_manager.c: 62: TRISC = 0x30;
  6119  0F8A  3030               	movlw	48
  6120  0F8B  008E               	movwf	14	;volatile
  6121                           
  6122                           ;pin_manager.c: 63: TRISA = 0x17;
  6123  0F8C  3017               	movlw	23
  6124  0F8D  008C               	movwf	12	;volatile
  6125                           
  6126                           ;pin_manager.c: 68: PIE0bits.IOCIE = 0;
  6127  0F8E  1210               	bcf	16,4	;volatile
  6128                           
  6129                           ;pin_manager.c: 69: bool state = GIE;
  6130  0F8F  3000               	movlw	0
  6131  0F90  1B8B               	btfsc	11,7	;volatile
  6132  0F91  3001               	movlw	1
  6133  0F92  00F2               	movwf	PIN_MANAGER_Initialize@state
  6134                           
  6135                           ;pin_manager.c: 70: GIE = 0;
  6136  0F93  138B               	bcf	11,7	;volatile
  6137                           
  6138                           ;pin_manager.c: 71: PPSLOCK = 0x55;
  6139  0F94  3055               	movlw	85
  6140  0F95  003C               	movlb	28	; select bank28
  6141  0F96  008F               	movwf	15	;volatile
  6142                           
  6143                           ;pin_manager.c: 72: PPSLOCK = 0xAA;
  6144  0F97  30AA               	movlw	170
  6145  0F98  008F               	movwf	15	;volatile
  6146                           
  6147                           ;pin_manager.c: 73: PPSLOCKbits.PPSLOCKED = 0x00;
  6148  0F99  100F               	bcf	15,0	;volatile
  6149                           
  6150                           ;pin_manager.c: 75: RXPPSbits.RXPPS = 0x000C;
  6151  0F9A  0824               	movf	36,w	;volatile
  6152  0F9B  39E0               	andlw	-32
  6153  0F9C  380C               	iorlw	12
  6154  0F9D  00A4               	movwf	36	;volatile
  6155                           
  6156                           ;pin_manager.c: 76: RC3PPSbits.RC3PPS = 0x0002;
  6157  0F9E  003D               	movlb	29	; select bank29
  6158  0F9F  0823               	movf	35,w	;volatile
  6159  0FA0  39E0               	andlw	-32
  6160  0FA1  3802               	iorlw	2
  6161  0FA2  00A3               	movwf	35	;volatile
  6162                           
  6163                           ;pin_manager.c: 77: RB5PPSbits.RB5PPS = 0x0014;
  6164  0FA3  081D               	movf	29,w	;volatile
  6165  0FA4  39E0               	andlw	-32
  6166  0FA5  3814               	iorlw	20
  6167  0FA6  009D               	movwf	29	;volatile
  6168                           
  6169                           ;pin_manager.c: 79: PPSLOCK = 0x55;
  6170  0FA7  3055               	movlw	85
  6171  0FA8  003C               	movlb	28	; select bank28
  6172  0FA9  008F               	movwf	15	;volatile
  6173                           
  6174                           ;pin_manager.c: 80: PPSLOCK = 0xAA;
  6175  0FAA  30AA               	movlw	170
  6176  0FAB  008F               	movwf	15	;volatile
  6177                           
  6178                           ;pin_manager.c: 81: PPSLOCKbits.PPSLOCKED = 0x01;
  6179  0FAC  140F               	bsf	15,0	;volatile
  6180                           
  6181                           ;pin_manager.c: 82: GIE = state;
  6182  0FAD  1C72               	btfss	PIN_MANAGER_Initialize@state,0
  6183  0FAE  2FB1               	goto	u250
  6184  0FAF  178B               	bsf	11,7	;volatile
  6185  0FB0  0008               	return
  6186  0FB1                     u250:	
  6187  0FB1  138B               	bcf	11,7	;volatile
  6188  0FB2  0008               	return
  6189  0FB3                     __end_of_PIN_MANAGER_Initialize:	
  6190                           
  6191                           	psect	text7
  6192  0D83                     __ptext7:	
  6193 ;; *************** function _OSCILLATOR_Initialize *****************
  6194 ;; Defined at:
  6195 ;;		line 88 in file "mcc_generated_files/mcc.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;		None
  6198 ;; Auto vars:     Size  Location     Type
  6199 ;;		None
  6200 ;; Return value:  Size  Location     Type
  6201 ;;                  1    wreg      void 
  6202 ;; Registers used:
  6203 ;;		wreg, status,2
  6204 ;; Tracked objects:
  6205 ;;		On entry : 0/0
  6206 ;;		On exit  : 0/0
  6207 ;;		Unchanged: 0/0
  6208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6209 ;;      Params:         0       0       0       0       0       0       0       0
  6210 ;;      Locals:         0       0       0       0       0       0       0       0
  6211 ;;      Temps:          0       0       0       0       0       0       0       0
  6212 ;;      Totals:         0       0       0       0       0       0       0       0
  6213 ;;Total ram usage:        0 bytes
  6214 ;; Hardware stack levels used:    1
  6215 ;; Hardware stack levels required when called:    6
  6216 ;; This function calls:
  6217 ;;		Nothing
  6218 ;; This function is called by:
  6219 ;;		_SYSTEM_Initialize
  6220 ;; This function uses a non-reentrant model
  6221 ;;
  6222                           
  6223                           
  6224                           ;psect for function _OSCILLATOR_Initialize
  6225  0D83                     _OSCILLATOR_Initialize:	
  6226                           
  6227                           ;mcc.c: 91: OSCCON1 = 0x02;
  6228                           
  6229                           ;incstack = 0
  6230                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6231  0D83  3002               	movlw	2
  6232  0D84  0032               	movlb	18	; select bank18
  6233  0D85  0099               	movwf	25	;volatile
  6234                           
  6235                           ;mcc.c: 93: OSCCON3 = 0x00;
  6236  0D86  019B               	clrf	27	;volatile
  6237                           
  6238                           ;mcc.c: 95: OSCEN = 0x00;
  6239  0D87  019D               	clrf	29	;volatile
  6240                           
  6241                           ;mcc.c: 97: OSCFRQ = 0x06;
  6242  0D88  3006               	movlw	6
  6243  0D89  009F               	movwf	31	;volatile
  6244                           
  6245                           ;mcc.c: 99: OSCTUNE = 0x00;
  6246  0D8A  019E               	clrf	30	;volatile
  6247  0D8B  0008               	return
  6248  0D8C                     __end_of_OSCILLATOR_Initialize:	
  6249                           
  6250                           	psect	text8
  6251  0DAA                     __ptext8:	
  6252 ;; *************** function _EUSART_Initialize *****************
  6253 ;; Defined at:
  6254 ;;		line 56 in file "mcc_generated_files/eusart.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;		None
  6259 ;; Return value:  Size  Location     Type
  6260 ;;                  1    wreg      void 
  6261 ;; Registers used:
  6262 ;;		wreg, status,2
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6268 ;;      Params:         0       0       0       0       0       0       0       0
  6269 ;;      Locals:         0       0       0       0       0       0       0       0
  6270 ;;      Temps:          0       0       0       0       0       0       0       0
  6271 ;;      Totals:         0       0       0       0       0       0       0       0
  6272 ;;Total ram usage:        0 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    6
  6275 ;; This function calls:
  6276 ;;		Nothing
  6277 ;; This function is called by:
  6278 ;;		_SYSTEM_Initialize
  6279 ;; This function uses a non-reentrant model
  6280 ;;
  6281                           
  6282                           
  6283                           ;psect for function _EUSART_Initialize
  6284  0DAA                     _EUSART_Initialize:	
  6285                           
  6286                           ;eusart.c: 61: BAUD1CON = 0x08;
  6287                           
  6288                           ;incstack = 0
  6289                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  6290  0DAA  3008               	movlw	8
  6291  0DAB  0023               	movlb	3	; select bank3
  6292  0DAC  009F               	movwf	31	;volatile
  6293                           
  6294                           ;eusart.c: 64: RC1STA = 0x90;
  6295  0DAD  3090               	movlw	144
  6296  0DAE  009D               	movwf	29	;volatile
  6297                           
  6298                           ;eusart.c: 67: TX1STA = 0x24;
  6299  0DAF  3024               	movlw	36
  6300  0DB0  009E               	movwf	30	;volatile
  6301                           
  6302                           ;eusart.c: 70: SP1BRGL = 0x67;
  6303  0DB1  3067               	movlw	103
  6304  0DB2  009B               	movwf	27	;volatile
  6305                           
  6306                           ;eusart.c: 73: SP1BRGH = 0x00;
  6307  0DB3  019C               	clrf	28	;volatile
  6308  0DB4  0008               	return
  6309  0DB5                     __end_of_EUSART_Initialize:	
  6310                           
  6311                           	psect	text9
  6312  0D7A                     __ptext9:	
  6313 ;; *************** function _ADC_Initialize *****************
  6314 ;; Defined at:
  6315 ;;		line 65 in file "mcc_generated_files/adc.c"
  6316 ;; Parameters:    Size  Location     Type
  6317 ;;		None
  6318 ;; Auto vars:     Size  Location     Type
  6319 ;;		None
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  1    wreg      void 
  6322 ;; Registers used:
  6323 ;;		wreg, status,2
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6329 ;;      Params:         0       0       0       0       0       0       0       0
  6330 ;;      Locals:         0       0       0       0       0       0       0       0
  6331 ;;      Temps:          0       0       0       0       0       0       0       0
  6332 ;;      Totals:         0       0       0       0       0       0       0       0
  6333 ;;Total ram usage:        0 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; Hardware stack levels required when called:    6
  6336 ;; This function calls:
  6337 ;;		Nothing
  6338 ;; This function is called by:
  6339 ;;		_SYSTEM_Initialize
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           
  6344                           ;psect for function _ADC_Initialize
  6345  0D7A                     _ADC_Initialize:	
  6346                           
  6347                           ;adc.c: 70: ADCON0 = 0x01;
  6348                           
  6349                           ;incstack = 0
  6350                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  6351  0D7A  3001               	movlw	1
  6352  0D7B  0021               	movlb	1	; select bank1
  6353  0D7C  009D               	movwf	29	;volatile
  6354                           
  6355                           ;adc.c: 73: ADCON1 = 0xD0;
  6356  0D7D  30D0               	movlw	208
  6357  0D7E  009E               	movwf	30	;volatile
  6358                           
  6359                           ;adc.c: 76: ADACT = 0x00;
  6360  0D7F  019F               	clrf	31	;volatile
  6361                           
  6362                           ;adc.c: 79: ADRESL = 0x00;
  6363  0D80  019B               	clrf	27	;volatile
  6364                           
  6365                           ;adc.c: 82: ADRESH = 0x00;
  6366  0D81  019C               	clrf	28	;volatile
  6367  0D82  0008               	return
  6368  0D83                     __end_of_ADC_Initialize:	
  6369                           
  6370                           	psect	text10
  6371  003C                     __ptext10:	
  6372 ;; *************** function _ProtocolManager *****************
  6373 ;; Defined at:
  6374 ;;		line 40 in file "CommunicationManager.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;		None
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  k               1   11[BANK0 ] unsigned char 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      void 
  6381 ;; Registers used:
  6382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6383 ;; Tracked objects:
  6384 ;;		On entry : 0/0
  6385 ;;		On exit  : 0/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6388 ;;      Params:         0       0       0       0       0       0       0       0
  6389 ;;      Locals:         0       1       0       0       0       0       0       0
  6390 ;;      Temps:          0       4       0       0       0       0       0       0
  6391 ;;      Totals:         0       5       0       0       0       0       0       0
  6392 ;;Total ram usage:        5 bytes
  6393 ;; Hardware stack levels used:    1
  6394 ;; Hardware stack levels required when called:   10
  6395 ;; This function calls:
  6396 ;;		_ADC_GetConversion
  6397 ;;		_BuzzerStartConfig
  6398 ;;		_DATAEE_ReadByte
  6399 ;;		_DATAEE_WriteByte
  6400 ;;		_EUSART_Read
  6401 ;;		_FanStartConfig
  6402 ;;		_LedONStartConfig
  6403 ;;		_PackageTxResponseACK
  6404 ;;		_PackageTxResponseData
  6405 ;;		_PackageTxResponseNACK
  6406 ;;		_char1bytetovalue
  6407 ;;		_char2bytetovalue
  6408 ;; This function is called by:
  6409 ;;		_main
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413                           
  6414                           ;psect for function _ProtocolManager
  6415  003C                     _ProtocolManager:	
  6416                           
  6417                           ;CommunicationManager.c: 42: unsigned char k=0;
  6418                           
  6419                           ;incstack = 0
  6420                           ; Regs used in _ProtocolManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6421  003C  0020               	movlb	0	; select bank0
  6422  003D  01E3               	clrf	ProtocolManager@k
  6423                           
  6424                           ;CommunicationManager.c: 43: switch(RxFrameDecodeState)
  6425  003E  2C73               	goto	l4400
  6426  003F                     l4044:	
  6427                           ;CommunicationManager.c: 44: {
  6428                           ;CommunicationManager.c: 45: case 0: if(EUSART_Read()=='$' && EUSART_Read()=='$')
  6429                           
  6430  003F  318D  258C  3180   	fcall	_EUSART_Read
  6431  0042  3A24               	xorlw	36
  6432  0043  1D03               	skipz
  6433  0044  0008               	return
  6434  0045  318D  258C  3180   	fcall	_EUSART_Read
  6435  0048  3A24               	xorlw	36
  6436  0049  1D03               	skipz
  6437  004A  0008               	return
  6438                           
  6439                           ;CommunicationManager.c: 46: {
  6440                           ;CommunicationManager.c: 47: RxFrameDecodeState=1;
  6441  004B  0020               	movlb	0	; select bank0
  6442  004C  01D0               	clrf	_RxFrameDecodeState
  6443  004D  0AD0               	incf	_RxFrameDecodeState,f
  6444                           
  6445                           ;CommunicationManager.c: 48: RxFrameDataLenCnt=2;
  6446  004E  3002               	movlw	2
  6447  004F  00DF               	movwf	??_ProtocolManager
  6448  0050  085F               	movf	??_ProtocolManager,w
  6449  0051  00CE               	movwf	_RxFrameDataLenCnt
  6450                           
  6451                           ;CommunicationManager.c: 49: Checksum=0;
  6452  0052  01D6               	clrf	_Checksum
  6453                           
  6454                           ;CommunicationManager.c: 50: }
  6455                           ;CommunicationManager.c: 51: break;
  6456  0053  0008               	return
  6457  0054                     l4054:	
  6458                           ;CommunicationManager.c: 53: case 1: RxFrameType=EUSART_Read();
  6459                           
  6460  0054  318D  258C  3180   	fcall	_EUSART_Read
  6461  0057  0020               	movlb	0	; select bank0
  6462  0058  00DF               	movwf	??_ProtocolManager
  6463  0059  085F               	movf	??_ProtocolManager,w
  6464  005A  00E8               	movwf	_RxFrameType
  6465                           
  6466                           ;CommunicationManager.c: 54: Checksum+=RxFrameType;
  6467  005B  0868               	movf	_RxFrameType,w
  6468  005C  00DF               	movwf	??_ProtocolManager
  6469  005D  085F               	movf	??_ProtocolManager,w
  6470  005E  07D6               	addwf	_Checksum,f
  6471                           
  6472                           ;CommunicationManager.c: 55: if((RxFrameType=='r')||(RxFrameType=='w')||(RxFrameType=='A
      +                          ')||(RxFrameType=='I')||(RxFrameType=='B')||(RxFrameType=='L')||(RxFrameType=='F')||(RxF
      +                          rameType=='R'))
  6473  005F  3072               	movlw	114
  6474  0060  0668               	xorwf	_RxFrameType,w
  6475  0061  1903               	btfsc	3,2
  6476  0062  287F               	goto	l4074
  6477  0063  3077               	movlw	119
  6478  0064  0668               	xorwf	_RxFrameType,w
  6479  0065  1903               	btfsc	3,2
  6480  0066  287F               	goto	l4074
  6481  0067  3041               	movlw	65
  6482  0068  0668               	xorwf	_RxFrameType,w
  6483  0069  1903               	btfsc	3,2
  6484  006A  287F               	goto	l4074
  6485  006B  3049               	movlw	73
  6486  006C  0668               	xorwf	_RxFrameType,w
  6487  006D  1903               	btfsc	3,2
  6488  006E  287F               	goto	l4074
  6489  006F  3042               	movlw	66
  6490  0070  0668               	xorwf	_RxFrameType,w
  6491  0071  1903               	btfsc	3,2
  6492  0072  287F               	goto	l4074
  6493  0073  304C               	movlw	76
  6494  0074  0668               	xorwf	_RxFrameType,w
  6495  0075  1903               	btfsc	3,2
  6496  0076  287F               	goto	l4074
  6497  0077  3046               	movlw	70
  6498  0078  0668               	xorwf	_RxFrameType,w
  6499  0079  1903               	btfsc	3,2
  6500  007A  287F               	goto	l4074
  6501  007B  3052               	movlw	82
  6502  007C  0668               	xorwf	_RxFrameType,w
  6503  007D  1D03               	btfss	3,2
  6504  007E  2889               	goto	l4078
  6505  007F                     l4074:	
  6506                           
  6507                           ;CommunicationManager.c: 56: {
  6508                           ;CommunicationManager.c: 57: RxFrameDecodeState=2;
  6509  007F  3002               	movlw	2
  6510  0080  00DF               	movwf	??_ProtocolManager
  6511  0081  085F               	movf	??_ProtocolManager,w
  6512  0082  00D0               	movwf	_RxFrameDecodeState
  6513                           
  6514                           ;CommunicationManager.c: 58: RxFrameDataLenCnt=RxFrameDataLenCnt+1;
  6515  0083  084E               	movf	_RxFrameDataLenCnt,w
  6516  0084  3E01               	addlw	1
  6517  0085  00DF               	movwf	??_ProtocolManager
  6518  0086  085F               	movf	??_ProtocolManager,w
  6519  0087  00CE               	movwf	_RxFrameDataLenCnt
  6520                           
  6521                           ;CommunicationManager.c: 59: }
  6522  0088  0008               	return
  6523  0089                     l4078:	
  6524                           
  6525                           ;CommunicationManager.c: 60: else
  6526                           ;CommunicationManager.c: 61: {
  6527                           ;CommunicationManager.c: 62: RxFrameDecodeState=0;
  6528  0089  01D0               	clrf	_RxFrameDecodeState
  6529                           
  6530                           ;CommunicationManager.c: 63: }
  6531                           ;CommunicationManager.c: 64: break;
  6532  008A  0008               	return
  6533  008B                     l4080:	
  6534                           ;CommunicationManager.c: 66: case 2: highByteChar=EUSART_Read();
  6535                           
  6536  008B  318D  258C  3180   	fcall	_EUSART_Read
  6537  008E  0020               	movlb	0	; select bank0
  6538  008F  00DF               	movwf	??_ProtocolManager
  6539  0090  085F               	movf	??_ProtocolManager,w
  6540  0091  00C3               	movwf	_highByteChar
  6541                           
  6542                           ;CommunicationManager.c: 67: lowByteChar=EUSART_Read();
  6543  0092  318D  258C  3180   	fcall	_EUSART_Read
  6544  0095  0020               	movlb	0	; select bank0
  6545  0096  00DF               	movwf	??_ProtocolManager
  6546  0097  085F               	movf	??_ProtocolManager,w
  6547  0098  00C2               	movwf	_lowByteChar
  6548                           
  6549                           ;CommunicationManager.c: 68: RxFrameDataLen=(unsigned char)char2bytetovalue(highByteChar
      +                          ,lowByteChar,&Checksum);
  6550  0099  0842               	movf	_lowByteChar,w
  6551  009A  00DF               	movwf	??_ProtocolManager
  6552  009B  085F               	movf	??_ProtocolManager,w
  6553  009C  00F5               	movwf	char2bytetovalue@LowBchar
  6554  009D  3056               	movlw	(low (_Checksum| 0))& (0+255)
  6555  009E  00E0               	movwf	??_ProtocolManager+1
  6556  009F  0860               	movf	??_ProtocolManager+1,w
  6557  00A0  00F6               	movwf	char2bytetovalue@cksum
  6558  00A1  0843               	movf	_highByteChar,w
  6559  00A2  318E  26AF         	fcall	_char2bytetovalue
  6560  00A4  0020               	movlb	0	; select bank0
  6561  00A5  00E1               	movwf	??_ProtocolManager+2
  6562  00A6  0861               	movf	??_ProtocolManager+2,w
  6563  00A7  00CF               	movwf	_RxFrameDataLen
  6564                           
  6565                           ;CommunicationManager.c: 69: RxFrameDataLenCnt=RxFrameDataLenCnt+2;
  6566  00A8  084E               	movf	_RxFrameDataLenCnt,w
  6567  00A9  3E02               	addlw	2
  6568  00AA  00DF               	movwf	??_ProtocolManager
  6569  00AB  085F               	movf	??_ProtocolManager,w
  6570  00AC  00CE               	movwf	_RxFrameDataLenCnt
  6571                           
  6572                           ;CommunicationManager.c: 70: RxFrameDecodeState=3;
  6573  00AD  3003               	movlw	3
  6574  00AE  00DF               	movwf	??_ProtocolManager
  6575  00AF  085F               	movf	??_ProtocolManager,w
  6576  00B0  00D0               	movwf	_RxFrameDecodeState
  6577                           
  6578                           ;CommunicationManager.c: 71: break;
  6579  00B1  0008               	return
  6580  00B2                     l4088:	
  6581                           ;CommunicationManager.c: 73: case 3: if(RxFrameType=='r')
  6582                           
  6583  00B2  3072               	movlw	114
  6584  00B3  0668               	xorwf	_RxFrameType,w
  6585  00B4  1D03               	btfss	3,2
  6586  00B5  2921               	goto	l4126
  6587                           
  6588                           ;CommunicationManager.c: 74: {
  6589                           ;CommunicationManager.c: 75: RxFrameDecodeState=4;
  6590  00B6  3004               	movlw	4
  6591  00B7  00DF               	movwf	??_ProtocolManager
  6592  00B8  085F               	movf	??_ProtocolManager,w
  6593  00B9  00D0               	movwf	_RxFrameDecodeState
  6594                           
  6595                           ;CommunicationManager.c: 76: highByteChar=EUSART_Read();
  6596  00BA  318D  258C  3180   	fcall	_EUSART_Read
  6597  00BD  0020               	movlb	0	; select bank0
  6598  00BE  00DF               	movwf	??_ProtocolManager
  6599  00BF  085F               	movf	??_ProtocolManager,w
  6600  00C0  00C3               	movwf	_highByteChar
  6601                           
  6602                           ;CommunicationManager.c: 77: lowByteChar=EUSART_Read();
  6603  00C1  318D  258C  3180   	fcall	_EUSART_Read
  6604  00C4  0020               	movlb	0	; select bank0
  6605  00C5  00DF               	movwf	??_ProtocolManager
  6606  00C6  085F               	movf	??_ProtocolManager,w
  6607  00C7  00C2               	movwf	_lowByteChar
  6608                           
  6609                           ;CommunicationManager.c: 78: eepromReadAddr=((unsigned int)char2bytetovalue(highByteChar
      +                          ,lowByteChar,&Checksum))& 0x00FF;
  6610  00C8  0842               	movf	_lowByteChar,w
  6611  00C9  00DF               	movwf	??_ProtocolManager
  6612  00CA  085F               	movf	??_ProtocolManager,w
  6613  00CB  00F5               	movwf	char2bytetovalue@LowBchar
  6614  00CC  3056               	movlw	(low (_Checksum| 0))& (0+255)
  6615  00CD  00E0               	movwf	??_ProtocolManager+1
  6616  00CE  0860               	movf	??_ProtocolManager+1,w
  6617  00CF  00F6               	movwf	char2bytetovalue@cksum
  6618  00D0  0843               	movf	_highByteChar,w
  6619  00D1  318E  26AF  3180   	fcall	_char2bytetovalue
  6620  00D4  0020               	movlb	0	; select bank0
  6621  00D5  00E1               	movwf	??_ProtocolManager+2
  6622  00D6  01E2               	clrf	??_ProtocolManager+3
  6623  00D7  0861               	movf	??_ProtocolManager+2,w
  6624  00D8  00AA               	movwf	_eepromReadAddr
  6625  00D9  0862               	movf	??_ProtocolManager+3,w
  6626  00DA  00AB               	movwf	_eepromReadAddr+1
  6627                           
  6628                           ;CommunicationManager.c: 79: RxFrameDataLenCnt=RxFrameDataLenCnt+2;
  6629  00DB  084E               	movf	_RxFrameDataLenCnt,w
  6630  00DC  3E02               	addlw	2
  6631  00DD  00DF               	movwf	??_ProtocolManager
  6632  00DE  085F               	movf	??_ProtocolManager,w
  6633  00DF  00CE               	movwf	_RxFrameDataLenCnt
  6634                           
  6635                           ;CommunicationManager.c: 80: highByteChar=EUSART_Read();
  6636  00E0  318D  258C  3180   	fcall	_EUSART_Read
  6637  00E3  0020               	movlb	0	; select bank0
  6638  00E4  00DF               	movwf	??_ProtocolManager
  6639  00E5  085F               	movf	??_ProtocolManager,w
  6640  00E6  00C3               	movwf	_highByteChar
  6641                           
  6642                           ;CommunicationManager.c: 81: lowByteChar=EUSART_Read();
  6643  00E7  318D  258C  3180   	fcall	_EUSART_Read
  6644  00EA  0020               	movlb	0	; select bank0
  6645  00EB  00DF               	movwf	??_ProtocolManager
  6646  00EC  085F               	movf	??_ProtocolManager,w
  6647  00ED  00C2               	movwf	_lowByteChar
  6648                           
  6649                           ;CommunicationManager.c: 82: eepromReadLen=(unsigned char)char2bytetovalue(highByteChar,
      +                          lowByteChar,&Checksum);
  6650  00EE  0842               	movf	_lowByteChar,w
  6651  00EF  00DF               	movwf	??_ProtocolManager
  6652  00F0  085F               	movf	??_ProtocolManager,w
  6653  00F1  00F5               	movwf	char2bytetovalue@LowBchar
  6654  00F2  3056               	movlw	(low (_Checksum| 0))& (0+255)
  6655  00F3  00E0               	movwf	??_ProtocolManager+1
  6656  00F4  0860               	movf	??_ProtocolManager+1,w
  6657  00F5  00F6               	movwf	char2bytetovalue@cksum
  6658  00F6  0843               	movf	_highByteChar,w
  6659  00F7  318E  26AF  3180   	fcall	_char2bytetovalue
  6660  00FA  0020               	movlb	0	; select bank0
  6661  00FB  00E1               	movwf	??_ProtocolManager+2
  6662  00FC  0861               	movf	??_ProtocolManager+2,w
  6663  00FD  00C7               	movwf	_eepromReadLen
  6664                           
  6665                           ;CommunicationManager.c: 83: RxFrameDataLenCnt=RxFrameDataLenCnt+2;
  6666  00FE  084E               	movf	_RxFrameDataLenCnt,w
  6667  00FF  3E02               	addlw	2
  6668  0100  00DF               	movwf	??_ProtocolManager
  6669  0101  085F               	movf	??_ProtocolManager,w
  6670  0102  00CE               	movwf	_RxFrameDataLenCnt
  6671                           
  6672                           ;CommunicationManager.c: 84: CommandError=0;
  6673  0103  01C6               	clrf	_CommandError
  6674                           
  6675                           ;CommunicationManager.c: 85: if(eepromReadLen>16)
  6676  0104  3011               	movlw	17
  6677  0105  0247               	subwf	_eepromReadLen,w
  6678  0106  1C03               	skipc
  6679  0107  0008               	return
  6680                           
  6681                           ;CommunicationManager.c: 86: {
  6682                           ;CommunicationManager.c: 87: CommandError=1;
  6683  0108  01C6               	clrf	_CommandError
  6684  0109  0AC6               	incf	_CommandError,f
  6685                           
  6686                           ;CommunicationManager.c: 88: DelayMsecCount=0;
  6687  010A  01B8               	clrf	_DelayMsecCount
  6688  010B  01B9               	clrf	_DelayMsecCount+1
  6689  010C                     l4120:	
  6690                           ;CommunicationManager.c: 89: while(EUSART_Read()!='\n'){if(DelayMsecCount>20){break;}};
  6691                           
  6692  010C  318D  258C  3180   	fcall	_EUSART_Read
  6693  010F  3A0A               	xorlw	10
  6694  0110  1903               	btfsc	3,2
  6695  0111  291A               	goto	l4122
  6696  0112  3000               	movlw	0
  6697  0113  0020               	movlb	0	; select bank0
  6698  0114  0239               	subwf	_DelayMsecCount+1,w
  6699  0115  3015               	movlw	21
  6700  0116  1903               	skipnz
  6701  0117  0238               	subwf	_DelayMsecCount,w
  6702  0118  1C03               	skipc
  6703  0119  290C               	goto	l4120
  6704  011A                     l4122:	
  6705                           
  6706                           ;CommunicationManager.c: 90: PackageTxResponseNACK(RxFrameType);
  6707  011A  0020               	movlb	0	; select bank0
  6708  011B  0868               	movf	_RxFrameType,w
  6709  011C  3185  257E         	fcall	_PackageTxResponseNACK
  6710                           
  6711                           ;CommunicationManager.c: 92: RxFrameDecodeState=0;
  6712  011E  0020               	movlb	0	; select bank0
  6713  011F  01D0               	clrf	_RxFrameDecodeState
  6714                           
  6715                           ;CommunicationManager.c: 93: }
  6716                           ;CommunicationManager.c: 94: }
  6717  0120  0008               	return
  6718  0121                     l4126:	
  6719                           
  6720                           ;CommunicationManager.c: 95: else if(RxFrameType=='w')
  6721  0121  3077               	movlw	119
  6722  0122  0668               	xorwf	_RxFrameType,w
  6723  0123  1D03               	btfss	3,2
  6724  0124  29C1               	goto	l4176
  6725                           
  6726                           ;CommunicationManager.c: 96: {
  6727                           ;CommunicationManager.c: 97: RxFrameDecodeState=4;
  6728  0125  3004               	movlw	4
  6729  0126  00DF               	movwf	??_ProtocolManager
  6730  0127  085F               	movf	??_ProtocolManager,w
  6731  0128  00D0               	movwf	_RxFrameDecodeState
  6732                           
  6733                           ;CommunicationManager.c: 98: highByteChar=EUSART_Read();
  6734  0129  318D  258C  3180   	fcall	_EUSART_Read
  6735  012C  0020               	movlb	0	; select bank0
  6736  012D  00DF               	movwf	??_ProtocolManager
  6737  012E  085F               	movf	??_ProtocolManager,w
  6738  012F  00C3               	movwf	_highByteChar
  6739                           
  6740                           ;CommunicationManager.c: 99: lowByteChar=EUSART_Read();
  6741  0130  318D  258C  3180   	fcall	_EUSART_Read
  6742  0133  0020               	movlb	0	; select bank0
  6743  0134  00DF               	movwf	??_ProtocolManager
  6744  0135  085F               	movf	??_ProtocolManager,w
  6745  0136  00C2               	movwf	_lowByteChar
  6746                           
  6747                           ;CommunicationManager.c: 100: eepromWriteAddr=((unsigned int)char2bytetovalue(highByteCh
      +                          ar,lowByteChar,&Checksum))& 0x00FF;
  6748  0137  0842               	movf	_lowByteChar,w
  6749  0138  00DF               	movwf	??_ProtocolManager
  6750  0139  085F               	movf	??_ProtocolManager,w
  6751  013A  00F5               	movwf	char2bytetovalue@LowBchar
  6752  013B  3056               	movlw	(low (_Checksum| 0))& (0+255)
  6753  013C  00E0               	movwf	??_ProtocolManager+1
  6754  013D  0860               	movf	??_ProtocolManager+1,w
  6755  013E  00F6               	movwf	char2bytetovalue@cksum
  6756  013F  0843               	movf	_highByteChar,w
  6757  0140  318E  26AF  3180   	fcall	_char2bytetovalue
  6758  0143  0020               	movlb	0	; select bank0
  6759  0144  00E1               	movwf	??_ProtocolManager+2
  6760  0145  01E2               	clrf	??_ProtocolManager+3
  6761  0146  0861               	movf	??_ProtocolManager+2,w
  6762  0147  00AC               	movwf	_eepromWriteAddr
  6763  0148  0862               	movf	??_ProtocolManager+3,w
  6764  0149  00AD               	movwf	_eepromWriteAddr+1
  6765                           
  6766                           ;CommunicationManager.c: 101: RxFrameDataLenCnt=RxFrameDataLenCnt+2;
  6767  014A  084E               	movf	_RxFrameDataLenCnt,w
  6768  014B  3E02               	addlw	2
  6769  014C  00DF               	movwf	??_ProtocolManager
  6770  014D  085F               	movf	??_ProtocolManager,w
  6771  014E  00CE               	movwf	_RxFrameDataLenCnt
  6772                           
  6773                           ;CommunicationManager.c: 102: highByteChar=EUSART_Read();
  6774  014F  318D  258C  3180   	fcall	_EUSART_Read
  6775  0152  0020               	movlb	0	; select bank0
  6776  0153  00DF               	movwf	??_ProtocolManager
  6777  0154  085F               	movf	??_ProtocolManager,w
  6778  0155  00C3               	movwf	_highByteChar
  6779                           
  6780                           ;CommunicationManager.c: 103: lowByteChar=EUSART_Read();
  6781  0156  318D  258C  3180   	fcall	_EUSART_Read
  6782  0159  0020               	movlb	0	; select bank0
  6783  015A  00DF               	movwf	??_ProtocolManager
  6784  015B  085F               	movf	??_ProtocolManager,w
  6785  015C  00C2               	movwf	_lowByteChar
  6786                           
  6787                           ;CommunicationManager.c: 104: eepromWriteLen=(unsigned char)char2bytetovalue(highByteCha
      +                          r,lowByteChar,&Checksum);
  6788  015D  0842               	movf	_lowByteChar,w
  6789  015E  00DF               	movwf	??_ProtocolManager
  6790  015F  085F               	movf	??_ProtocolManager,w
  6791  0160  00F5               	movwf	char2bytetovalue@LowBchar
  6792  0161  3056               	movlw	(low (_Checksum| 0))& (0+255)
  6793  0162  00E0               	movwf	??_ProtocolManager+1
  6794  0163  0860               	movf	??_ProtocolManager+1,w
  6795  0164  00F6               	movwf	char2bytetovalue@cksum
  6796  0165  0843               	movf	_highByteChar,w
  6797  0166  318E  26AF  3180   	fcall	_char2bytetovalue
  6798  0169  0020               	movlb	0	; select bank0
  6799  016A  00E1               	movwf	??_ProtocolManager+2
  6800  016B  0861               	movf	??_ProtocolManager+2,w
  6801  016C  00C8               	movwf	_eepromWriteLen
  6802                           
  6803                           ;CommunicationManager.c: 105: RxFrameDataLenCnt=RxFrameDataLenCnt+2;
  6804  016D  084E               	movf	_RxFrameDataLenCnt,w
  6805  016E  3E02               	addlw	2
  6806  016F  00DF               	movwf	??_ProtocolManager
  6807  0170  085F               	movf	??_ProtocolManager,w
  6808  0171  00CE               	movwf	_RxFrameDataLenCnt
  6809                           
  6810                           ;CommunicationManager.c: 106: CommandError=0;
  6811  0172  01C6               	clrf	_CommandError
  6812                           
  6813                           ;CommunicationManager.c: 107: if(eepromWriteLen>16)
  6814  0173  3011               	movlw	17
  6815  0174  0248               	subwf	_eepromWriteLen,w
  6816  0175  1C03               	skipc
  6817  0176  2990               	goto	l4164
  6818                           
  6819                           ;CommunicationManager.c: 108: {
  6820                           ;CommunicationManager.c: 109: CommandError=1;
  6821  0177  01C6               	clrf	_CommandError
  6822  0178  0AC6               	incf	_CommandError,f
  6823                           
  6824                           ;CommunicationManager.c: 110: DelayMsecCount=0;
  6825  0179  01B8               	clrf	_DelayMsecCount
  6826  017A  01B9               	clrf	_DelayMsecCount+1
  6827  017B                     l4158:	
  6828                           ;CommunicationManager.c: 111: while(EUSART_Read()!='\n'){if(DelayMsecCount>20){break;}};
  6829                           
  6830  017B  318D  258C  3180   	fcall	_EUSART_Read
  6831  017E  3A0A               	xorlw	10
  6832  017F  1903               	btfsc	3,2
  6833  0180  2989               	goto	l4160
  6834  0181  3000               	movlw	0
  6835  0182  0020               	movlb	0	; select bank0
  6836  0183  0239               	subwf	_DelayMsecCount+1,w
  6837  0184  3015               	movlw	21
  6838  0185  1903               	skipnz
  6839  0186  0238               	subwf	_DelayMsecCount,w
  6840  0187  1C03               	skipc
  6841  0188  297B               	goto	l4158
  6842  0189                     l4160:	
  6843                           
  6844                           ;CommunicationManager.c: 112: PackageTxResponseNACK(RxFrameType);
  6845  0189  0020               	movlb	0	; select bank0
  6846  018A  0868               	movf	_RxFrameType,w
  6847  018B  3185  257E         	fcall	_PackageTxResponseNACK
  6848                           
  6849                           ;CommunicationManager.c: 114: RxFrameDecodeState=0;
  6850  018D  0020               	movlb	0	; select bank0
  6851  018E  01D0               	clrf	_RxFrameDecodeState
  6852                           
  6853                           ;CommunicationManager.c: 115: }
  6854  018F  0008               	return
  6855  0190                     l4164:	
  6856                           
  6857                           ;CommunicationManager.c: 116: else
  6858                           ;CommunicationManager.c: 117: {
  6859                           ;CommunicationManager.c: 118: for(k=0;k<eepromWriteLen;k++)
  6860  0190  01E3               	clrf	ProtocolManager@k
  6861  0191                     l4174:	
  6862  0191  0848               	movf	_eepromWriteLen,w
  6863  0192  0263               	subwf	ProtocolManager@k,w
  6864  0193  1803               	btfsc	3,0
  6865  0194  0008               	return
  6866                           
  6867                           ;CommunicationManager.c: 119: {
  6868                           ;CommunicationManager.c: 120: highByteChar=EUSART_Read();
  6869  0195  318D  258C  3180   	fcall	_EUSART_Read
  6870  0198  0020               	movlb	0	; select bank0
  6871  0199  00DF               	movwf	??_ProtocolManager
  6872  019A  085F               	movf	??_ProtocolManager,w
  6873  019B  00C3               	movwf	_highByteChar
  6874                           
  6875                           ;CommunicationManager.c: 121: lowByteChar=EUSART_Read();
  6876  019C  318D  258C  3180   	fcall	_EUSART_Read
  6877  019F  0020               	movlb	0	; select bank0
  6878  01A0  00DF               	movwf	??_ProtocolManager
  6879  01A1  085F               	movf	??_ProtocolManager,w
  6880  01A2  00C2               	movwf	_lowByteChar
  6881                           
  6882                           ;CommunicationManager.c: 122: eepromWriteData[k]=(unsigned char)char2bytetovalue(highByt
      +                          eChar,lowByteChar,&Checksum);
  6883  01A3  0842               	movf	_lowByteChar,w
  6884  01A4  00DF               	movwf	??_ProtocolManager
  6885  01A5  085F               	movf	??_ProtocolManager,w
  6886  01A6  00F5               	movwf	char2bytetovalue@LowBchar
  6887  01A7  3056               	movlw	(low (_Checksum| 0))& (0+255)
  6888  01A8  00E0               	movwf	??_ProtocolManager+1
  6889  01A9  0860               	movf	??_ProtocolManager+1,w
  6890  01AA  00F6               	movwf	char2bytetovalue@cksum
  6891  01AB  0843               	movf	_highByteChar,w
  6892  01AC  318E  26AF  3180   	fcall	_char2bytetovalue
  6893  01AF  0020               	movlb	0	; select bank0
  6894  01B0  00E1               	movwf	??_ProtocolManager+2
  6895  01B1  0863               	movf	ProtocolManager@k,w
  6896  01B2  3EA0               	addlw	(low (_eepromWriteData| 0))& (0+255)
  6897  01B3  0086               	movwf	6
  6898  01B4  0187               	clrf	7
  6899  01B5  0861               	movf	??_ProtocolManager+2,w
  6900  01B6  0081               	movwf	1
  6901                           
  6902                           ;CommunicationManager.c: 123: RxFrameDataLenCnt=RxFrameDataLenCnt+2;
  6903  01B7  084E               	movf	_RxFrameDataLenCnt,w
  6904  01B8  3E02               	addlw	2
  6905  01B9  00DF               	movwf	??_ProtocolManager
  6906  01BA  085F               	movf	??_ProtocolManager,w
  6907  01BB  00CE               	movwf	_RxFrameDataLenCnt
  6908  01BC  3001               	movlw	1
  6909  01BD  00DF               	movwf	??_ProtocolManager
  6910  01BE  085F               	movf	??_ProtocolManager,w
  6911  01BF  07E3               	addwf	ProtocolManager@k,f
  6912  01C0  2991               	goto	l4174
  6913  01C1                     l4176:	
  6914                           ;CommunicationManager.c: 125: }
  6915                           ;CommunicationManager.c: 126: }
  6916                           ;CommunicationManager.c: 128: }
  6917                           
  6918                           
  6919                           ;CommunicationManager.c: 129: else if(RxFrameType=='A')
  6920  01C1  3041               	movlw	65
  6921  01C2  0668               	xorwf	_RxFrameType,w
  6922  01C3  1D03               	btfss	3,2
  6923  01C4  29E5               	goto	l4188
  6924                           
  6925                           ;CommunicationManager.c: 130: {
  6926                           ;CommunicationManager.c: 131: RxFrameDecodeState=4;
  6927  01C5  3004               	movlw	4
  6928  01C6  00DF               	movwf	??_ProtocolManager
  6929  01C7  085F               	movf	??_ProtocolManager,w
  6930  01C8  00D0               	movwf	_RxFrameDecodeState
  6931                           
  6932                           ;CommunicationManager.c: 132: lowByteChar=EUSART_Read();
  6933  01C9  318D  258C  3180   	fcall	_EUSART_Read
  6934  01CC  0020               	movlb	0	; select bank0
  6935  01CD  00DF               	movwf	??_ProtocolManager
  6936  01CE  085F               	movf	??_ProtocolManager,w
  6937  01CF  00C2               	movwf	_lowByteChar
  6938                           
  6939                           ;CommunicationManager.c: 133: ChannelNumberChar=lowByteChar;
  6940  01D0  0842               	movf	_lowByteChar,w
  6941  01D1  00DF               	movwf	??_ProtocolManager
  6942  01D2  085F               	movf	??_ProtocolManager,w
  6943  01D3  00E6               	movwf	_ChannelNumberChar
  6944                           
  6945                           ;CommunicationManager.c: 134: ChannelNumber=char1bytetovalue(lowByteChar,&Checksum);
  6946  01D4  3056               	movlw	(low (_Checksum| 0))& (0+255)
  6947  01D5  00DF               	movwf	??_ProtocolManager
  6948  01D6  085F               	movf	??_ProtocolManager,w
  6949  01D7  00F5               	movwf	char1bytetovalue@cksum
  6950  01D8  0842               	movf	_lowByteChar,w
  6951  01D9  318E  2612         	fcall	_char1bytetovalue
  6952  01DB  0020               	movlb	0	; select bank0
  6953  01DC  00E0               	movwf	??_ProtocolManager+1
  6954  01DD  0860               	movf	??_ProtocolManager+1,w
  6955  01DE  00C5               	movwf	_ChannelNumber
  6956                           
  6957                           ;CommunicationManager.c: 135: RxFrameDataLenCnt=RxFrameDataLenCnt + 1;
  6958  01DF  084E               	movf	_RxFrameDataLenCnt,w
  6959  01E0  3E01               	addlw	1
  6960  01E1  00DF               	movwf	??_ProtocolManager
  6961  01E2  085F               	movf	??_ProtocolManager,w
  6962  01E3  00CE               	movwf	_RxFrameDataLenCnt
  6963                           
  6964                           ;CommunicationManager.c: 136: }
  6965  01E4  0008               	return
  6966  01E5                     l4188:	
  6967                           
  6968                           ;CommunicationManager.c: 137: else if(RxFrameType=='I')
  6969  01E5  3049               	movlw	73
  6970  01E6  0668               	xorwf	_RxFrameType,w
  6971  01E7  1D03               	btfss	3,2
  6972  01E8  2A09               	goto	l4200
  6973                           
  6974                           ;CommunicationManager.c: 138: {
  6975                           ;CommunicationManager.c: 139: RxFrameDecodeState=4;
  6976  01E9  3004               	movlw	4
  6977  01EA  00DF               	movwf	??_ProtocolManager
  6978  01EB  085F               	movf	??_ProtocolManager,w
  6979  01EC  00D0               	movwf	_RxFrameDecodeState
  6980                           
  6981                           ;CommunicationManager.c: 140: lowByteChar=EUSART_Read();
  6982  01ED  318D  258C  3180   	fcall	_EUSART_Read
  6983  01F0  0020               	movlb	0	; select bank0
  6984  01F1  00DF               	movwf	??_ProtocolManager
  6985  01F2  085F               	movf	??_ProtocolManager,w
  6986  01F3  00C2               	movwf	_lowByteChar
  6987                           
  6988                           ;CommunicationManager.c: 141: ChannelNumberChar=lowByteChar;
  6989  01F4  0842               	movf	_lowByteChar,w
  6990  01F5  00DF               	movwf	??_ProtocolManager
  6991  01F6  085F               	movf	??_ProtocolManager,w
  6992  01F7  00E6               	movwf	_ChannelNumberChar
  6993                           
  6994                           ;CommunicationManager.c: 142: ChannelNumber=char1bytetovalue(lowByteChar,&Checksum);
  6995  01F8  3056               	movlw	(low (_Checksum| 0))& (0+255)
  6996  01F9  00DF               	movwf	??_ProtocolManager
  6997  01FA  085F               	movf	??_ProtocolManager,w
  6998  01FB  00F5               	movwf	char1bytetovalue@cksum
  6999  01FC  0842               	movf	_lowByteChar,w
  7000  01FD  318E  2612         	fcall	_char1bytetovalue
  7001  01FF  0020               	movlb	0	; select bank0
  7002  0200  00E0               	movwf	??_ProtocolManager+1
  7003  0201  0860               	movf	??_ProtocolManager+1,w
  7004  0202  00C5               	movwf	_ChannelNumber
  7005                           
  7006                           ;CommunicationManager.c: 143: RxFrameDataLenCnt=RxFrameDataLenCnt + 1;
  7007  0203  084E               	movf	_RxFrameDataLenCnt,w
  7008  0204  3E01               	addlw	1
  7009  0205  00DF               	movwf	??_ProtocolManager
  7010  0206  085F               	movf	??_ProtocolManager,w
  7011  0207  00CE               	movwf	_RxFrameDataLenCnt
  7012                           
  7013                           ;CommunicationManager.c: 144: }
  7014  0208  0008               	return
  7015  0209                     l4200:	
  7016                           
  7017                           ;CommunicationManager.c: 145: else if(RxFrameType=='L')
  7018  0209  304C               	movlw	76
  7019  020A  0668               	xorwf	_RxFrameType,w
  7020  020B  1D03               	btfss	3,2
  7021  020C  2A5D               	goto	l4222
  7022                           
  7023                           ;CommunicationManager.c: 146: {
  7024                           ;CommunicationManager.c: 147: RxFrameDecodeState=4;
  7025  020D  3004               	movlw	4
  7026  020E  00DF               	movwf	??_ProtocolManager
  7027  020F  085F               	movf	??_ProtocolManager,w
  7028  0210  00D0               	movwf	_RxFrameDecodeState
  7029                           
  7030                           ;CommunicationManager.c: 148: SetLEDcolor=EUSART_Read();
  7031  0211  318D  258C  3180   	fcall	_EUSART_Read
  7032  0214  0020               	movlb	0	; select bank0
  7033  0215  00DF               	movwf	??_ProtocolManager
  7034  0216  085F               	movf	??_ProtocolManager,w
  7035  0217  00E7               	movwf	_SetLEDcolor
  7036                           
  7037                           ;CommunicationManager.c: 149: Checksum+=SetLEDcolor;
  7038  0218  0867               	movf	_SetLEDcolor,w
  7039  0219  00DF               	movwf	??_ProtocolManager
  7040  021A  085F               	movf	??_ProtocolManager,w
  7041  021B  07D6               	addwf	_Checksum,f
  7042                           
  7043                           ;CommunicationManager.c: 150: highByteChar=EUSART_Read();
  7044  021C  318D  258C  3180   	fcall	_EUSART_Read
  7045  021F  0020               	movlb	0	; select bank0
  7046  0220  00DF               	movwf	??_ProtocolManager
  7047  0221  085F               	movf	??_ProtocolManager,w
  7048  0222  00C3               	movwf	_highByteChar
  7049                           
  7050                           ;CommunicationManager.c: 151: lowByteChar=EUSART_Read();
  7051  0223  318D  258C  3180   	fcall	_EUSART_Read
  7052  0226  0020               	movlb	0	; select bank0
  7053  0227  00DF               	movwf	??_ProtocolManager
  7054  0228  085F               	movf	??_ProtocolManager,w
  7055  0229  00C2               	movwf	_lowByteChar
  7056                           
  7057                           ;CommunicationManager.c: 152: SetLedONDurationSec=(unsigned char)char2bytetovalue(highBy
      +                          teChar,lowByteChar,&Checksum);
  7058  022A  0842               	movf	_lowByteChar,w
  7059  022B  00DF               	movwf	??_ProtocolManager
  7060  022C  085F               	movf	??_ProtocolManager,w
  7061  022D  00F5               	movwf	char2bytetovalue@LowBchar
  7062  022E  3056               	movlw	(low (_Checksum| 0))& (0+255)
  7063  022F  00E0               	movwf	??_ProtocolManager+1
  7064  0230  0860               	movf	??_ProtocolManager+1,w
  7065  0231  00F6               	movwf	char2bytetovalue@cksum
  7066  0232  0843               	movf	_highByteChar,w
  7067  0233  318E  26AF  3180   	fcall	_char2bytetovalue
  7068  0236  0020               	movlb	0	; select bank0
  7069  0237  00E1               	movwf	??_ProtocolManager+2
  7070  0238  0861               	movf	??_ProtocolManager+2,w
  7071  0239  00CD               	movwf	_SetLedONDurationSec
  7072                           
  7073                           ;CommunicationManager.c: 153: highByteChar=EUSART_Read();
  7074  023A  318D  258C  3180   	fcall	_EUSART_Read
  7075  023D  0020               	movlb	0	; select bank0
  7076  023E  00DF               	movwf	??_ProtocolManager
  7077  023F  085F               	movf	??_ProtocolManager,w
  7078  0240  00C3               	movwf	_highByteChar
  7079                           
  7080                           ;CommunicationManager.c: 154: lowByteChar=EUSART_Read();
  7081  0241  318D  258C  3180   	fcall	_EUSART_Read
  7082  0244  0020               	movlb	0	; select bank0
  7083  0245  00DF               	movwf	??_ProtocolManager
  7084  0246  085F               	movf	??_ProtocolManager,w
  7085  0247  00C2               	movwf	_lowByteChar
  7086                           
  7087                           ;CommunicationManager.c: 155: SetLedONNumBlink=(unsigned char)char2bytetovalue(highByteC
      +                          har,lowByteChar,&Checksum);
  7088  0248  0842               	movf	_lowByteChar,w
  7089  0249  00DF               	movwf	??_ProtocolManager
  7090  024A  085F               	movf	??_ProtocolManager,w
  7091  024B  00F5               	movwf	char2bytetovalue@LowBchar
  7092  024C  3056               	movlw	(low (_Checksum| 0))& (0+255)
  7093  024D  00E0               	movwf	??_ProtocolManager+1
  7094  024E  0860               	movf	??_ProtocolManager+1,w
  7095  024F  00F6               	movwf	char2bytetovalue@cksum
  7096  0250  0843               	movf	_highByteChar,w
  7097  0251  318E  26AF         	fcall	_char2bytetovalue
  7098  0253  0020               	movlb	0	; select bank0
  7099  0254  00E1               	movwf	??_ProtocolManager+2
  7100  0255  0861               	movf	??_ProtocolManager+2,w
  7101  0256  00CC               	movwf	_SetLedONNumBlink
  7102                           
  7103                           ;CommunicationManager.c: 156: RxFrameDataLenCnt=RxFrameDataLenCnt + 5;
  7104  0257  084E               	movf	_RxFrameDataLenCnt,w
  7105  0258  3E05               	addlw	5
  7106  0259  00DF               	movwf	??_ProtocolManager
  7107  025A  085F               	movf	??_ProtocolManager,w
  7108  025B  00CE               	movwf	_RxFrameDataLenCnt
  7109                           
  7110                           ;CommunicationManager.c: 157: }
  7111  025C  0008               	return
  7112  025D                     l4222:	
  7113                           
  7114                           ;CommunicationManager.c: 158: else if(RxFrameType=='B')
  7115  025D  3042               	movlw	66
  7116  025E  0668               	xorwf	_RxFrameType,w
  7117  025F  1D03               	btfss	3,2
  7118  0260  2AA6               	goto	l4240
  7119                           
  7120                           ;CommunicationManager.c: 159: {
  7121                           ;CommunicationManager.c: 160: RxFrameDecodeState=4;
  7122  0261  3004               	movlw	4
  7123  0262  00DF               	movwf	??_ProtocolManager
  7124  0263  085F               	movf	??_ProtocolManager,w
  7125  0264  00D0               	movwf	_RxFrameDecodeState
  7126                           
  7127                           ;CommunicationManager.c: 161: highByteChar=EUSART_Read();
  7128  0265  318D  258C  3180   	fcall	_EUSART_Read
  7129  0268  0020               	movlb	0	; select bank0
  7130  0269  00DF               	movwf	??_ProtocolManager
  7131  026A  085F               	movf	??_ProtocolManager,w
  7132  026B  00C3               	movwf	_highByteChar
  7133                           
  7134                           ;CommunicationManager.c: 162: lowByteChar=EUSART_Read();
  7135  026C  318D  258C  3180   	fcall	_EUSART_Read
  7136  026F  0020               	movlb	0	; select bank0
  7137  0270  00DF               	movwf	??_ProtocolManager
  7138  0271  085F               	movf	??_ProtocolManager,w
  7139  0272  00C2               	movwf	_lowByteChar
  7140                           
  7141                           ;CommunicationManager.c: 163: SetBuzzDurationSec=(unsigned char)char2bytetovalue(highByt
      +                          eChar,lowByteChar,&Checksum);
  7142  0273  0842               	movf	_lowByteChar,w
  7143  0274  00DF               	movwf	??_ProtocolManager
  7144  0275  085F               	movf	??_ProtocolManager,w
  7145  0276  00F5               	movwf	char2bytetovalue@LowBchar
  7146  0277  3056               	movlw	(low (_Checksum| 0))& (0+255)
  7147  0278  00E0               	movwf	??_ProtocolManager+1
  7148  0279  0860               	movf	??_ProtocolManager+1,w
  7149  027A  00F6               	movwf	char2bytetovalue@cksum
  7150  027B  0843               	movf	_highByteChar,w
  7151  027C  318E  26AF  3180   	fcall	_char2bytetovalue
  7152  027F  0020               	movlb	0	; select bank0
  7153  0280  00E1               	movwf	??_ProtocolManager+2
  7154  0281  0861               	movf	??_ProtocolManager+2,w
  7155  0282  00CB               	movwf	_SetBuzzDurationSec
  7156                           
  7157                           ;CommunicationManager.c: 164: highByteChar=EUSART_Read();
  7158  0283  318D  258C  3180   	fcall	_EUSART_Read
  7159  0286  0020               	movlb	0	; select bank0
  7160  0287  00DF               	movwf	??_ProtocolManager
  7161  0288  085F               	movf	??_ProtocolManager,w
  7162  0289  00C3               	movwf	_highByteChar
  7163                           
  7164                           ;CommunicationManager.c: 165: lowByteChar=EUSART_Read();
  7165  028A  318D  258C  3180   	fcall	_EUSART_Read
  7166  028D  0020               	movlb	0	; select bank0
  7167  028E  00DF               	movwf	??_ProtocolManager
  7168  028F  085F               	movf	??_ProtocolManager,w
  7169  0290  00C2               	movwf	_lowByteChar
  7170                           
  7171                           ;CommunicationManager.c: 166: SetBuzzNumBeep=(unsigned char)char2bytetovalue(highByteCha
      +                          r,lowByteChar,&Checksum);
  7172  0291  0842               	movf	_lowByteChar,w
  7173  0292  00DF               	movwf	??_ProtocolManager
  7174  0293  085F               	movf	??_ProtocolManager,w
  7175  0294  00F5               	movwf	char2bytetovalue@LowBchar
  7176  0295  3056               	movlw	(low (_Checksum| 0))& (0+255)
  7177  0296  00E0               	movwf	??_ProtocolManager+1
  7178  0297  0860               	movf	??_ProtocolManager+1,w
  7179  0298  00F6               	movwf	char2bytetovalue@cksum
  7180  0299  0843               	movf	_highByteChar,w
  7181  029A  318E  26AF         	fcall	_char2bytetovalue
  7182  029C  0020               	movlb	0	; select bank0
  7183  029D  00E1               	movwf	??_ProtocolManager+2
  7184  029E  0861               	movf	??_ProtocolManager+2,w
  7185  029F  00CA               	movwf	_SetBuzzNumBeep
  7186                           
  7187                           ;CommunicationManager.c: 167: RxFrameDataLenCnt=RxFrameDataLenCnt + 4;
  7188  02A0  084E               	movf	_RxFrameDataLenCnt,w
  7189  02A1  3E04               	addlw	4
  7190  02A2  00DF               	movwf	??_ProtocolManager
  7191  02A3  085F               	movf	??_ProtocolManager,w
  7192  02A4  00CE               	movwf	_RxFrameDataLenCnt
  7193                           
  7194                           ;CommunicationManager.c: 168: }
  7195  02A5  0008               	return
  7196  02A6                     l4240:	
  7197                           
  7198                           ;CommunicationManager.c: 169: else if(RxFrameType=='F')
  7199  02A6  3046               	movlw	70
  7200  02A7  0668               	xorwf	_RxFrameType,w
  7201  02A8  1D03               	btfss	3,2
  7202  02A9  2AD1               	goto	l4252
  7203                           
  7204                           ;CommunicationManager.c: 170: {
  7205                           ;CommunicationManager.c: 171: RxFrameDecodeState=4;
  7206  02AA  3004               	movlw	4
  7207  02AB  00DF               	movwf	??_ProtocolManager
  7208  02AC  085F               	movf	??_ProtocolManager,w
  7209  02AD  00D0               	movwf	_RxFrameDecodeState
  7210                           
  7211                           ;CommunicationManager.c: 172: highByteChar=EUSART_Read();
  7212  02AE  318D  258C  3180   	fcall	_EUSART_Read
  7213  02B1  0020               	movlb	0	; select bank0
  7214  02B2  00DF               	movwf	??_ProtocolManager
  7215  02B3  085F               	movf	??_ProtocolManager,w
  7216  02B4  00C3               	movwf	_highByteChar
  7217                           
  7218                           ;CommunicationManager.c: 173: lowByteChar=EUSART_Read();
  7219  02B5  318D  258C  3180   	fcall	_EUSART_Read
  7220  02B8  0020               	movlb	0	; select bank0
  7221  02B9  00DF               	movwf	??_ProtocolManager
  7222  02BA  085F               	movf	??_ProtocolManager,w
  7223  02BB  00C2               	movwf	_lowByteChar
  7224                           
  7225                           ;CommunicationManager.c: 174: SetFANOnDurationSec=(unsigned char)char2bytetovalue(highBy
      +                          teChar,lowByteChar,&Checksum);
  7226  02BC  0842               	movf	_lowByteChar,w
  7227  02BD  00DF               	movwf	??_ProtocolManager
  7228  02BE  085F               	movf	??_ProtocolManager,w
  7229  02BF  00F5               	movwf	char2bytetovalue@LowBchar
  7230  02C0  3056               	movlw	(low (_Checksum| 0))& (0+255)
  7231  02C1  00E0               	movwf	??_ProtocolManager+1
  7232  02C2  0860               	movf	??_ProtocolManager+1,w
  7233  02C3  00F6               	movwf	char2bytetovalue@cksum
  7234  02C4  0843               	movf	_highByteChar,w
  7235  02C5  318E  26AF         	fcall	_char2bytetovalue
  7236  02C7  0020               	movlb	0	; select bank0
  7237  02C8  00E1               	movwf	??_ProtocolManager+2
  7238  02C9  0861               	movf	??_ProtocolManager+2,w
  7239  02CA  00C9               	movwf	_SetFANOnDurationSec
  7240                           
  7241                           ;CommunicationManager.c: 175: RxFrameDataLenCnt=RxFrameDataLenCnt + 2;
  7242  02CB  084E               	movf	_RxFrameDataLenCnt,w
  7243  02CC  3E02               	addlw	2
  7244  02CD  00DF               	movwf	??_ProtocolManager
  7245  02CE  085F               	movf	??_ProtocolManager,w
  7246  02CF  00CE               	movwf	_RxFrameDataLenCnt
  7247                           
  7248                           ;CommunicationManager.c: 176: }
  7249  02D0  0008               	return
  7250  02D1                     l4252:	
  7251                           
  7252                           ;CommunicationManager.c: 177: else
  7253                           ;CommunicationManager.c: 178: {
  7254                           ;CommunicationManager.c: 179: RxFrameDataLenCnt=0;
  7255  02D1  01CE               	clrf	_RxFrameDataLenCnt
  7256                           
  7257                           ;CommunicationManager.c: 180: RxFrameDecodeState=0;
  7258  02D2  01D0               	clrf	_RxFrameDecodeState
  7259                           
  7260                           ;CommunicationManager.c: 181: }
  7261                           ;CommunicationManager.c: 182: break;
  7262  02D3  0008               	return
  7263  02D4                     l4254:	
  7264                           ;CommunicationManager.c: 184: case 4:
  7265                           
  7266                           
  7267                           ;CommunicationManager.c: 185: highByteChar=EUSART_Read();
  7268  02D4  318D  258C  3180   	fcall	_EUSART_Read
  7269  02D7  0020               	movlb	0	; select bank0
  7270  02D8  00DF               	movwf	??_ProtocolManager
  7271  02D9  085F               	movf	??_ProtocolManager,w
  7272  02DA  00C3               	movwf	_highByteChar
  7273                           
  7274                           ;CommunicationManager.c: 186: lowByteChar=EUSART_Read();
  7275  02DB  318D  258C  3180   	fcall	_EUSART_Read
  7276  02DE  0020               	movlb	0	; select bank0
  7277  02DF  00DF               	movwf	??_ProtocolManager
  7278  02E0  085F               	movf	??_ProtocolManager,w
  7279  02E1  00C2               	movwf	_lowByteChar
  7280                           
  7281                           ;CommunicationManager.c: 187: RXChecksum=(unsigned char)char2bytetovalue(highByteChar,lo
      +                          wByteChar,&k);
  7282  02E2  0842               	movf	_lowByteChar,w
  7283  02E3  00DF               	movwf	??_ProtocolManager
  7284  02E4  085F               	movf	??_ProtocolManager,w
  7285  02E5  00F5               	movwf	char2bytetovalue@LowBchar
  7286  02E6  3063               	movlw	(low (ProtocolManager@k| 0))& (0+255)
  7287  02E7  00E0               	movwf	??_ProtocolManager+1
  7288  02E8  0860               	movf	??_ProtocolManager+1,w
  7289  02E9  00F6               	movwf	char2bytetovalue@cksum
  7290  02EA  0843               	movf	_highByteChar,w
  7291  02EB  318E  26AF  3180   	fcall	_char2bytetovalue
  7292  02EE  0020               	movlb	0	; select bank0
  7293  02EF  00E1               	movwf	??_ProtocolManager+2
  7294  02F0  0861               	movf	??_ProtocolManager+2,w
  7295  02F1  00C4               	movwf	_RXChecksum
  7296                           
  7297                           ;CommunicationManager.c: 188: RxFrameDataLenCnt=RxFrameDataLenCnt+2;
  7298  02F2  084E               	movf	_RxFrameDataLenCnt,w
  7299  02F3  3E02               	addlw	2
  7300  02F4  00DF               	movwf	??_ProtocolManager
  7301  02F5  085F               	movf	??_ProtocolManager,w
  7302  02F6  00CE               	movwf	_RxFrameDataLenCnt
  7303                           
  7304                           ;CommunicationManager.c: 189: Checksum=~Checksum;
  7305  02F7  09D6               	comf	_Checksum,f
  7306                           
  7307                           ;CommunicationManager.c: 190: if((RXChecksum==(Checksum)) && (EUSART_Read()=='#') && (EU
      +                          SART_Read()=='\r') && (EUSART_Read()=='\n'))
  7308  02F8  0844               	movf	_RXChecksum,w
  7309  02F9  0656               	xorwf	_Checksum,w
  7310  02FA  1D03               	skipz
  7311  02FB  2B19               	goto	l4274
  7312  02FC  318D  258C  3180   	fcall	_EUSART_Read
  7313  02FF  3A23               	xorlw	35
  7314  0300  1D03               	skipz
  7315  0301  2B19               	goto	l4274
  7316  0302  318D  258C  3180   	fcall	_EUSART_Read
  7317  0305  3A0D               	xorlw	13
  7318  0306  1D03               	skipz
  7319  0307  2B19               	goto	l4274
  7320  0308  318D  258C  3180   	fcall	_EUSART_Read
  7321  030B  3A0A               	xorlw	10
  7322  030C  1D03               	skipz
  7323  030D  2B19               	goto	l4274
  7324                           
  7325                           ;CommunicationManager.c: 191: {
  7326                           ;CommunicationManager.c: 192: RxFrameDecodeState=5;
  7327  030E  3005               	movlw	5
  7328  030F  0020               	movlb	0	; select bank0
  7329  0310  00DF               	movwf	??_ProtocolManager
  7330  0311  085F               	movf	??_ProtocolManager,w
  7331  0312  00D0               	movwf	_RxFrameDecodeState
  7332                           
  7333                           ;CommunicationManager.c: 193: RxFrameDataLenCnt=RxFrameDataLenCnt+3;
  7334  0313  084E               	movf	_RxFrameDataLenCnt,w
  7335  0314  3E03               	addlw	3
  7336  0315  00DF               	movwf	??_ProtocolManager
  7337  0316  085F               	movf	??_ProtocolManager,w
  7338  0317  00CE               	movwf	_RxFrameDataLenCnt
  7339                           
  7340                           ;CommunicationManager.c: 194: }
  7341  0318  0008               	return
  7342  0319                     l4274:	
  7343                           
  7344                           ;CommunicationManager.c: 195: else
  7345                           ;CommunicationManager.c: 196: {
  7346                           ;CommunicationManager.c: 197: RxFrameDataLenCnt=0;
  7347  0319  0020               	movlb	0	; select bank0
  7348  031A  01CE               	clrf	_RxFrameDataLenCnt
  7349                           
  7350                           ;CommunicationManager.c: 198: RxFrameDecodeState=0;
  7351  031B  01D0               	clrf	_RxFrameDecodeState
  7352                           
  7353                           ;CommunicationManager.c: 199: }
  7354                           ;CommunicationManager.c: 201: break;
  7355  031C  0008               	return
  7356  031D                     l4276:	
  7357                           ;CommunicationManager.c: 203: case 5:
  7358                           
  7359                           
  7360                           ;CommunicationManager.c: 204: if(RxFrameDataLenCnt==RxFrameDataLen)
  7361  031D  084E               	movf	_RxFrameDataLenCnt,w
  7362  031E  064F               	xorwf	_RxFrameDataLen,w
  7363  031F  1D03               	skipz
  7364  0320  2C6C               	goto	l4392
  7365                           
  7366                           ;CommunicationManager.c: 205: {
  7367                           ;CommunicationManager.c: 206: if(RxFrameType=='r')
  7368  0321  3072               	movlw	114
  7369  0322  0668               	xorwf	_RxFrameType,w
  7370  0323  1D03               	btfss	3,2
  7371  0324  2B54               	goto	l4292
  7372                           
  7373                           ;CommunicationManager.c: 207: {
  7374                           ;CommunicationManager.c: 208: for(k=0;k<eepromReadLen;k++)
  7375  0325  01E3               	clrf	ProtocolManager@k
  7376  0326                     l4288:	
  7377  0326  0847               	movf	_eepromReadLen,w
  7378  0327  0263               	subwf	ProtocolManager@k,w
  7379  0328  1803               	btfsc	3,0
  7380  0329  2B47               	goto	l4290
  7381                           
  7382                           ;CommunicationManager.c: 209: {
  7383                           ;CommunicationManager.c: 210: eepromReadAddr=eepromReadAddr | 0xF000;
  7384  032A  3000               	movlw	0
  7385  032B  042A               	iorwf	_eepromReadAddr,w
  7386  032C  00AA               	movwf	_eepromReadAddr
  7387  032D  30F0               	movlw	240
  7388  032E  042B               	iorwf	_eepromReadAddr+1,w
  7389  032F  00AB               	movwf	_eepromReadAddr+1
  7390                           
  7391                           ;CommunicationManager.c: 211: eepromReadData[k]=DATAEE_ReadByte(eepromReadAddr+k);
  7392  0330  0863               	movf	ProtocolManager@k,w
  7393  0331  072A               	addwf	_eepromReadAddr,w
  7394  0332  00F2               	movwf	DATAEE_ReadByte@bAdd
  7395  0333  082B               	movf	_eepromReadAddr+1,w
  7396  0334  1803               	skipnc
  7397  0335  0A2B               	incf	_eepromReadAddr+1,w
  7398  0336  00F3               	movwf	DATAEE_ReadByte@bAdd+1
  7399  0337  318D  25B5  3180   	fcall	_DATAEE_ReadByte
  7400  033A  0020               	movlb	0	; select bank0
  7401  033B  00DF               	movwf	??_ProtocolManager
  7402  033C  0863               	movf	ProtocolManager@k,w
  7403  033D  3EBA               	addlw	(low (_eepromReadData| 0))& (0+255)
  7404  033E  0086               	movwf	6
  7405  033F  0187               	clrf	7
  7406  0340  085F               	movf	??_ProtocolManager,w
  7407  0341  0081               	movwf	1
  7408  0342  3001               	movlw	1
  7409  0343  00DF               	movwf	??_ProtocolManager
  7410  0344  085F               	movf	??_ProtocolManager,w
  7411  0345  07E3               	addwf	ProtocolManager@k,f
  7412  0346  2B26               	goto	l4288
  7413  0347                     l4290:	
  7414                           
  7415                           ;CommunicationManager.c: 212: }
  7416                           ;CommunicationManager.c: 213: PackageTxResponseData(RxFrameType,eepromReadData,eepromRea
      +                          dLen);
  7417  0347  30BA               	movlw	(low (_eepromReadData| 0))& (0+255)
  7418  0348  00DF               	movwf	??_ProtocolManager
  7419  0349  085F               	movf	??_ProtocolManager,w
  7420  034A  00D9               	movwf	PackageTxResponseData@data
  7421  034B  0847               	movf	_eepromReadLen,w
  7422  034C  00E0               	movwf	??_ProtocolManager+1
  7423  034D  0860               	movf	??_ProtocolManager+1,w
  7424  034E  00DA               	movwf	PackageTxResponseData@dataLen
  7425  034F  0868               	movf	_RxFrameType,w
  7426  0350  3184  247E  3180   	fcall	_PackageTxResponseData
  7427                           
  7428                           ;CommunicationManager.c: 214: }
  7429  0353  2C6C               	goto	l4392
  7430  0354                     l4292:	
  7431                           
  7432                           ;CommunicationManager.c: 215: else if(RxFrameType=='w')
  7433  0354  3077               	movlw	119
  7434  0355  0020               	movlb	0	; select bank0
  7435  0356  0668               	xorwf	_RxFrameType,w
  7436  0357  1D03               	btfss	3,2
  7437  0358  2B81               	goto	l4306
  7438                           
  7439                           ;CommunicationManager.c: 216: {
  7440                           ;CommunicationManager.c: 217: for(k=0;k<eepromWriteLen;k++)
  7441  0359  01E3               	clrf	ProtocolManager@k
  7442  035A                     l4302:	
  7443  035A  0848               	movf	_eepromWriteLen,w
  7444  035B  0263               	subwf	ProtocolManager@k,w
  7445  035C  1803               	btfsc	3,0
  7446  035D  2B7C               	goto	l4304
  7447                           
  7448                           ;CommunicationManager.c: 218: {
  7449                           ;CommunicationManager.c: 219: eepromWriteAddr=eepromWriteAddr | 0xF000;
  7450  035E  3000               	movlw	0
  7451  035F  042C               	iorwf	_eepromWriteAddr,w
  7452  0360  00AC               	movwf	_eepromWriteAddr
  7453  0361  30F0               	movlw	240
  7454  0362  042D               	iorwf	_eepromWriteAddr+1,w
  7455  0363  00AD               	movwf	_eepromWriteAddr+1
  7456                           
  7457                           ;CommunicationManager.c: 220: DATAEE_WriteByte((eepromWriteAddr+k), eepromWriteData[k]);
  7458  0364  0863               	movf	ProtocolManager@k,w
  7459  0365  072C               	addwf	_eepromWriteAddr,w
  7460  0366  00F2               	movwf	DATAEE_WriteByte@bAdd
  7461  0367  082D               	movf	_eepromWriteAddr+1,w
  7462  0368  1803               	skipnc
  7463  0369  0A2D               	incf	_eepromWriteAddr+1,w
  7464  036A  00F3               	movwf	DATAEE_WriteByte@bAdd+1
  7465  036B  0863               	movf	ProtocolManager@k,w
  7466  036C  3EA0               	addlw	(low (_eepromWriteData| 0))& (0+255)
  7467  036D  0086               	movwf	6
  7468  036E  0187               	clrf	7
  7469  036F  0801               	movf	1,w
  7470  0370  00DF               	movwf	??_ProtocolManager
  7471  0371  085F               	movf	??_ProtocolManager,w
  7472  0372  00F4               	movwf	DATAEE_WriteByte@bData
  7473  0373  318E  2674  3180   	fcall	_DATAEE_WriteByte
  7474  0376  3001               	movlw	1
  7475  0377  0020               	movlb	0	; select bank0
  7476  0378  00DF               	movwf	??_ProtocolManager
  7477  0379  085F               	movf	??_ProtocolManager,w
  7478  037A  07E3               	addwf	ProtocolManager@k,f
  7479  037B  2B5A               	goto	l4302
  7480  037C                     l4304:	
  7481                           
  7482                           ;CommunicationManager.c: 221: }
  7483                           ;CommunicationManager.c: 222: PackageTxResponseACK(RxFrameType);
  7484  037C  0868               	movf	_RxFrameType,w
  7485  037D  3185  25F8  3180   	fcall	_PackageTxResponseACK
  7486                           
  7487                           ;CommunicationManager.c: 223: }
  7488  0380  2C6C               	goto	l4392
  7489  0381                     l4306:	
  7490                           
  7491                           ;CommunicationManager.c: 224: else if(RxFrameType=='A')
  7492  0381  3041               	movlw	65
  7493  0382  0020               	movlb	0	; select bank0
  7494  0383  0668               	xorwf	_RxFrameType,w
  7495  0384  1D03               	btfss	3,2
  7496  0385  2BAC               	goto	l4322
  7497                           
  7498                           ;CommunicationManager.c: 225: {
  7499                           ;CommunicationManager.c: 226: if((ChannelNumberChar=='0')||(ChannelNumberChar=='*'))
  7500  0386  3030               	movlw	48
  7501  0387  0666               	xorwf	_ChannelNumberChar,w
  7502  0388  1903               	btfsc	3,2
  7503  0389  2B8E               	goto	l4312
  7504  038A  302A               	movlw	42
  7505  038B  0666               	xorwf	_ChannelNumberChar,w
  7506  038C  1D03               	btfss	3,2
  7507  038D  2C68               	goto	l4390
  7508  038E                     l4312:	
  7509                           
  7510                           ;CommunicationManager.c: 227: {
  7511                           ;CommunicationManager.c: 229: AnalogSenseRaw=ADC_GetConversion(TEMP_J6_4_ANA2);
  7512  038E  3002               	movlw	2
  7513  038F  318E  2627  3180   	fcall	_ADC_GetConversion
  7514  0392  0873               	movf	?_ADC_GetConversion+1,w
  7515  0393  0020               	movlb	0	; select bank0
  7516  0394  00A9               	movwf	_AnalogSenseRaw+1
  7517  0395  0872               	movf	?_ADC_GetConversion,w
  7518  0396  00A8               	movwf	_AnalogSenseRaw
  7519                           
  7520                           ;CommunicationManager.c: 230: AnalogSenseRawByte[0]=(unsigned char)(AnalogSenseRaw & 0x0
      +                          0FF);
  7521  0397  0828               	movf	_AnalogSenseRaw,w
  7522  0398  00DF               	movwf	??_ProtocolManager
  7523  0399  085F               	movf	??_ProtocolManager,w
  7524  039A  00D4               	movwf	_AnalogSenseRawByte
  7525                           
  7526                           ;CommunicationManager.c: 231: AnalogSenseRawByte[1]=(unsigned char)((AnalogSenseRaw>>8) 
      +                          & 0x00FF);
  7527  039B  0829               	movf	_AnalogSenseRaw+1,w
  7528  039C  00DF               	movwf	??_ProtocolManager
  7529  039D  085F               	movf	??_ProtocolManager,w
  7530  039E  00D5               	movwf	_AnalogSenseRawByte+1
  7531                           
  7532                           ;CommunicationManager.c: 232: PackageTxResponseData(RxFrameType,AnalogSenseRawByte,2);
  7533  039F  3054               	movlw	(low (_AnalogSenseRawByte| 0))& (0+255)
  7534  03A0  00DF               	movwf	??_ProtocolManager
  7535  03A1  085F               	movf	??_ProtocolManager,w
  7536  03A2  00D9               	movwf	PackageTxResponseData@data
  7537  03A3  3002               	movlw	2
  7538  03A4  00E0               	movwf	??_ProtocolManager+1
  7539  03A5  0860               	movf	??_ProtocolManager+1,w
  7540  03A6  00DA               	movwf	PackageTxResponseData@dataLen
  7541  03A7  0868               	movf	_RxFrameType,w
  7542  03A8  3184  247E  3180   	fcall	_PackageTxResponseData
  7543  03AB  2C6C               	goto	l4392
  7544  03AC                     l4322:	
  7545                           ;CommunicationManager.c: 237: }
  7546                           ;CommunicationManager.c: 238: }
  7547                           
  7548                           ;CommunicationManager.c: 234: else
  7549                           ;CommunicationManager.c: 235: {
  7550                           ;CommunicationManager.c: 236: PackageTxResponseNACK(RxFrameType);
  7551                           
  7552                           ;CommunicationManager.c: 233: }
  7553                           
  7554                           
  7555                           ;CommunicationManager.c: 239: else if(RxFrameType=='I')
  7556  03AC  3049               	movlw	73
  7557  03AD  0020               	movlb	0	; select bank0
  7558  03AE  0668               	xorwf	_RxFrameType,w
  7559  03AF  1D03               	btfss	3,2
  7560  03B0  2C10               	goto	l4358
  7561                           
  7562                           ;CommunicationManager.c: 240: {
  7563                           ;CommunicationManager.c: 241: DigitalIN=0x00;
  7564  03B1  01D7               	clrf	_DigitalIN
  7565                           
  7566                           ;CommunicationManager.c: 242: AnalogSenseRaw=ADC_GetConversion(MULTIFUNC_SW_ANC4);
  7567  03B2  3014               	movlw	20
  7568  03B3  318E  2627  3180   	fcall	_ADC_GetConversion
  7569  03B6  0873               	movf	?_ADC_GetConversion+1,w
  7570  03B7  0020               	movlb	0	; select bank0
  7571  03B8  00A9               	movwf	_AnalogSenseRaw+1
  7572  03B9  0872               	movf	?_ADC_GetConversion,w
  7573  03BA  00A8               	movwf	_AnalogSenseRaw
  7574                           
  7575                           ;CommunicationManager.c: 243: if(AnalogSenseRaw > 0x100)
  7576  03BB  3001               	movlw	1
  7577  03BC  0229               	subwf	_AnalogSenseRaw+1,w
  7578  03BD  3001               	movlw	1
  7579  03BE  1903               	skipnz
  7580  03BF  0228               	subwf	_AnalogSenseRaw,w
  7581  03C0  1803               	btfsc	3,0
  7582                           
  7583                           ;CommunicationManager.c: 244: DigitalIN |=0x01;
  7584  03C1  1457               	bsf	_DigitalIN,0
  7585                           
  7586                           ;CommunicationManager.c: 245: AnalogSenseRaw=ADC_GetConversion(DIR_SW_ANC5);
  7587  03C2  3015               	movlw	21
  7588  03C3  318E  2627  3180   	fcall	_ADC_GetConversion
  7589  03C6  0873               	movf	?_ADC_GetConversion+1,w
  7590  03C7  0020               	movlb	0	; select bank0
  7591  03C8  00A9               	movwf	_AnalogSenseRaw+1
  7592  03C9  0872               	movf	?_ADC_GetConversion,w
  7593  03CA  00A8               	movwf	_AnalogSenseRaw
  7594                           
  7595                           ;CommunicationManager.c: 246: if(AnalogSenseRaw > 0x100)
  7596  03CB  3001               	movlw	1
  7597  03CC  0229               	subwf	_AnalogSenseRaw+1,w
  7598  03CD  3001               	movlw	1
  7599  03CE  1903               	skipnz
  7600  03CF  0228               	subwf	_AnalogSenseRaw,w
  7601  03D0  1803               	btfsc	3,0
  7602                           
  7603                           ;CommunicationManager.c: 247: DigitalIN |=0x02;
  7604  03D1  14D7               	bsf	_DigitalIN,1
  7605                           
  7606                           ;CommunicationManager.c: 249: if(ChannelNumberChar=='0')
  7607  03D2  3030               	movlw	48
  7608  03D3  0666               	xorwf	_ChannelNumberChar,w
  7609  03D4  1D03               	btfss	3,2
  7610  03D5  2BE6               	goto	l4344
  7611                           
  7612                           ;CommunicationManager.c: 250: {
  7613                           ;CommunicationManager.c: 252: DigitalIN=DigitalIN&0x01;
  7614  03D6  0857               	movf	_DigitalIN,w
  7615  03D7  3901               	andlw	1
  7616  03D8  00DF               	movwf	??_ProtocolManager
  7617  03D9  085F               	movf	??_ProtocolManager,w
  7618  03DA  00D7               	movwf	_DigitalIN
  7619                           
  7620                           ;CommunicationManager.c: 253: PackageTxResponseData(RxFrameType,&DigitalIN,1);
  7621  03DB  3057               	movlw	(low (_DigitalIN| 0))& (0+255)
  7622  03DC  00DF               	movwf	??_ProtocolManager
  7623  03DD  085F               	movf	??_ProtocolManager,w
  7624  03DE  00D9               	movwf	PackageTxResponseData@data
  7625  03DF  01DA               	clrf	PackageTxResponseData@dataLen
  7626  03E0  0ADA               	incf	PackageTxResponseData@dataLen,f
  7627  03E1  0868               	movf	_RxFrameType,w
  7628  03E2  3184  247E  3180   	fcall	_PackageTxResponseData
  7629                           
  7630                           ;CommunicationManager.c: 254: }
  7631  03E5  2C6C               	goto	l4392
  7632  03E6                     l4344:	
  7633                           
  7634                           ;CommunicationManager.c: 255: else if(ChannelNumberChar=='1')
  7635  03E6  3031               	movlw	49
  7636  03E7  0020               	movlb	0	; select bank0
  7637  03E8  0666               	xorwf	_ChannelNumberChar,w
  7638  03E9  1D03               	btfss	3,2
  7639  03EA  2BFB               	goto	l4350
  7640                           
  7641                           ;CommunicationManager.c: 256: {
  7642                           ;CommunicationManager.c: 258: DigitalIN=(DigitalIN>>1)&0x01;
  7643  03EB  3657               	lsrf	_DigitalIN,w
  7644  03EC  3901               	andlw	1
  7645  03ED  00DF               	movwf	??_ProtocolManager
  7646  03EE  085F               	movf	??_ProtocolManager,w
  7647  03EF  00D7               	movwf	_DigitalIN
  7648                           
  7649                           ;CommunicationManager.c: 259: PackageTxResponseData(RxFrameType,&DigitalIN,1);
  7650  03F0  3057               	movlw	(low (_DigitalIN| 0))& (0+255)
  7651  03F1  00DF               	movwf	??_ProtocolManager
  7652  03F2  085F               	movf	??_ProtocolManager,w
  7653  03F3  00D9               	movwf	PackageTxResponseData@data
  7654  03F4  01DA               	clrf	PackageTxResponseData@dataLen
  7655  03F5  0ADA               	incf	PackageTxResponseData@dataLen,f
  7656  03F6  0868               	movf	_RxFrameType,w
  7657  03F7  3184  247E  3180   	fcall	_PackageTxResponseData
  7658                           
  7659                           ;CommunicationManager.c: 260: }
  7660  03FA  2C6C               	goto	l4392
  7661  03FB                     l4350:	
  7662                           
  7663                           ;CommunicationManager.c: 261: else if(ChannelNumberChar=='*')
  7664  03FB  302A               	movlw	42
  7665  03FC  0020               	movlb	0	; select bank0
  7666  03FD  0666               	xorwf	_ChannelNumberChar,w
  7667  03FE  1D03               	btfss	3,2
  7668  03FF  2C68               	goto	l4390
  7669                           
  7670                           ;CommunicationManager.c: 262: {
  7671                           ;CommunicationManager.c: 265: DigitalIN=(DigitalIN)&0x03;
  7672  0400  0857               	movf	_DigitalIN,w
  7673  0401  3903               	andlw	3
  7674  0402  00DF               	movwf	??_ProtocolManager
  7675  0403  085F               	movf	??_ProtocolManager,w
  7676  0404  00D7               	movwf	_DigitalIN
  7677                           
  7678                           ;CommunicationManager.c: 266: PackageTxResponseData(RxFrameType,&DigitalIN,1);
  7679  0405  3057               	movlw	(low (_DigitalIN| 0))& (0+255)
  7680  0406  00DF               	movwf	??_ProtocolManager
  7681  0407  085F               	movf	??_ProtocolManager,w
  7682  0408  00D9               	movwf	PackageTxResponseData@data
  7683  0409  01DA               	clrf	PackageTxResponseData@dataLen
  7684  040A  0ADA               	incf	PackageTxResponseData@dataLen,f
  7685  040B  0868               	movf	_RxFrameType,w
  7686  040C  3184  247E  3180   	fcall	_PackageTxResponseData
  7687  040F  2C6C               	goto	l4392
  7688  0410                     l4358:	
  7689                           ;CommunicationManager.c: 271: }
  7690                           ;CommunicationManager.c: 272: }
  7691                           
  7692                           ;CommunicationManager.c: 268: else
  7693                           ;CommunicationManager.c: 269: {
  7694                           ;CommunicationManager.c: 270: PackageTxResponseNACK(RxFrameType);
  7695                           
  7696                           ;CommunicationManager.c: 267: }
  7697                           
  7698                           
  7699                           ;CommunicationManager.c: 273: else if(RxFrameType=='L')
  7700  0410  304C               	movlw	76
  7701  0411  0020               	movlb	0	; select bank0
  7702  0412  0668               	xorwf	_RxFrameType,w
  7703  0413  1903               	btfsc	3,2
  7704  0414  2C20               	goto	l4368
  7705  0415  2C40               	goto	l4376
  7706  0416                     l4362:	
  7707                           ;CommunicationManager.c: 276: {
  7708                           ;CommunicationManager.c: 277: case 'R':SetLEDcolor=0;break;
  7709                           
  7710                           ;CommunicationManager.c: 274: {
  7711                           ;CommunicationManager.c: 275: switch(SetLEDcolor)
  7712                           
  7713  0416  01E7               	clrf	_SetLEDcolor
  7714  0417  2C2B               	goto	l4370
  7715  0418                     l579:	
  7716                           ;CommunicationManager.c: 278: case 'G':SetLEDcolor=1;break;
  7717                           
  7718  0418  01E7               	clrf	_SetLEDcolor
  7719  0419  0AE7               	incf	_SetLEDcolor,f
  7720  041A  2C2B               	goto	l4370
  7721  041B                     l4364:	
  7722                           ;CommunicationManager.c: 279: case 'B':SetLEDcolor=2;break;
  7723                           
  7724  041B  3002               	movlw	2
  7725  041C  00DF               	movwf	??_ProtocolManager
  7726  041D  085F               	movf	??_ProtocolManager,w
  7727  041E  00E7               	movwf	_SetLEDcolor
  7728                           
  7729                           ;CommunicationManager.c: 280: }
  7730  041F  2C2B               	goto	l4370
  7731  0420                     l4368:	
  7732  0420  0867               	movf	_SetLEDcolor,w
  7733                           
  7734                           ; Switch size 1, requested type "space"
  7735                           ; Number of cases is 3, Range of values is 66 to 82
  7736                           ; switch strategies available:
  7737                           ; Name         Instructions Cycles
  7738                           ; simple_byte           10     6 (average)
  7739                           ; direct_byte           43     9 (fixed)
  7740                           ; jumptable            263     9 (fixed)
  7741                           ;	Chosen strategy is simple_byte
  7742  0421  3A42               	xorlw	66	; case 66
  7743  0422  1903               	skipnz
  7744  0423  2C1B               	goto	l4364
  7745  0424  3A05               	xorlw	5	; case 71
  7746  0425  1903               	skipnz
  7747  0426  2C18               	goto	l579
  7748  0427  3A15               	xorlw	21	; case 82
  7749  0428  1903               	skipnz
  7750  0429  2C16               	goto	l4362
  7751  042A  2C2B               	goto	l4370
  7752  042B                     l4370:	
  7753                           
  7754                           ;CommunicationManager.c: 283: if(LedONStartConfig(SetLEDcolor, SetLedONDurationSec, SetL
      +                          edONNumBlink) != 0)
  7755  042B  084D               	movf	_SetLedONDurationSec,w
  7756  042C  00DF               	movwf	??_ProtocolManager
  7757  042D  085F               	movf	??_ProtocolManager,w
  7758  042E  00D8               	movwf	LedONStartConfig@LedONDurationSec
  7759  042F  084C               	movf	_SetLedONNumBlink,w
  7760  0430  00E0               	movwf	??_ProtocolManager+1
  7761  0431  0860               	movf	??_ProtocolManager+1,w
  7762  0432  00D9               	movwf	LedONStartConfig@LedONNumBlink
  7763  0433  0867               	movf	_SetLEDcolor,w
  7764  0434  3186  26D9  3180   	fcall	_LedONStartConfig
  7765  0437  3A00               	xorlw	0
  7766  0438  1903               	skipnz
  7767  0439  2C68               	goto	l4390
  7768                           
  7769                           ;CommunicationManager.c: 284: PackageTxResponseACK(RxFrameType);
  7770  043A  0020               	movlb	0	; select bank0
  7771  043B  0868               	movf	_RxFrameType,w
  7772  043C  3185  25F8  3180   	fcall	_PackageTxResponseACK
  7773  043F  2C6C               	goto	l4392
  7774  0440                     l4376:	
  7775                           ;CommunicationManager.c: 287: }
  7776                           
  7777                           ;CommunicationManager.c: 285: else
  7778                           ;CommunicationManager.c: 286: PackageTxResponseNACK(RxFrameType);
  7779                           
  7780                           
  7781                           ;CommunicationManager.c: 288: else if(RxFrameType=='B')
  7782  0440  3042               	movlw	66
  7783  0441  0020               	movlb	0	; select bank0
  7784  0442  0668               	xorwf	_RxFrameType,w
  7785  0443  1D03               	btfss	3,2
  7786  0444  2C56               	goto	l4384
  7787                           
  7788                           ;CommunicationManager.c: 289: {
  7789                           ;CommunicationManager.c: 291: if(BuzzerStartConfig(SetBuzzDurationSec,SetBuzzNumBeep) !=
      +                           0)
  7790  0445  084A               	movf	_SetBuzzNumBeep,w
  7791  0446  00DF               	movwf	??_ProtocolManager
  7792  0447  085F               	movf	??_ProtocolManager,w
  7793  0448  00D8               	movwf	BuzzerStartConfig@BuzzNumBeep
  7794  0449  084B               	movf	_SetBuzzDurationSec,w
  7795  044A  3187  2798  3180   	fcall	_BuzzerStartConfig
  7796  044D  3A00               	xorlw	0
  7797  044E  1903               	skipnz
  7798  044F  2C68               	goto	l4390
  7799                           
  7800                           ;CommunicationManager.c: 292: PackageTxResponseACK(RxFrameType);
  7801  0450  0020               	movlb	0	; select bank0
  7802  0451  0868               	movf	_RxFrameType,w
  7803  0452  3185  25F8  3180   	fcall	_PackageTxResponseACK
  7804  0455  2C6C               	goto	l4392
  7805  0456                     l4384:	
  7806                           ;CommunicationManager.c: 295: }
  7807                           
  7808                           ;CommunicationManager.c: 293: else
  7809                           ;CommunicationManager.c: 294: PackageTxResponseNACK(RxFrameType);
  7810                           
  7811                           
  7812                           ;CommunicationManager.c: 296: else if(RxFrameType=='F')
  7813  0456  3046               	movlw	70
  7814  0457  0020               	movlb	0	; select bank0
  7815  0458  0668               	xorwf	_RxFrameType,w
  7816  0459  1D03               	btfss	3,2
  7817  045A  2C6C               	goto	l4392
  7818                           
  7819                           ;CommunicationManager.c: 297: {
  7820                           ;CommunicationManager.c: 299: if(FanStartConfig(SetFANOnDurationSec) != 0)
  7821  045B  0849               	movf	_SetFANOnDurationSec,w
  7822  045C  318E  2640  3180   	fcall	_FanStartConfig
  7823  045F  3A00               	xorlw	0
  7824  0460  1903               	skipnz
  7825  0461  2C68               	goto	l4390
  7826                           
  7827                           ;CommunicationManager.c: 300: PackageTxResponseACK(RxFrameType);
  7828  0462  0020               	movlb	0	; select bank0
  7829  0463  0868               	movf	_RxFrameType,w
  7830  0464  3185  25F8  3180   	fcall	_PackageTxResponseACK
  7831  0467  2C6C               	goto	l4392
  7832  0468                     l4390:	
  7833                           
  7834                           ;CommunicationManager.c: 301: else
  7835                           ;CommunicationManager.c: 302: PackageTxResponseNACK(RxFrameType);
  7836  0468  0020               	movlb	0	; select bank0
  7837  0469  0868               	movf	_RxFrameType,w
  7838  046A  3185  257E         	fcall	_PackageTxResponseNACK
  7839  046C                     l4392:	
  7840                           
  7841                           ;CommunicationManager.c: 303: }
  7842                           ;CommunicationManager.c: 305: }
  7843                           ;CommunicationManager.c: 307: RxFrameDataLenCnt=0;
  7844  046C  0020               	movlb	0	; select bank0
  7845  046D  01CE               	clrf	_RxFrameDataLenCnt
  7846                           
  7847                           ;CommunicationManager.c: 308: RxFrameDecodeState=0;
  7848  046E  01D0               	clrf	_RxFrameDecodeState
  7849                           
  7850                           ;CommunicationManager.c: 310: break;
  7851  046F  0008               	return
  7852  0470                     l4396:	
  7853                           ;CommunicationManager.c: 312: default:RxFrameDecodeState=0;
  7854                           
  7855  0470  01D0               	clrf	_RxFrameDecodeState
  7856                           
  7857                           ;CommunicationManager.c: 313: RxFrameDataLenCnt=0;
  7858  0471  01CE               	clrf	_RxFrameDataLenCnt
  7859                           
  7860                           ;CommunicationManager.c: 315: }
  7861                           
  7862                           ;CommunicationManager.c: 314: break;
  7863  0472  0008               	return
  7864  0473                     l4400:	
  7865  0473  0850               	movf	_RxFrameDecodeState,w
  7866                           
  7867                           ; Switch size 1, requested type "space"
  7868                           ; Number of cases is 6, Range of values is 0 to 5
  7869                           ; switch strategies available:
  7870                           ; Name         Instructions Cycles
  7871                           ; direct_byte           18     6 (fixed)
  7872                           ; simple_byte           19    10 (average)
  7873                           ; jumptable            260     6 (fixed)
  7874                           ;	Chosen strategy is direct_byte
  7875  0474  0084               	movwf	4
  7876  0475  3006               	movlw	6
  7877  0476  0204               	subwf	4,w
  7878  0477  1803               	skipnc
  7879  0478  2C70               	goto	l4396
  7880  0479  3188               	movlp	high S4474
  7881  047A  3504               	lslf	4,w
  7882  047B  3E20               	addlw	low S4474
  7883  047C  0082               	movwf	2
  7884  047D  0008               	return
  7885  047E                     __end_of_ProtocolManager:	
  7886                           
  7887                           	psect	swtext1
  7888  0820                     __pswtext1:	
  7889  0820                     S4474:	
  7890  0820  3180  283F         	ljmp	l4044
  7891  0822  3180  2854         	ljmp	l4054
  7892  0824  3180  288B         	ljmp	l4080
  7893  0826  3180  28B2         	ljmp	l4088
  7894  0828  3182  2AD4         	ljmp	l4254
  7895  082A  3183  2B1D         	ljmp	l4276
  7896                           
  7897                           	psect	text11
  7898  0EAF                     __ptext11:	
  7899 ;; *************** function _char2bytetovalue *****************
  7900 ;; Defined at:
  7901 ;;		line 370 in file "CommunicationManager.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;  highBchar       1    wreg     unsigned char 
  7904 ;;  LowBchar        1    5[COMMON] unsigned char 
  7905 ;;  cksum           1    6[COMMON] PTR unsigned char 
  7906 ;;		 -> Checksum(1), ProtocolManager@k(1), 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  highBchar       1    1[BANK0 ] unsigned char 
  7909 ;;  valuehex        1    0[BANK0 ] unsigned char 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  1    wreg      unsigned char 
  7912 ;; Registers used:
  7913 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7914 ;; Tracked objects:
  7915 ;;		On entry : 0/0
  7916 ;;		On exit  : 0/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7919 ;;      Params:         2       0       0       0       0       0       0       0
  7920 ;;      Locals:         0       2       0       0       0       0       0       0
  7921 ;;      Temps:          3       0       0       0       0       0       0       0
  7922 ;;      Totals:         5       2       0       0       0       0       0       0
  7923 ;;Total ram usage:        7 bytes
  7924 ;; Hardware stack levels used:    1
  7925 ;; Hardware stack levels required when called:    7
  7926 ;; This function calls:
  7927 ;;		_chartovalue
  7928 ;; This function is called by:
  7929 ;;		_ProtocolManager
  7930 ;; This function uses a non-reentrant model
  7931 ;;
  7932                           
  7933                           
  7934                           ;psect for function _char2bytetovalue
  7935  0EAF                     _char2bytetovalue:	
  7936                           
  7937                           ;incstack = 0
  7938                           ; Regs used in _char2bytetovalue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7939                           ;char2bytetovalue@highBchar stored from wreg
  7940  0EAF  0020               	movlb	0	; select bank0
  7941  0EB0  00D9               	movwf	char2bytetovalue@highBchar
  7942                           
  7943                           ;CommunicationManager.c: 372: unsigned char valuehex;
  7944                           ;CommunicationManager.c: 374: (*cksum)=(*cksum)+(highBchar+LowBchar);
  7945  0EB1  0876               	movf	char2bytetovalue@cksum,w
  7946  0EB2  0086               	movwf	6
  7947  0EB3  0187               	clrf	7
  7948  0EB4  0801               	movf	1,w
  7949  0EB5  0759               	addwf	char2bytetovalue@highBchar,w
  7950  0EB6  0775               	addwf	char2bytetovalue@LowBchar,w
  7951  0EB7  00F7               	movwf	??_char2bytetovalue
  7952  0EB8  0876               	movf	char2bytetovalue@cksum,w
  7953  0EB9  0086               	movwf	6
  7954  0EBA  0187               	clrf	7
  7955  0EBB  0877               	movf	??_char2bytetovalue,w
  7956  0EBC  0081               	movwf	1
  7957                           
  7958                           ;CommunicationManager.c: 376: valuehex=(unsigned char)(((chartovalue(highBchar))<<4)& 0x
      +                          F0)+(chartovalue(LowBchar)& 0x0F);
  7959  0EBD  0859               	movf	char2bytetovalue@highBchar,w
  7960  0EBE  3187  273D  318E   	fcall	_chartovalue
  7961  0EC1  00F7               	movwf	??_char2bytetovalue
  7962  0EC2  3004               	movlw	4
  7963  0EC3                     u2335:	
  7964  0EC3  35F7               	lslf	??_char2bytetovalue,f
  7965  0EC4  0B89               	decfsz	9,f
  7966  0EC5  2EC3               	goto	u2335
  7967  0EC6  30F0               	movlw	240
  7968  0EC7  0577               	andwf	??_char2bytetovalue,w
  7969  0EC8  00F8               	movwf	??_char2bytetovalue+1
  7970  0EC9  0875               	movf	char2bytetovalue@LowBchar,w
  7971  0ECA  3187  273D         	fcall	_chartovalue
  7972  0ECC  390F               	andlw	15
  7973  0ECD  0778               	addwf	??_char2bytetovalue+1,w
  7974  0ECE  00F9               	movwf	??_char2bytetovalue+2
  7975  0ECF  0879               	movf	??_char2bytetovalue+2,w
  7976  0ED0  0020               	movlb	0	; select bank0
  7977  0ED1  00D8               	movwf	char2bytetovalue@valuehex
  7978                           
  7979                           ;CommunicationManager.c: 377: return valuehex;
  7980  0ED2  0858               	movf	char2bytetovalue@valuehex,w
  7981  0ED3  0008               	return
  7982  0ED4                     __end_of_char2bytetovalue:	
  7983                           
  7984                           	psect	text12
  7985  0E12                     __ptext12:	
  7986 ;; *************** function _char1bytetovalue *****************
  7987 ;; Defined at:
  7988 ;;		line 379 in file "CommunicationManager.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  LowBChar        1    wreg     unsigned char 
  7991 ;;  cksum           1    5[COMMON] PTR unsigned char 
  7992 ;;		 -> Checksum(1), 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  LowBChar        1    8[COMMON] unsigned char 
  7995 ;;  valuehex        1    7[COMMON] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      unsigned char 
  7998 ;; Registers used:
  7999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8005 ;;      Params:         1       0       0       0       0       0       0       0
  8006 ;;      Locals:         2       0       0       0       0       0       0       0
  8007 ;;      Temps:          1       0       0       0       0       0       0       0
  8008 ;;      Totals:         4       0       0       0       0       0       0       0
  8009 ;;Total ram usage:        4 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    7
  8012 ;; This function calls:
  8013 ;;		_chartovalue
  8014 ;; This function is called by:
  8015 ;;		_ProtocolManager
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           
  8020                           ;psect for function _char1bytetovalue
  8021  0E12                     _char1bytetovalue:	
  8022                           
  8023                           ;incstack = 0
  8024                           ; Regs used in _char1bytetovalue: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8025                           ;char1bytetovalue@LowBChar stored from wreg
  8026  0E12  00F8               	movwf	char1bytetovalue@LowBChar
  8027                           
  8028                           ;CommunicationManager.c: 381: unsigned char valuehex;
  8029                           ;CommunicationManager.c: 383: (*cksum)=(*cksum)+(LowBChar);
  8030  0E13  0875               	movf	char1bytetovalue@cksum,w
  8031  0E14  0086               	movwf	6
  8032  0E15  0187               	clrf	7
  8033  0E16  0801               	movf	1,w
  8034  0E17  0778               	addwf	char1bytetovalue@LowBChar,w
  8035  0E18  00F6               	movwf	??_char1bytetovalue
  8036  0E19  0875               	movf	char1bytetovalue@cksum,w
  8037  0E1A  0086               	movwf	6
  8038  0E1B  0187               	clrf	7
  8039  0E1C  0876               	movf	??_char1bytetovalue,w
  8040  0E1D  0081               	movwf	1
  8041                           
  8042                           ;CommunicationManager.c: 385: valuehex=(unsigned char)(chartovalue(LowBChar)& 0x0F);
  8043  0E1E  0878               	movf	char1bytetovalue@LowBChar,w
  8044  0E1F  3187  273D         	fcall	_chartovalue
  8045  0E21  390F               	andlw	15
  8046  0E22  00F6               	movwf	??_char1bytetovalue
  8047  0E23  0876               	movf	??_char1bytetovalue,w
  8048  0E24  00F7               	movwf	char1bytetovalue@valuehex
  8049                           
  8050                           ;CommunicationManager.c: 386: return valuehex;
  8051  0E25  0877               	movf	char1bytetovalue@valuehex,w
  8052  0E26  0008               	return
  8053  0E27                     __end_of_char1bytetovalue:	
  8054                           
  8055                           	psect	text13
  8056  073D                     __ptext13:	
  8057 ;; *************** function _chartovalue *****************
  8058 ;; Defined at:
  8059 ;;		line 344 in file "CommunicationManager.c"
  8060 ;; Parameters:    Size  Location     Type
  8061 ;;  charNibble      1    wreg     unsigned char 
  8062 ;; Auto vars:     Size  Location     Type
  8063 ;;  charNibble      1    3[COMMON] unsigned char 
  8064 ;;  hexval          1    4[COMMON] unsigned char 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      unsigned char 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8074 ;;      Params:         0       0       0       0       0       0       0       0
  8075 ;;      Locals:         2       0       0       0       0       0       0       0
  8076 ;;      Temps:          1       0       0       0       0       0       0       0
  8077 ;;      Totals:         3       0       0       0       0       0       0       0
  8078 ;;Total ram usage:        3 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    6
  8081 ;; This function calls:
  8082 ;;		Nothing
  8083 ;; This function is called by:
  8084 ;;		_char2bytetovalue
  8085 ;;		_char1bytetovalue
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           
  8090                           ;psect for function _chartovalue
  8091  073D                     _chartovalue:	
  8092                           
  8093                           ;incstack = 0
  8094                           ; Regs used in _chartovalue: [wreg-fsr0h+status,2+status,0]
  8095                           ;chartovalue@charNibble stored from wreg
  8096  073D  00F3               	movwf	chartovalue@charNibble
  8097                           
  8098                           ;CommunicationManager.c: 346: unsigned char hexval=0x00;
  8099  073E  01F4               	clrf	chartovalue@hexval
  8100                           
  8101                           ;CommunicationManager.c: 347: switch((unsigned char)charNibble)
  8102  073F  2F64               	goto	l3756
  8103  0740                     l3724:	
  8104                           ;CommunicationManager.c: 348: {
  8105                           ;CommunicationManager.c: 349: case '0': hexval= 0x00; break;
  8106                           
  8107  0740  01F4               	clrf	chartovalue@hexval
  8108  0741  2F96               	goto	l3758
  8109  0742                     l620:	
  8110                           ;CommunicationManager.c: 350: case '1': hexval= 0x01; break;
  8111                           
  8112  0742  01F4               	clrf	chartovalue@hexval
  8113  0743  0AF4               	incf	chartovalue@hexval,f
  8114  0744  2F96               	goto	l3758
  8115  0745                     l3726:	
  8116                           ;CommunicationManager.c: 351: case '2': hexval= 0x02; break;
  8117                           
  8118  0745  3002               	movlw	2
  8119  0746  2F60               	goto	L14
  8120  0747                     l3728:	
  8121                           ;CommunicationManager.c: 352: case '3': hexval= 0x03; break;
  8122                           
  8123  0747  3003               	movlw	3
  8124  0748  2F60               	goto	L14
  8125  0749                     l3730:	
  8126                           ;CommunicationManager.c: 353: case '4': hexval= 0x04; break;
  8127                           
  8128  0749  3004               	movlw	4
  8129  074A  2F60               	goto	L14
  8130  074B                     l3732:	
  8131                           ;CommunicationManager.c: 354: case '5': hexval= 0x05; break;
  8132                           
  8133  074B  3005               	movlw	5
  8134  074C  2F60               	goto	L14
  8135  074D                     l3734:	
  8136                           ;CommunicationManager.c: 355: case '6': hexval= 0x06; break;
  8137                           
  8138  074D  3006               	movlw	6
  8139  074E  2F60               	goto	L14
  8140  074F                     l3736:	
  8141                           ;CommunicationManager.c: 356: case '7': hexval= 0x07; break;
  8142                           
  8143  074F  3007               	movlw	7
  8144  0750  2F60               	goto	L14
  8145  0751                     l3738:	
  8146                           ;CommunicationManager.c: 357: case '8': hexval= 0x08; break;
  8147                           
  8148  0751  3008               	movlw	8
  8149  0752  2F60               	goto	L14
  8150  0753                     l3740:	
  8151                           ;CommunicationManager.c: 358: case '9': hexval= 0x09; break;
  8152                           
  8153  0753  3009               	movlw	9
  8154  0754  2F60               	goto	L14
  8155  0755                     l3742:	
  8156                           ;CommunicationManager.c: 359: case 'A': hexval= 0x0A; break;
  8157                           
  8158  0755  300A               	movlw	10
  8159  0756  2F60               	goto	L14
  8160  0757                     l3744:	
  8161                           ;CommunicationManager.c: 360: case 'B': hexval= 0x0B; break;
  8162                           
  8163  0757  300B               	movlw	11
  8164  0758  2F60               	goto	L14
  8165  0759                     l3746:	
  8166                           ;CommunicationManager.c: 361: case 'C': hexval= 0x0C; break;
  8167                           
  8168  0759  300C               	movlw	12
  8169  075A  2F60               	goto	L14
  8170  075B                     l3748:	
  8171                           ;CommunicationManager.c: 362: case 'D': hexval= 0x0D; break;
  8172                           
  8173  075B  300D               	movlw	13
  8174  075C  2F60               	goto	L14
  8175  075D                     l3750:	
  8176                           ;CommunicationManager.c: 363: case 'E': hexval= 0x0E; break;
  8177                           
  8178  075D  300E               	movlw	14
  8179  075E  2F60               	goto	L14
  8180  075F                     l3752:	
  8181                           ;CommunicationManager.c: 364: case 'F': hexval= 0x0F; break;
  8182                           
  8183  075F  300F               	movlw	15
  8184  0760                     L14:	
  8185  0760  00F2               	movwf	??_chartovalue
  8186  0761  0872               	movf	??_chartovalue,w
  8187  0762  00F4               	movwf	chartovalue@hexval
  8188                           
  8189                           ;CommunicationManager.c: 366: }
  8190                           
  8191                           ;CommunicationManager.c: 365: default : break;
  8192  0763  2F96               	goto	l3758
  8193  0764                     l3756:	
  8194  0764  0873               	movf	chartovalue@charNibble,w
  8195                           
  8196                           ; Switch size 1, requested type "space"
  8197                           ; Number of cases is 16, Range of values is 48 to 70
  8198                           ; switch strategies available:
  8199                           ; Name         Instructions Cycles
  8200                           ; simple_byte           49    25 (average)
  8201                           ; direct_byte           55     9 (fixed)
  8202                           ; jumptable            263     9 (fixed)
  8203                           ;	Chosen strategy is simple_byte
  8204  0765  3A30               	xorlw	48	; case 48
  8205  0766  1903               	skipnz
  8206  0767  2F40               	goto	l3724
  8207  0768  3A01               	xorlw	1	; case 49
  8208  0769  1903               	skipnz
  8209  076A  2F42               	goto	l620
  8210  076B  3A03               	xorlw	3	; case 50
  8211  076C  1903               	skipnz
  8212  076D  2F45               	goto	l3726
  8213  076E  3A01               	xorlw	1	; case 51
  8214  076F  1903               	skipnz
  8215  0770  2F47               	goto	l3728
  8216  0771  3A07               	xorlw	7	; case 52
  8217  0772  1903               	skipnz
  8218  0773  2F49               	goto	l3730
  8219  0774  3A01               	xorlw	1	; case 53
  8220  0775  1903               	skipnz
  8221  0776  2F4B               	goto	l3732
  8222  0777  3A03               	xorlw	3	; case 54
  8223  0778  1903               	skipnz
  8224  0779  2F4D               	goto	l3734
  8225  077A  3A01               	xorlw	1	; case 55
  8226  077B  1903               	skipnz
  8227  077C  2F4F               	goto	l3736
  8228  077D  3A0F               	xorlw	15	; case 56
  8229  077E  1903               	skipnz
  8230  077F  2F51               	goto	l3738
  8231  0780  3A01               	xorlw	1	; case 57
  8232  0781  1903               	skipnz
  8233  0782  2F53               	goto	l3740
  8234  0783  3A78               	xorlw	120	; case 65
  8235  0784  1903               	skipnz
  8236  0785  2F55               	goto	l3742
  8237  0786  3A03               	xorlw	3	; case 66
  8238  0787  1903               	skipnz
  8239  0788  2F57               	goto	l3744
  8240  0789  3A01               	xorlw	1	; case 67
  8241  078A  1903               	skipnz
  8242  078B  2F59               	goto	l3746
  8243  078C  3A07               	xorlw	7	; case 68
  8244  078D  1903               	skipnz
  8245  078E  2F5B               	goto	l3748
  8246  078F  3A01               	xorlw	1	; case 69
  8247  0790  1903               	skipnz
  8248  0791  2F5D               	goto	l3750
  8249  0792  3A03               	xorlw	3	; case 70
  8250  0793  1903               	skipnz
  8251  0794  2F5F               	goto	l3752
  8252  0795  2F96               	goto	l3758
  8253  0796                     l3758:	
  8254                           
  8255                           ;CommunicationManager.c: 367: return hexval;
  8256  0796  0874               	movf	chartovalue@hexval,w
  8257  0797  0008               	return
  8258  0798                     __end_of_chartovalue:	
  8259                           
  8260                           	psect	text14
  8261  047E                     __ptext14:	
  8262 ;; *************** function _PackageTxResponseData *****************
  8263 ;; Defined at:
  8264 ;;		line 406 in file "CommunicationManager.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  frameType       1    wreg     unsigned char 
  8267 ;;  data            1    1[BANK0 ] PTR unsigned char 
  8268 ;;		 -> DigitalIN(1), AnalogSenseRawByte(2), eepromReadData(16), 
  8269 ;;  dataLen         1    2[BANK0 ] unsigned char 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;  frameType       1    6[BANK0 ] unsigned char 
  8272 ;;  i               1    5[BANK0 ] unsigned char 
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      void 
  8275 ;; Registers used:
  8276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8282 ;;      Params:         0       2       0       0       0       0       0       0
  8283 ;;      Locals:         0       2       0       0       0       0       0       0
  8284 ;;      Temps:          0       2       0       0       0       0       0       0
  8285 ;;      Totals:         0       6       0       0       0       0       0       0
  8286 ;;Total ram usage:        6 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    9
  8289 ;; This function calls:
  8290 ;;		_EUSART_RX_Disable
  8291 ;;		_EUSART_RX_Enable
  8292 ;;		_EUSART_TX_Completed
  8293 ;;		_EUSART_Write
  8294 ;;		_PackageTxResponseNACK
  8295 ;;		_valuetocharHighNibble
  8296 ;;		_valuetocharLowNibble
  8297 ;; This function is called by:
  8298 ;;		_ProtocolManager
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           
  8303                           ;psect for function _PackageTxResponseData
  8304  047E                     _PackageTxResponseData:	
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _PackageTxResponseData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8308                           ;PackageTxResponseData@frameType stored from wreg
  8309  047E  0020               	movlb	0	; select bank0
  8310  047F  00DE               	movwf	PackageTxResponseData@frameType
  8311                           
  8312                           ;CommunicationManager.c: 409: unsigned char i;
  8313                           ;CommunicationManager.c: 413: if(dataLen==0)
  8314  0480  085A               	movf	PackageTxResponseData@dataLen,w
  8315  0481  1D03               	btfss	3,2
  8316  0482  2C87               	goto	l3892
  8317                           
  8318                           ;CommunicationManager.c: 414: {
  8319                           ;CommunicationManager.c: 415: PackageTxResponseNACK(frameType);
  8320  0483  085E               	movf	PackageTxResponseData@frameType,w
  8321  0484  3185  257E         	fcall	_PackageTxResponseNACK
  8322                           
  8323                           ;CommunicationManager.c: 416: }
  8324  0486  0008               	return
  8325  0487                     l3892:	
  8326                           
  8327                           ;CommunicationManager.c: 417: else
  8328                           ;CommunicationManager.c: 418: {
  8329                           ;CommunicationManager.c: 420: EUSART_RX_Disable();
  8330  0487  318D  254D  3184   	fcall	_EUSART_RX_Disable
  8331                           
  8332                           ;CommunicationManager.c: 421: do { LATB6 = 1; } while(0);
  8333  048A  0022               	movlb	2	; select bank2
  8334  048B  170D               	bsf	13,6	;volatile
  8335                           
  8336                           ;CommunicationManager.c: 425: EUSART_TX_Completed();
  8337  048C  318D  2559  3184   	fcall	_EUSART_TX_Completed
  8338                           
  8339                           ;CommunicationManager.c: 429: EUSART_Write('$');
  8340  048F  3024               	movlw	36
  8341  0490  318D  2572  3184   	fcall	_EUSART_Write
  8342                           
  8343                           ;CommunicationManager.c: 430: EUSART_Write('$');
  8344  0493  3024               	movlw	36
  8345  0494  318D  2572  3184   	fcall	_EUSART_Write
  8346                           
  8347                           ;CommunicationManager.c: 431: Checksum=0;
  8348  0497  0020               	movlb	0	; select bank0
  8349  0498  01D6               	clrf	_Checksum
  8350                           
  8351                           ;CommunicationManager.c: 433: EUSART_Write('O');
  8352  0499  304F               	movlw	79
  8353  049A  318D  2572  3184   	fcall	_EUSART_Write
  8354                           
  8355                           ;CommunicationManager.c: 434: Checksum+='O';
  8356  049D  304F               	movlw	79
  8357  049E  0020               	movlb	0	; select bank0
  8358  049F  00DB               	movwf	??_PackageTxResponseData
  8359  04A0  085B               	movf	??_PackageTxResponseData,w
  8360  04A1  07D6               	addwf	_Checksum,f
  8361                           
  8362                           ;CommunicationManager.c: 436: if((frameType=='A')||(frameType=='I'))
  8363  04A2  3041               	movlw	65
  8364  04A3  065E               	xorwf	PackageTxResponseData@frameType,w
  8365  04A4  1903               	btfsc	3,2
  8366  04A5  2CAA               	goto	l3910
  8367  04A6  3049               	movlw	73
  8368  04A7  065E               	xorwf	PackageTxResponseData@frameType,w
  8369  04A8  1D03               	btfss	3,2
  8370  04A9  2CAD               	goto	l3912
  8371  04AA                     l3910:	
  8372                           
  8373                           ;CommunicationManager.c: 437: {
  8374                           ;CommunicationManager.c: 438: txPacketlength=12+(dataLen*2);
  8375  04AA  355A               	lslf	PackageTxResponseData@dataLen,w
  8376  04AB  3E0C               	addlw	12
  8377  04AC  2CB5               	goto	L16
  8378  04AD                     l3912:	
  8379                           ;CommunicationManager.c: 439: }
  8380                           
  8381                           
  8382                           ;CommunicationManager.c: 440: else if(frameType=='r')
  8383  04AD  3072               	movlw	114
  8384  04AE  065E               	xorwf	PackageTxResponseData@frameType,w
  8385  04AF  1D03               	btfss	3,2
  8386  04B0  2CB4               	goto	l3916
  8387                           
  8388                           ;CommunicationManager.c: 441: {
  8389                           ;CommunicationManager.c: 442: txPacketlength=13+(dataLen*2);
  8390  04B1  355A               	lslf	PackageTxResponseData@dataLen,w
  8391  04B2  3E0D               	addlw	13
  8392  04B3  2CB5               	goto	L16
  8393  04B4                     l3916:	
  8394                           ;CommunicationManager.c: 443: }
  8395                           
  8396                           
  8397                           ;CommunicationManager.c: 444: else
  8398                           ;CommunicationManager.c: 445: txPacketlength=11;
  8399  04B4  300B               	movlw	11
  8400  04B5                     L16:	
  8401  04B5  00DB               	movwf	??_PackageTxResponseData
  8402  04B6  085B               	movf	??_PackageTxResponseData,w
  8403  04B7  00C1               	movwf	_txPacketlength
  8404                           
  8405                           ;CommunicationManager.c: 447: highByteChar=valuetocharHighNibble(txPacketlength);
  8406  04B8  0841               	movf	_txPacketlength,w
  8407  04B9  318D  25FE  3184   	fcall	_valuetocharHighNibble
  8408  04BC  0020               	movlb	0	; select bank0
  8409  04BD  00DB               	movwf	??_PackageTxResponseData
  8410  04BE  085B               	movf	??_PackageTxResponseData,w
  8411  04BF  00C3               	movwf	_highByteChar
  8412                           
  8413                           ;CommunicationManager.c: 448: Checksum+=highByteChar;
  8414  04C0  0843               	movf	_highByteChar,w
  8415  04C1  00DB               	movwf	??_PackageTxResponseData
  8416  04C2  085B               	movf	??_PackageTxResponseData,w
  8417  04C3  07D6               	addwf	_Checksum,f
  8418                           
  8419                           ;CommunicationManager.c: 449: lowByteChar=valuetocharLowNibble(txPacketlength);
  8420  04C4  0841               	movf	_txPacketlength,w
  8421  04C5  318D  25CE  3184   	fcall	_valuetocharLowNibble
  8422  04C8  0020               	movlb	0	; select bank0
  8423  04C9  00DB               	movwf	??_PackageTxResponseData
  8424  04CA  085B               	movf	??_PackageTxResponseData,w
  8425  04CB  00C2               	movwf	_lowByteChar
  8426                           
  8427                           ;CommunicationManager.c: 450: Checksum+=lowByteChar;
  8428  04CC  0842               	movf	_lowByteChar,w
  8429  04CD  00DB               	movwf	??_PackageTxResponseData
  8430  04CE  085B               	movf	??_PackageTxResponseData,w
  8431  04CF  07D6               	addwf	_Checksum,f
  8432                           
  8433                           ;CommunicationManager.c: 451: EUSART_Write(highByteChar);
  8434  04D0  0843               	movf	_highByteChar,w
  8435  04D1  318D  2572  3184   	fcall	_EUSART_Write
  8436                           
  8437                           ;CommunicationManager.c: 452: EUSART_Write(lowByteChar);
  8438  04D4  0020               	movlb	0	; select bank0
  8439  04D5  0842               	movf	_lowByteChar,w
  8440  04D6  318D  2572  3184   	fcall	_EUSART_Write
  8441                           
  8442                           ;CommunicationManager.c: 455: EUSART_Write(frameType);
  8443  04D9  0020               	movlb	0	; select bank0
  8444  04DA  085E               	movf	PackageTxResponseData@frameType,w
  8445  04DB  318D  2572  3184   	fcall	_EUSART_Write
  8446                           
  8447                           ;CommunicationManager.c: 456: Checksum+=frameType;
  8448  04DE  0020               	movlb	0	; select bank0
  8449  04DF  085E               	movf	PackageTxResponseData@frameType,w
  8450  04E0  00DB               	movwf	??_PackageTxResponseData
  8451  04E1  085B               	movf	??_PackageTxResponseData,w
  8452  04E2  07D6               	addwf	_Checksum,f
  8453                           
  8454                           ;CommunicationManager.c: 458: if((frameType=='A')||(frameType=='I'))
  8455  04E3  3041               	movlw	65
  8456  04E4  065E               	xorwf	PackageTxResponseData@frameType,w
  8457  04E5  1903               	btfsc	3,2
  8458  04E6  2CEB               	goto	l3938
  8459  04E7  3049               	movlw	73
  8460  04E8  065E               	xorwf	PackageTxResponseData@frameType,w
  8461  04E9  1D03               	btfss	3,2
  8462  04EA  2CF1               	goto	l3942
  8463  04EB                     l3938:	
  8464                           
  8465                           ;CommunicationManager.c: 459: {
  8466                           ;CommunicationManager.c: 460: Checksum+=ChannelNumberChar;
  8467  04EB  0866               	movf	_ChannelNumberChar,w
  8468  04EC  00DB               	movwf	??_PackageTxResponseData
  8469  04ED  085B               	movf	??_PackageTxResponseData,w
  8470  04EE  07D6               	addwf	_Checksum,f
  8471                           
  8472                           ;CommunicationManager.c: 461: EUSART_Write(ChannelNumberChar);
  8473  04EF  0866               	movf	_ChannelNumberChar,w
  8474  04F0  2D14               	goto	L17
  8475  04F1                     l3942:	
  8476                           ;CommunicationManager.c: 462: }
  8477                           
  8478                           
  8479                           ;CommunicationManager.c: 463: else if(frameType=='r')
  8480  04F1  3072               	movlw	114
  8481  04F2  0020               	movlb	0	; select bank0
  8482  04F3  065E               	xorwf	PackageTxResponseData@frameType,w
  8483  04F4  1D03               	btfss	3,2
  8484  04F5  2D17               	goto	l3954
  8485                           
  8486                           ;CommunicationManager.c: 464: {
  8487                           ;CommunicationManager.c: 465: highByteChar=valuetocharHighNibble(dataLen);
  8488  04F6  085A               	movf	PackageTxResponseData@dataLen,w
  8489  04F7  318D  25FE  3184   	fcall	_valuetocharHighNibble
  8490  04FA  0020               	movlb	0	; select bank0
  8491  04FB  00DB               	movwf	??_PackageTxResponseData
  8492  04FC  085B               	movf	??_PackageTxResponseData,w
  8493  04FD  00C3               	movwf	_highByteChar
  8494                           
  8495                           ;CommunicationManager.c: 466: Checksum+=highByteChar;
  8496  04FE  0843               	movf	_highByteChar,w
  8497  04FF  00DB               	movwf	??_PackageTxResponseData
  8498  0500  085B               	movf	??_PackageTxResponseData,w
  8499  0501  07D6               	addwf	_Checksum,f
  8500                           
  8501                           ;CommunicationManager.c: 467: lowByteChar=valuetocharLowNibble(dataLen);
  8502  0502  085A               	movf	PackageTxResponseData@dataLen,w
  8503  0503  318D  25CE  3184   	fcall	_valuetocharLowNibble
  8504  0506  0020               	movlb	0	; select bank0
  8505  0507  00DB               	movwf	??_PackageTxResponseData
  8506  0508  085B               	movf	??_PackageTxResponseData,w
  8507  0509  00C2               	movwf	_lowByteChar
  8508                           
  8509                           ;CommunicationManager.c: 468: Checksum+=lowByteChar;
  8510  050A  0842               	movf	_lowByteChar,w
  8511  050B  00DB               	movwf	??_PackageTxResponseData
  8512  050C  085B               	movf	??_PackageTxResponseData,w
  8513  050D  07D6               	addwf	_Checksum,f
  8514                           
  8515                           ;CommunicationManager.c: 469: EUSART_Write(highByteChar);
  8516  050E  0843               	movf	_highByteChar,w
  8517  050F  318D  2572  3184   	fcall	_EUSART_Write
  8518                           
  8519                           ;CommunicationManager.c: 470: EUSART_Write(lowByteChar);
  8520  0512  0020               	movlb	0	; select bank0
  8521  0513  0842               	movf	_lowByteChar,w
  8522  0514                     L17:	
  8523  0514  318D  2572  3184   	fcall	_EUSART_Write
  8524  0517                     l3954:	
  8525                           
  8526                           ;CommunicationManager.c: 471: }
  8527                           ;CommunicationManager.c: 473: for(i=0;i<dataLen;i++)
  8528  0517  0020               	movlb	0	; select bank0
  8529  0518  01DD               	clrf	PackageTxResponseData@i
  8530  0519                     l3966:	
  8531  0519  085A               	movf	PackageTxResponseData@dataLen,w
  8532  051A  025D               	subwf	PackageTxResponseData@i,w
  8533  051B  1803               	btfsc	3,0
  8534  051C  2D50               	goto	l668
  8535                           
  8536                           ;CommunicationManager.c: 474: {
  8537                           ;CommunicationManager.c: 476: highByteChar=valuetocharHighNibble(*(data+i));
  8538  051D  085D               	movf	PackageTxResponseData@i,w
  8539  051E  0759               	addwf	PackageTxResponseData@data,w
  8540  051F  00DB               	movwf	??_PackageTxResponseData
  8541  0520  085B               	movf	??_PackageTxResponseData,w
  8542  0521  0086               	movwf	6
  8543  0522  0187               	clrf	7
  8544  0523  0801               	movf	1,w
  8545  0524  318D  25FE  3184   	fcall	_valuetocharHighNibble
  8546  0527  0020               	movlb	0	; select bank0
  8547  0528  00DC               	movwf	??_PackageTxResponseData+1
  8548  0529  085C               	movf	??_PackageTxResponseData+1,w
  8549  052A  00C3               	movwf	_highByteChar
  8550                           
  8551                           ;CommunicationManager.c: 477: Checksum+=highByteChar;
  8552  052B  0843               	movf	_highByteChar,w
  8553  052C  00DB               	movwf	??_PackageTxResponseData
  8554  052D  085B               	movf	??_PackageTxResponseData,w
  8555  052E  07D6               	addwf	_Checksum,f
  8556                           
  8557                           ;CommunicationManager.c: 478: lowByteChar=valuetocharLowNibble(*(data+i));
  8558  052F  085D               	movf	PackageTxResponseData@i,w
  8559  0530  0759               	addwf	PackageTxResponseData@data,w
  8560  0531  00DB               	movwf	??_PackageTxResponseData
  8561  0532  085B               	movf	??_PackageTxResponseData,w
  8562  0533  0086               	movwf	6
  8563  0534  0187               	clrf	7
  8564  0535  0801               	movf	1,w
  8565  0536  318D  25CE  3184   	fcall	_valuetocharLowNibble
  8566  0539  0020               	movlb	0	; select bank0
  8567  053A  00DC               	movwf	??_PackageTxResponseData+1
  8568  053B  085C               	movf	??_PackageTxResponseData+1,w
  8569  053C  00C2               	movwf	_lowByteChar
  8570                           
  8571                           ;CommunicationManager.c: 479: Checksum+=lowByteChar;
  8572  053D  0842               	movf	_lowByteChar,w
  8573  053E  00DB               	movwf	??_PackageTxResponseData
  8574  053F  085B               	movf	??_PackageTxResponseData,w
  8575  0540  07D6               	addwf	_Checksum,f
  8576                           
  8577                           ;CommunicationManager.c: 480: EUSART_Write(highByteChar);
  8578  0541  0843               	movf	_highByteChar,w
  8579  0542  318D  2572  3184   	fcall	_EUSART_Write
  8580                           
  8581                           ;CommunicationManager.c: 481: EUSART_Write(lowByteChar);
  8582  0545  0020               	movlb	0	; select bank0
  8583  0546  0842               	movf	_lowByteChar,w
  8584  0547  318D  2572  3184   	fcall	_EUSART_Write
  8585  054A  3001               	movlw	1
  8586  054B  0020               	movlb	0	; select bank0
  8587  054C  00DB               	movwf	??_PackageTxResponseData
  8588  054D  085B               	movf	??_PackageTxResponseData,w
  8589  054E  07DD               	addwf	PackageTxResponseData@i,f
  8590  054F  2D19               	goto	l3966
  8591  0550                     l668:	
  8592                           
  8593                           ;CommunicationManager.c: 483: }
  8594                           ;CommunicationManager.c: 485: Checksum=(unsigned char)(~Checksum);
  8595  0550  09D6               	comf	_Checksum,f
  8596                           
  8597                           ;CommunicationManager.c: 486: highByteChar=valuetocharHighNibble(Checksum);
  8598  0551  0856               	movf	_Checksum,w
  8599  0552  318D  25FE  3184   	fcall	_valuetocharHighNibble
  8600  0555  0020               	movlb	0	; select bank0
  8601  0556  00DB               	movwf	??_PackageTxResponseData
  8602  0557  085B               	movf	??_PackageTxResponseData,w
  8603  0558  00C3               	movwf	_highByteChar
  8604                           
  8605                           ;CommunicationManager.c: 487: lowByteChar=valuetocharLowNibble(Checksum);
  8606  0559  0856               	movf	_Checksum,w
  8607  055A  318D  25CE  3184   	fcall	_valuetocharLowNibble
  8608  055D  0020               	movlb	0	; select bank0
  8609  055E  00DB               	movwf	??_PackageTxResponseData
  8610  055F  085B               	movf	??_PackageTxResponseData,w
  8611  0560  00C2               	movwf	_lowByteChar
  8612                           
  8613                           ;CommunicationManager.c: 488: EUSART_Write(highByteChar);
  8614  0561  0843               	movf	_highByteChar,w
  8615  0562  318D  2572  3184   	fcall	_EUSART_Write
  8616                           
  8617                           ;CommunicationManager.c: 489: EUSART_Write(lowByteChar);
  8618  0565  0020               	movlb	0	; select bank0
  8619  0566  0842               	movf	_lowByteChar,w
  8620  0567  318D  2572  3184   	fcall	_EUSART_Write
  8621                           
  8622                           ;CommunicationManager.c: 492: EUSART_Write('#');
  8623  056A  3023               	movlw	35
  8624  056B  318D  2572  3184   	fcall	_EUSART_Write
  8625                           
  8626                           ;CommunicationManager.c: 493: EUSART_Write('\r');
  8627  056E  300D               	movlw	13
  8628  056F  318D  2572  3184   	fcall	_EUSART_Write
  8629                           
  8630                           ;CommunicationManager.c: 494: EUSART_Write('\n');
  8631  0572  300A               	movlw	10
  8632  0573  318D  2572  3184   	fcall	_EUSART_Write
  8633                           
  8634                           ;CommunicationManager.c: 496: EUSART_TX_Completed();
  8635  0576  318D  2559  3184   	fcall	_EUSART_TX_Completed
  8636                           
  8637                           ;CommunicationManager.c: 497: do { LATB6 = 0; } while(0);
  8638  0579  0022               	movlb	2	; select bank2
  8639  057A  130D               	bcf	13,6	;volatile
  8640                           
  8641                           ;CommunicationManager.c: 498: EUSART_RX_Enable();
  8642  057B  318D  2550         	fcall	_EUSART_RX_Enable
  8643  057D  0008               	return
  8644  057E                     __end_of_PackageTxResponseData:	
  8645                           
  8646                           	psect	text15
  8647  057E                     __ptext15:	
  8648 ;; *************** function _PackageTxResponseNACK *****************
  8649 ;; Defined at:
  8650 ;;		line 543 in file "CommunicationManager.c"
  8651 ;; Parameters:    Size  Location     Type
  8652 ;;  frameType       1    wreg     unsigned char 
  8653 ;; Auto vars:     Size  Location     Type
  8654 ;;  frameType       1    0[BANK0 ] unsigned char 
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      void 
  8657 ;; Registers used:
  8658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8664 ;;      Params:         0       0       0       0       0       0       0       0
  8665 ;;      Locals:         0       1       0       0       0       0       0       0
  8666 ;;      Temps:          1       0       0       0       0       0       0       0
  8667 ;;      Totals:         1       1       0       0       0       0       0       0
  8668 ;;Total ram usage:        2 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    8
  8671 ;; This function calls:
  8672 ;;		_EUSART_RX_Disable
  8673 ;;		_EUSART_RX_Enable
  8674 ;;		_EUSART_TX_Completed
  8675 ;;		_EUSART_Write
  8676 ;;		_valuetocharHighNibble
  8677 ;;		_valuetocharLowNibble
  8678 ;; This function is called by:
  8679 ;;		_ProtocolManager
  8680 ;;		_PackageTxResponseData
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           
  8685                           ;psect for function _PackageTxResponseNACK
  8686  057E                     _PackageTxResponseNACK:	
  8687                           
  8688                           ;incstack = 0
  8689                           ; Regs used in _PackageTxResponseNACK: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8690                           ;PackageTxResponseNACK@frameType stored from wreg
  8691  057E  0020               	movlb	0	; select bank0
  8692  057F  00D8               	movwf	PackageTxResponseNACK@frameType
  8693                           
  8694                           ;CommunicationManager.c: 546: EUSART_RX_Disable();
  8695  0580  318D  254D  3185   	fcall	_EUSART_RX_Disable
  8696                           
  8697                           ;CommunicationManager.c: 547: do { LATB6 = 1; } while(0);
  8698  0583  0022               	movlb	2	; select bank2
  8699  0584  170D               	bsf	13,6	;volatile
  8700                           
  8701                           ;CommunicationManager.c: 549: EUSART_TX_Completed();
  8702  0585  318D  2559  3185   	fcall	_EUSART_TX_Completed
  8703                           
  8704                           ;CommunicationManager.c: 551: EUSART_Write('$');
  8705  0588  3024               	movlw	36
  8706  0589  318D  2572  3185   	fcall	_EUSART_Write
  8707                           
  8708                           ;CommunicationManager.c: 552: EUSART_Write('$');
  8709  058C  3024               	movlw	36
  8710  058D  318D  2572  3185   	fcall	_EUSART_Write
  8711                           
  8712                           ;CommunicationManager.c: 553: Checksum=0;
  8713  0590  0020               	movlb	0	; select bank0
  8714  0591  01D6               	clrf	_Checksum
  8715                           
  8716                           ;CommunicationManager.c: 555: EUSART_Write('N');
  8717  0592  304E               	movlw	78
  8718  0593  318D  2572  3185   	fcall	_EUSART_Write
  8719                           
  8720                           ;CommunicationManager.c: 556: Checksum+='N';
  8721  0596  304E               	movlw	78
  8722  0597  00F9               	movwf	??_PackageTxResponseNACK
  8723  0598  0879               	movf	??_PackageTxResponseNACK,w
  8724  0599  0020               	movlb	0	; select bank0
  8725  059A  07D6               	addwf	_Checksum,f
  8726                           
  8727                           ;CommunicationManager.c: 557: txPacketlength=11;
  8728  059B  300B               	movlw	11
  8729  059C  00F9               	movwf	??_PackageTxResponseNACK
  8730  059D  0879               	movf	??_PackageTxResponseNACK,w
  8731  059E  00C1               	movwf	_txPacketlength
  8732                           
  8733                           ;CommunicationManager.c: 558: highByteChar=valuetocharHighNibble(txPacketlength);
  8734  059F  0841               	movf	_txPacketlength,w
  8735  05A0  318D  25FE  3185   	fcall	_valuetocharHighNibble
  8736  05A3  00F9               	movwf	??_PackageTxResponseNACK
  8737  05A4  0879               	movf	??_PackageTxResponseNACK,w
  8738  05A5  0020               	movlb	0	; select bank0
  8739  05A6  00C3               	movwf	_highByteChar
  8740                           
  8741                           ;CommunicationManager.c: 559: Checksum+=highByteChar;
  8742  05A7  0843               	movf	_highByteChar,w
  8743  05A8  00F9               	movwf	??_PackageTxResponseNACK
  8744  05A9  0879               	movf	??_PackageTxResponseNACK,w
  8745  05AA  07D6               	addwf	_Checksum,f
  8746                           
  8747                           ;CommunicationManager.c: 560: lowByteChar=valuetocharLowNibble(txPacketlength);
  8748  05AB  0841               	movf	_txPacketlength,w
  8749  05AC  318D  25CE  3185   	fcall	_valuetocharLowNibble
  8750  05AF  00F9               	movwf	??_PackageTxResponseNACK
  8751  05B0  0879               	movf	??_PackageTxResponseNACK,w
  8752  05B1  0020               	movlb	0	; select bank0
  8753  05B2  00C2               	movwf	_lowByteChar
  8754                           
  8755                           ;CommunicationManager.c: 561: Checksum+=lowByteChar;
  8756  05B3  0842               	movf	_lowByteChar,w
  8757  05B4  00F9               	movwf	??_PackageTxResponseNACK
  8758  05B5  0879               	movf	??_PackageTxResponseNACK,w
  8759  05B6  07D6               	addwf	_Checksum,f
  8760                           
  8761                           ;CommunicationManager.c: 562: EUSART_Write(highByteChar);
  8762  05B7  0843               	movf	_highByteChar,w
  8763  05B8  318D  2572  3185   	fcall	_EUSART_Write
  8764                           
  8765                           ;CommunicationManager.c: 563: EUSART_Write(lowByteChar);
  8766  05BB  0020               	movlb	0	; select bank0
  8767  05BC  0842               	movf	_lowByteChar,w
  8768  05BD  318D  2572  3185   	fcall	_EUSART_Write
  8769                           
  8770                           ;CommunicationManager.c: 565: EUSART_Write(frameType);
  8771  05C0  0020               	movlb	0	; select bank0
  8772  05C1  0858               	movf	PackageTxResponseNACK@frameType,w
  8773  05C2  318D  2572  3185   	fcall	_EUSART_Write
  8774                           
  8775                           ;CommunicationManager.c: 566: Checksum+=frameType;
  8776  05C5  0020               	movlb	0	; select bank0
  8777  05C6  0858               	movf	PackageTxResponseNACK@frameType,w
  8778  05C7  00F9               	movwf	??_PackageTxResponseNACK
  8779  05C8  0879               	movf	??_PackageTxResponseNACK,w
  8780  05C9  07D6               	addwf	_Checksum,f
  8781                           
  8782                           ;CommunicationManager.c: 568: Checksum=~Checksum;
  8783  05CA  09D6               	comf	_Checksum,f
  8784                           
  8785                           ;CommunicationManager.c: 569: highByteChar=valuetocharHighNibble(Checksum);
  8786  05CB  0856               	movf	_Checksum,w
  8787  05CC  318D  25FE  3185   	fcall	_valuetocharHighNibble
  8788  05CF  00F9               	movwf	??_PackageTxResponseNACK
  8789  05D0  0879               	movf	??_PackageTxResponseNACK,w
  8790  05D1  0020               	movlb	0	; select bank0
  8791  05D2  00C3               	movwf	_highByteChar
  8792                           
  8793                           ;CommunicationManager.c: 570: lowByteChar=valuetocharLowNibble(Checksum);
  8794  05D3  0856               	movf	_Checksum,w
  8795  05D4  318D  25CE  3185   	fcall	_valuetocharLowNibble
  8796  05D7  00F9               	movwf	??_PackageTxResponseNACK
  8797  05D8  0879               	movf	??_PackageTxResponseNACK,w
  8798  05D9  0020               	movlb	0	; select bank0
  8799  05DA  00C2               	movwf	_lowByteChar
  8800                           
  8801                           ;CommunicationManager.c: 571: EUSART_Write(highByteChar);
  8802  05DB  0843               	movf	_highByteChar,w
  8803  05DC  318D  2572  3185   	fcall	_EUSART_Write
  8804                           
  8805                           ;CommunicationManager.c: 572: EUSART_Write(lowByteChar);
  8806  05DF  0020               	movlb	0	; select bank0
  8807  05E0  0842               	movf	_lowByteChar,w
  8808  05E1  318D  2572  3185   	fcall	_EUSART_Write
  8809                           
  8810                           ;CommunicationManager.c: 575: EUSART_Write('#');
  8811  05E4  3023               	movlw	35
  8812  05E5  318D  2572  3185   	fcall	_EUSART_Write
  8813                           
  8814                           ;CommunicationManager.c: 576: EUSART_Write('\r');
  8815  05E8  300D               	movlw	13
  8816  05E9  318D  2572  3185   	fcall	_EUSART_Write
  8817                           
  8818                           ;CommunicationManager.c: 577: EUSART_Write('\n');
  8819  05EC  300A               	movlw	10
  8820  05ED  318D  2572  3185   	fcall	_EUSART_Write
  8821                           
  8822                           ;CommunicationManager.c: 579: EUSART_TX_Completed();
  8823  05F0  318D  2559  3185   	fcall	_EUSART_TX_Completed
  8824                           
  8825                           ;CommunicationManager.c: 580: do { LATB6 = 0; } while(0);
  8826  05F3  0022               	movlb	2	; select bank2
  8827  05F4  130D               	bcf	13,6	;volatile
  8828                           
  8829                           ;CommunicationManager.c: 581: EUSART_RX_Enable();
  8830  05F5  318D  2550         	fcall	_EUSART_RX_Enable
  8831  05F7  0008               	return
  8832  05F8                     __end_of_PackageTxResponseNACK:	
  8833                           
  8834                           	psect	text16
  8835  05F8                     __ptext16:	
  8836 ;; *************** function _PackageTxResponseACK *****************
  8837 ;; Defined at:
  8838 ;;		line 502 in file "CommunicationManager.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  frameType       1    wreg     unsigned char 
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;  frameType       1    0[BANK0 ] unsigned char 
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  1    wreg      void 
  8845 ;; Registers used:
  8846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8852 ;;      Params:         0       0       0       0       0       0       0       0
  8853 ;;      Locals:         0       1       0       0       0       0       0       0
  8854 ;;      Temps:          1       0       0       0       0       0       0       0
  8855 ;;      Totals:         1       1       0       0       0       0       0       0
  8856 ;;Total ram usage:        2 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    8
  8859 ;; This function calls:
  8860 ;;		_EUSART_RX_Disable
  8861 ;;		_EUSART_RX_Enable
  8862 ;;		_EUSART_TX_Completed
  8863 ;;		_EUSART_Write
  8864 ;;		_valuetocharHighNibble
  8865 ;;		_valuetocharLowNibble
  8866 ;; This function is called by:
  8867 ;;		_ProtocolManager
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           
  8872                           ;psect for function _PackageTxResponseACK
  8873  05F8                     _PackageTxResponseACK:	
  8874                           
  8875                           ;incstack = 0
  8876                           ; Regs used in _PackageTxResponseACK: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8877                           ;PackageTxResponseACK@frameType stored from wreg
  8878  05F8  0020               	movlb	0	; select bank0
  8879  05F9  00D8               	movwf	PackageTxResponseACK@frameType
  8880                           
  8881                           ;CommunicationManager.c: 505: EUSART_RX_Disable();
  8882  05FA  318D  254D  3185   	fcall	_EUSART_RX_Disable
  8883                           
  8884                           ;CommunicationManager.c: 506: do { LATB6 = 1; } while(0);
  8885  05FD  0022               	movlb	2	; select bank2
  8886  05FE  170D               	bsf	13,6	;volatile
  8887                           
  8888                           ;CommunicationManager.c: 508: EUSART_TX_Completed();
  8889  05FF  318D  2559  3185   	fcall	_EUSART_TX_Completed
  8890                           
  8891                           ;CommunicationManager.c: 510: EUSART_Write('$');
  8892  0602  3024               	movlw	36
  8893  0603  318D  2572  3185   	fcall	_EUSART_Write
  8894                           
  8895                           ;CommunicationManager.c: 511: EUSART_Write('$');
  8896  0606  3024               	movlw	36
  8897  0607  318D  2572  3185   	fcall	_EUSART_Write
  8898                           
  8899                           ;CommunicationManager.c: 512: Checksum=0;
  8900  060A  0020               	movlb	0	; select bank0
  8901  060B  01D6               	clrf	_Checksum
  8902                           
  8903                           ;CommunicationManager.c: 514: EUSART_Write('O');
  8904  060C  304F               	movlw	79
  8905  060D  318D  2572  3185   	fcall	_EUSART_Write
  8906                           
  8907                           ;CommunicationManager.c: 515: Checksum+='O';
  8908  0610  304F               	movlw	79
  8909  0611  00F9               	movwf	??_PackageTxResponseACK
  8910  0612  0879               	movf	??_PackageTxResponseACK,w
  8911  0613  0020               	movlb	0	; select bank0
  8912  0614  07D6               	addwf	_Checksum,f
  8913                           
  8914                           ;CommunicationManager.c: 516: txPacketlength=11;
  8915  0615  300B               	movlw	11
  8916  0616  00F9               	movwf	??_PackageTxResponseACK
  8917  0617  0879               	movf	??_PackageTxResponseACK,w
  8918  0618  00C1               	movwf	_txPacketlength
  8919                           
  8920                           ;CommunicationManager.c: 517: highByteChar=valuetocharHighNibble(txPacketlength);
  8921  0619  0841               	movf	_txPacketlength,w
  8922  061A  318D  25FE  3185   	fcall	_valuetocharHighNibble
  8923  061D  00F9               	movwf	??_PackageTxResponseACK
  8924  061E  0879               	movf	??_PackageTxResponseACK,w
  8925  061F  0020               	movlb	0	; select bank0
  8926  0620  00C3               	movwf	_highByteChar
  8927                           
  8928                           ;CommunicationManager.c: 518: Checksum+=highByteChar;
  8929  0621  0843               	movf	_highByteChar,w
  8930  0622  00F9               	movwf	??_PackageTxResponseACK
  8931  0623  0879               	movf	??_PackageTxResponseACK,w
  8932  0624  07D6               	addwf	_Checksum,f
  8933                           
  8934                           ;CommunicationManager.c: 519: lowByteChar=valuetocharLowNibble(txPacketlength);
  8935  0625  0841               	movf	_txPacketlength,w
  8936  0626  318D  25CE  3185   	fcall	_valuetocharLowNibble
  8937  0629  00F9               	movwf	??_PackageTxResponseACK
  8938  062A  0879               	movf	??_PackageTxResponseACK,w
  8939  062B  0020               	movlb	0	; select bank0
  8940  062C  00C2               	movwf	_lowByteChar
  8941                           
  8942                           ;CommunicationManager.c: 520: Checksum+=lowByteChar;
  8943  062D  0842               	movf	_lowByteChar,w
  8944  062E  00F9               	movwf	??_PackageTxResponseACK
  8945  062F  0879               	movf	??_PackageTxResponseACK,w
  8946  0630  07D6               	addwf	_Checksum,f
  8947                           
  8948                           ;CommunicationManager.c: 521: EUSART_Write(highByteChar);
  8949  0631  0843               	movf	_highByteChar,w
  8950  0632  318D  2572  3185   	fcall	_EUSART_Write
  8951                           
  8952                           ;CommunicationManager.c: 522: EUSART_Write(lowByteChar);
  8953  0635  0020               	movlb	0	; select bank0
  8954  0636  0842               	movf	_lowByteChar,w
  8955  0637  318D  2572  3185   	fcall	_EUSART_Write
  8956                           
  8957                           ;CommunicationManager.c: 524: EUSART_Write(frameType);
  8958  063A  0020               	movlb	0	; select bank0
  8959  063B  0858               	movf	PackageTxResponseACK@frameType,w
  8960  063C  318D  2572  3185   	fcall	_EUSART_Write
  8961                           
  8962                           ;CommunicationManager.c: 525: Checksum+=frameType;
  8963  063F  0020               	movlb	0	; select bank0
  8964  0640  0858               	movf	PackageTxResponseACK@frameType,w
  8965  0641  00F9               	movwf	??_PackageTxResponseACK
  8966  0642  0879               	movf	??_PackageTxResponseACK,w
  8967  0643  07D6               	addwf	_Checksum,f
  8968                           
  8969                           ;CommunicationManager.c: 527: Checksum=~Checksum;
  8970  0644  09D6               	comf	_Checksum,f
  8971                           
  8972                           ;CommunicationManager.c: 528: highByteChar=valuetocharHighNibble(Checksum);
  8973  0645  0856               	movf	_Checksum,w
  8974  0646  318D  25FE  3185   	fcall	_valuetocharHighNibble
  8975  0649  00F9               	movwf	??_PackageTxResponseACK
  8976  064A  0879               	movf	??_PackageTxResponseACK,w
  8977  064B  0020               	movlb	0	; select bank0
  8978  064C  00C3               	movwf	_highByteChar
  8979                           
  8980                           ;CommunicationManager.c: 529: lowByteChar=valuetocharLowNibble(Checksum);
  8981  064D  0856               	movf	_Checksum,w
  8982  064E  318D  25CE  3185   	fcall	_valuetocharLowNibble
  8983  0651  00F9               	movwf	??_PackageTxResponseACK
  8984  0652  0879               	movf	??_PackageTxResponseACK,w
  8985  0653  0020               	movlb	0	; select bank0
  8986  0654  00C2               	movwf	_lowByteChar
  8987                           
  8988                           ;CommunicationManager.c: 530: EUSART_Write(highByteChar);
  8989  0655  0843               	movf	_highByteChar,w
  8990  0656  318D  2572  3185   	fcall	_EUSART_Write
  8991                           
  8992                           ;CommunicationManager.c: 531: EUSART_Write(lowByteChar);
  8993  0659  0020               	movlb	0	; select bank0
  8994  065A  0842               	movf	_lowByteChar,w
  8995  065B  318D  2572  3185   	fcall	_EUSART_Write
  8996                           
  8997                           ;CommunicationManager.c: 534: EUSART_Write('#');
  8998  065E  3023               	movlw	35
  8999  065F  318D  2572  3185   	fcall	_EUSART_Write
  9000                           
  9001                           ;CommunicationManager.c: 535: EUSART_Write('\r');
  9002  0662  300D               	movlw	13
  9003  0663  318D  2572  3185   	fcall	_EUSART_Write
  9004                           
  9005                           ;CommunicationManager.c: 536: EUSART_Write('\n');
  9006  0666  300A               	movlw	10
  9007  0667  318D  2572  3185   	fcall	_EUSART_Write
  9008                           
  9009                           ;CommunicationManager.c: 538: EUSART_TX_Completed();
  9010  066A  318D  2559  3185   	fcall	_EUSART_TX_Completed
  9011                           
  9012                           ;CommunicationManager.c: 539: do { LATB6 = 0; } while(0);
  9013  066D  0022               	movlb	2	; select bank2
  9014  066E  130D               	bcf	13,6	;volatile
  9015                           
  9016                           ;CommunicationManager.c: 540: EUSART_RX_Enable();
  9017  066F  318D  2550         	fcall	_EUSART_RX_Enable
  9018  0671  0008               	return
  9019  0672                     __end_of_PackageTxResponseACK:	
  9020                           
  9021                           	psect	text17
  9022  0DCE                     __ptext17:	
  9023 ;; *************** function _valuetocharLowNibble *****************
  9024 ;; Defined at:
  9025 ;;		line 398 in file "CommunicationManager.c"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;  hexvalue        1    wreg     unsigned char 
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  hexvalue        1    6[COMMON] unsigned char 
  9030 ;;  hexval          1    7[COMMON] unsigned char 
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  1    wreg      unsigned char 
  9033 ;; Registers used:
  9034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9040 ;;      Params:         0       0       0       0       0       0       0       0
  9041 ;;      Locals:         2       0       0       0       0       0       0       0
  9042 ;;      Temps:          1       0       0       0       0       0       0       0
  9043 ;;      Totals:         3       0       0       0       0       0       0       0
  9044 ;;Total ram usage:        3 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    7
  9047 ;; This function calls:
  9048 ;;		_valtoasciichar
  9049 ;; This function is called by:
  9050 ;;		_PackageTxResponseData
  9051 ;;		_PackageTxResponseACK
  9052 ;;		_PackageTxResponseNACK
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           
  9057                           ;psect for function _valuetocharLowNibble
  9058  0DCE                     _valuetocharLowNibble:	
  9059                           
  9060                           ;incstack = 0
  9061                           ; Regs used in _valuetocharLowNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9062                           ;valuetocharLowNibble@hexvalue stored from wreg
  9063  0DCE  00F6               	movwf	valuetocharLowNibble@hexvalue
  9064                           
  9065                           ;CommunicationManager.c: 400: unsigned char hexval;
  9066                           ;CommunicationManager.c: 401: hexval=(unsigned char)((unsigned char)(hexvalue) & 0x0F);
  9067  0DCF  0876               	movf	valuetocharLowNibble@hexvalue,w
  9068  0DD0  390F               	andlw	15
  9069  0DD1  00F5               	movwf	??_valuetocharLowNibble
  9070  0DD2  0875               	movf	??_valuetocharLowNibble,w
  9071  0DD3  00F7               	movwf	valuetocharLowNibble@hexval
  9072                           
  9073                           ;CommunicationManager.c: 402: hexval=valtoasciichar(hexval);
  9074  0DD4  0877               	movf	valuetocharLowNibble@hexval,w
  9075  0DD5  318F  2708         	fcall	_valtoasciichar
  9076  0DD7  00F5               	movwf	??_valuetocharLowNibble
  9077  0DD8  0875               	movf	??_valuetocharLowNibble,w
  9078  0DD9  00F7               	movwf	valuetocharLowNibble@hexval
  9079                           
  9080                           ;CommunicationManager.c: 403: return hexval;
  9081  0DDA  0877               	movf	valuetocharLowNibble@hexval,w
  9082  0DDB  0008               	return
  9083  0DDC                     __end_of_valuetocharLowNibble:	
  9084                           
  9085                           	psect	text18
  9086  0DFE                     __ptext18:	
  9087 ;; *************** function _valuetocharHighNibble *****************
  9088 ;; Defined at:
  9089 ;;		line 389 in file "CommunicationManager.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;  hexvalue        1    wreg     unsigned char 
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  hexvalue        1    7[COMMON] unsigned char 
  9094 ;;  hexval          1    8[COMMON] unsigned char 
  9095 ;; Return value:  Size  Location     Type
  9096 ;;                  1    wreg      unsigned char 
  9097 ;; Registers used:
  9098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9099 ;; Tracked objects:
  9100 ;;		On entry : 0/0
  9101 ;;		On exit  : 0/0
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9104 ;;      Params:         0       0       0       0       0       0       0       0
  9105 ;;      Locals:         2       0       0       0       0       0       0       0
  9106 ;;      Temps:          2       0       0       0       0       0       0       0
  9107 ;;      Totals:         4       0       0       0       0       0       0       0
  9108 ;;Total ram usage:        4 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    7
  9111 ;; This function calls:
  9112 ;;		_valtoasciichar
  9113 ;; This function is called by:
  9114 ;;		_PackageTxResponseData
  9115 ;;		_PackageTxResponseACK
  9116 ;;		_PackageTxResponseNACK
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           
  9121                           ;psect for function _valuetocharHighNibble
  9122  0DFE                     _valuetocharHighNibble:	
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _valuetocharHighNibble: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9126                           ;valuetocharHighNibble@hexvalue stored from wreg
  9127  0DFE  00F7               	movwf	valuetocharHighNibble@hexvalue
  9128                           
  9129                           ;CommunicationManager.c: 391: unsigned char hexval;
  9130                           ;CommunicationManager.c: 392: hexval=(unsigned char)((unsigned char)(hexvalue>>4) & 0x0F
      +                          );
  9131  0DFF  0877               	movf	valuetocharHighNibble@hexvalue,w
  9132  0E00  00F5               	movwf	??_valuetocharHighNibble
  9133  0E01  3004               	movlw	4
  9134  0E02                     u2135:	
  9135  0E02  36F5               	lsrf	??_valuetocharHighNibble,f
  9136  0E03  0B89               	decfsz	9,f
  9137  0E04  2E02               	goto	u2135
  9138  0E05  0875               	movf	??_valuetocharHighNibble,w
  9139  0E06  390F               	andlw	15
  9140  0E07  00F6               	movwf	??_valuetocharHighNibble+1
  9141  0E08  0876               	movf	??_valuetocharHighNibble+1,w
  9142  0E09  00F8               	movwf	valuetocharHighNibble@hexval
  9143                           
  9144                           ;CommunicationManager.c: 393: hexval=valtoasciichar(hexval);
  9145  0E0A  0878               	movf	valuetocharHighNibble@hexval,w
  9146  0E0B  318F  2708         	fcall	_valtoasciichar
  9147  0E0D  00F5               	movwf	??_valuetocharHighNibble
  9148  0E0E  0875               	movf	??_valuetocharHighNibble,w
  9149  0E0F  00F8               	movwf	valuetocharHighNibble@hexval
  9150                           
  9151                           ;CommunicationManager.c: 394: return hexval;
  9152  0E10  0878               	movf	valuetocharHighNibble@hexval,w
  9153  0E11  0008               	return
  9154  0E12                     __end_of_valuetocharHighNibble:	
  9155                           
  9156                           	psect	text19
  9157  0F08                     __ptext19:	
  9158 ;; *************** function _valtoasciichar *****************
  9159 ;; Defined at:
  9160 ;;		line 318 in file "CommunicationManager.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  hexvalue1       1    wreg     unsigned char 
  9163 ;; Auto vars:     Size  Location     Type
  9164 ;;  hexvalue1       1    3[COMMON] unsigned char 
  9165 ;;  hexval          1    4[COMMON] unsigned char 
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  1    wreg      unsigned char 
  9168 ;; Registers used:
  9169 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9175 ;;      Params:         0       0       0       0       0       0       0       0
  9176 ;;      Locals:         2       0       0       0       0       0       0       0
  9177 ;;      Temps:          1       0       0       0       0       0       0       0
  9178 ;;      Totals:         3       0       0       0       0       0       0       0
  9179 ;;Total ram usage:        3 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; Hardware stack levels required when called:    6
  9182 ;; This function calls:
  9183 ;;		Nothing
  9184 ;; This function is called by:
  9185 ;;		_valuetocharHighNibble
  9186 ;;		_valuetocharLowNibble
  9187 ;; This function uses a non-reentrant model
  9188 ;;
  9189                           
  9190                           
  9191                           ;psect for function _valtoasciichar
  9192  0F08                     _valtoasciichar:	
  9193                           
  9194                           ;incstack = 0
  9195                           ; Regs used in _valtoasciichar: [wreg-fsr0h+status,2+status,0]
  9196                           ;valtoasciichar@hexvalue1 stored from wreg
  9197  0F08  00F3               	movwf	valtoasciichar@hexvalue1
  9198                           
  9199                           ;CommunicationManager.c: 320: unsigned char hexval='0';
  9200  0F09  3030               	movlw	48
  9201  0F0A  00F2               	movwf	??_valtoasciichar
  9202  0F0B  0872               	movf	??_valtoasciichar,w
  9203  0F0C  00F4               	movwf	valtoasciichar@hexval
  9204                           
  9205                           ;CommunicationManager.c: 321: switch((unsigned char)hexvalue1)
  9206  0F0D  2F31               	goto	l3628
  9207  0F0E                     l3594:	
  9208                           ;CommunicationManager.c: 322: {
  9209                           ;CommunicationManager.c: 323: case 0x00: hexval= '0'; break;
  9210                           
  9211  0F0E  3030               	movlw	48
  9212  0F0F  2F2D               	goto	L32
  9213  0F10                     l3596:	
  9214                           ;CommunicationManager.c: 324: case 0x01: hexval= '1'; break;
  9215                           
  9216  0F10  3031               	movlw	49
  9217  0F11  2F2D               	goto	L32
  9218  0F12                     l3598:	
  9219                           ;CommunicationManager.c: 325: case 0x02: hexval= '2'; break;
  9220                           
  9221  0F12  3032               	movlw	50
  9222  0F13  2F2D               	goto	L32
  9223  0F14                     l3600:	
  9224                           ;CommunicationManager.c: 326: case 0x03: hexval= '3'; break;
  9225                           
  9226  0F14  3033               	movlw	51
  9227  0F15  2F2D               	goto	L32
  9228  0F16                     l3602:	
  9229                           ;CommunicationManager.c: 327: case 0x04: hexval= '4'; break;
  9230                           
  9231  0F16  3034               	movlw	52
  9232  0F17  2F2D               	goto	L32
  9233  0F18                     l3604:	
  9234                           ;CommunicationManager.c: 328: case 0x05: hexval= '5'; break;
  9235                           
  9236  0F18  3035               	movlw	53
  9237  0F19  2F2D               	goto	L32
  9238  0F1A                     l3606:	
  9239                           ;CommunicationManager.c: 329: case 0x06: hexval= '6'; break;
  9240                           
  9241  0F1A  3036               	movlw	54
  9242  0F1B  2F2D               	goto	L32
  9243  0F1C                     l3608:	
  9244                           ;CommunicationManager.c: 330: case 0x07: hexval= '7'; break;
  9245                           
  9246  0F1C  3037               	movlw	55
  9247  0F1D  2F2D               	goto	L32
  9248  0F1E                     l3610:	
  9249                           ;CommunicationManager.c: 331: case 0x08: hexval= '8'; break;
  9250                           
  9251  0F1E  3038               	movlw	56
  9252  0F1F  2F2D               	goto	L32
  9253  0F20                     l3612:	
  9254                           ;CommunicationManager.c: 332: case 0x09: hexval= '9'; break;
  9255                           
  9256  0F20  3039               	movlw	57
  9257  0F21  2F2D               	goto	L32
  9258  0F22                     l3614:	
  9259                           ;CommunicationManager.c: 333: case 0x0A: hexval= 'A'; break;
  9260                           
  9261  0F22  3041               	movlw	65
  9262  0F23  2F2D               	goto	L32
  9263  0F24                     l3616:	
  9264                           ;CommunicationManager.c: 334: case 0x0B: hexval= 'B'; break;
  9265                           
  9266  0F24  3042               	movlw	66
  9267  0F25  2F2D               	goto	L32
  9268  0F26                     l3618:	
  9269                           ;CommunicationManager.c: 335: case 0x0C: hexval= 'C'; break;
  9270                           
  9271  0F26  3043               	movlw	67
  9272  0F27  2F2D               	goto	L32
  9273  0F28                     l3620:	
  9274                           ;CommunicationManager.c: 336: case 0x0D: hexval= 'D'; break;
  9275                           
  9276  0F28  3044               	movlw	68
  9277  0F29  2F2D               	goto	L32
  9278  0F2A                     l3622:	
  9279                           ;CommunicationManager.c: 337: case 0x0E: hexval= 'E'; break;
  9280                           
  9281  0F2A  3045               	movlw	69
  9282  0F2B  2F2D               	goto	L32
  9283  0F2C                     l3624:	
  9284                           ;CommunicationManager.c: 338: case 0x0F: hexval= 'F'; break;
  9285                           
  9286  0F2C  3046               	movlw	70
  9287  0F2D                     L32:	
  9288  0F2D  00F2               	movwf	??_valtoasciichar
  9289  0F2E  0872               	movf	??_valtoasciichar,w
  9290  0F2F  00F4               	movwf	valtoasciichar@hexval
  9291                           
  9292                           ;CommunicationManager.c: 340: }
  9293                           
  9294                           ;CommunicationManager.c: 339: default : break;
  9295  0F30  2F3B               	goto	l3630
  9296  0F31                     l3628:	
  9297  0F31  0873               	movf	valtoasciichar@hexvalue1,w
  9298                           
  9299                           ; Switch size 1, requested type "space"
  9300                           ; Number of cases is 16, Range of values is 0 to 15
  9301                           ; switch strategies available:
  9302                           ; Name         Instructions Cycles
  9303                           ; direct_byte           38     6 (fixed)
  9304                           ; simple_byte           49    25 (average)
  9305                           ; jumptable            260     6 (fixed)
  9306                           ;	Chosen strategy is direct_byte
  9307  0F32  0084               	movwf	4
  9308  0F33  3010               	movlw	16
  9309  0F34  0204               	subwf	4,w
  9310  0F35  1803               	skipnc
  9311  0F36  2F3B               	goto	l3630
  9312  0F37  3188               	movlp	high S4476
  9313  0F38  3504               	lslf	4,w
  9314  0F39  3E00               	addlw	low S4476
  9315  0F3A  0082               	movwf	2
  9316  0F3B                     l3630:	
  9317                           
  9318                           ;CommunicationManager.c: 341: return hexval;
  9319  0F3B  0874               	movf	valtoasciichar@hexval,w
  9320  0F3C  0008               	return
  9321  0F3D                     __end_of_valtoasciichar:	
  9322                           
  9323                           	psect	swtext2
  9324  0800                     __pswtext2:	
  9325  0800                     S4476:	
  9326  0800  318F  2F0E         	ljmp	l3594
  9327  0802  318F  2F10         	ljmp	l3596
  9328  0804  318F  2F12         	ljmp	l3598
  9329  0806  318F  2F14         	ljmp	l3600
  9330  0808  318F  2F16         	ljmp	l3602
  9331  080A  318F  2F18         	ljmp	l3604
  9332  080C  318F  2F1A         	ljmp	l3606
  9333  080E  318F  2F1C         	ljmp	l3608
  9334  0810  318F  2F1E         	ljmp	l3610
  9335  0812  318F  2F20         	ljmp	l3612
  9336  0814  318F  2F22         	ljmp	l3614
  9337  0816  318F  2F24         	ljmp	l3616
  9338  0818  318F  2F26         	ljmp	l3618
  9339  081A  318F  2F28         	ljmp	l3620
  9340  081C  318F  2F2A         	ljmp	l3622
  9341  081E  318F  2F2C         	ljmp	l3624
  9342                           
  9343                           	psect	text20
  9344  0D72                     __ptext20:	
  9345 ;; *************** function _EUSART_Write *****************
  9346 ;; Defined at:
  9347 ;;		line 96 in file "mcc_generated_files/eusart.c"
  9348 ;; Parameters:    Size  Location     Type
  9349 ;;  txData          1    wreg     unsigned char 
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;  txData          1    2[COMMON] unsigned char 
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  1    wreg      void 
  9354 ;; Registers used:
  9355 ;;		wreg
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9361 ;;      Params:         0       0       0       0       0       0       0       0
  9362 ;;      Locals:         1       0       0       0       0       0       0       0
  9363 ;;      Temps:          0       0       0       0       0       0       0       0
  9364 ;;      Totals:         1       0       0       0       0       0       0       0
  9365 ;;Total ram usage:        1 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    6
  9368 ;; This function calls:
  9369 ;;		Nothing
  9370 ;; This function is called by:
  9371 ;;		_PackageTxResponseData
  9372 ;;		_PackageTxResponseACK
  9373 ;;		_PackageTxResponseNACK
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377                           
  9378                           ;psect for function _EUSART_Write
  9379  0D72                     _EUSART_Write:	
  9380                           
  9381                           ;incstack = 0
  9382                           ; Regs used in _EUSART_Write: [wreg]
  9383                           ;EUSART_Write@txData stored from wreg
  9384  0D72  00F2               	movwf	EUSART_Write@txData
  9385  0D73                     l296:	
  9386                           ;eusart.c: 99: {
  9387                           
  9388                           ;eusart.c: 98: while(0 == PIR1bits.TXIF)
  9389                           
  9390  0D73  0020               	movlb	0	; select bank0
  9391  0D74  1E11               	btfss	17,4	;volatile
  9392  0D75  2D73               	goto	l296
  9393                           
  9394                           ;eusart.c: 100: }
  9395                           ;eusart.c: 102: TX1REG = txData;
  9396  0D76  0872               	movf	EUSART_Write@txData,w
  9397  0D77  0023               	movlb	3	; select bank3
  9398  0D78  009A               	movwf	26	;volatile
  9399  0D79  0008               	return
  9400  0D7A                     __end_of_EUSART_Write:	
  9401                           
  9402                           	psect	text21
  9403  0D59                     __ptext21:	
  9404 ;; *************** function _EUSART_TX_Completed *****************
  9405 ;; Defined at:
  9406 ;;		line 113 in file "mcc_generated_files/eusart.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;		None
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;		None
  9411 ;; Return value:  Size  Location     Type
  9412 ;;                  1    wreg      void 
  9413 ;; Registers used:
  9414 ;;		None
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9420 ;;      Params:         0       0       0       0       0       0       0       0
  9421 ;;      Locals:         0       0       0       0       0       0       0       0
  9422 ;;      Temps:          0       0       0       0       0       0       0       0
  9423 ;;      Totals:         0       0       0       0       0       0       0       0
  9424 ;;Total ram usage:        0 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    6
  9427 ;; This function calls:
  9428 ;;		Nothing
  9429 ;; This function is called by:
  9430 ;;		_PackageTxResponseData
  9431 ;;		_PackageTxResponseACK
  9432 ;;		_PackageTxResponseNACK
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           
  9437                           ;psect for function _EUSART_TX_Completed
  9438  0D59                     _EUSART_TX_Completed:	
  9439  0D59                     l308:	
  9440                           ;eusart.c: 116: {
  9441                           
  9442                           ;eusart.c: 115: while(0 == PIR1bits.TXIF)
  9443                           
  9444                           ;incstack = 0
  9445                           ; Regs used in _EUSART_TX_Completed: []
  9446                           
  9447  0D59  0020               	movlb	0	; select bank0
  9448  0D5A  1A11               	btfsc	17,4	;volatile
  9449  0D5B  0008               	return
  9450  0D5C  2D59               	goto	l308
  9451  0D5D                     __end_of_EUSART_TX_Completed:	
  9452                           
  9453                           	psect	text22
  9454  0D50                     __ptext22:	
  9455 ;; *************** function _EUSART_RX_Enable *****************
  9456 ;; Defined at:
  9457 ;;		line 109 in file "mcc_generated_files/eusart.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;		None
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;		None
  9462 ;; Return value:  Size  Location     Type
  9463 ;;                  1    wreg      void 
  9464 ;; Registers used:
  9465 ;;		None
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9471 ;;      Params:         0       0       0       0       0       0       0       0
  9472 ;;      Locals:         0       0       0       0       0       0       0       0
  9473 ;;      Temps:          0       0       0       0       0       0       0       0
  9474 ;;      Totals:         0       0       0       0       0       0       0       0
  9475 ;;Total ram usage:        0 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    6
  9478 ;; This function calls:
  9479 ;;		Nothing
  9480 ;; This function is called by:
  9481 ;;		_PackageTxResponseData
  9482 ;;		_PackageTxResponseACK
  9483 ;;		_PackageTxResponseNACK
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _EUSART_RX_Enable
  9489  0D50                     _EUSART_RX_Enable:	
  9490                           
  9491                           ;eusart.c: 111: RC1STAbits.CREN = 1;
  9492                           
  9493                           ;incstack = 0
  9494                           ; Regs used in _EUSART_RX_Enable: []
  9495  0D50  0023               	movlb	3	; select bank3
  9496  0D51  161D               	bsf	29,4	;volatile
  9497  0D52  0008               	return
  9498  0D53                     __end_of_EUSART_RX_Enable:	
  9499                           
  9500                           	psect	text23
  9501  0D4D                     __ptext23:	
  9502 ;; *************** function _EUSART_RX_Disable *****************
  9503 ;; Defined at:
  9504 ;;		line 105 in file "mcc_generated_files/eusart.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;		None
  9509 ;; Return value:  Size  Location     Type
  9510 ;;                  1    wreg      void 
  9511 ;; Registers used:
  9512 ;;		None
  9513 ;; Tracked objects:
  9514 ;;		On entry : 0/0
  9515 ;;		On exit  : 0/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9518 ;;      Params:         0       0       0       0       0       0       0       0
  9519 ;;      Locals:         0       0       0       0       0       0       0       0
  9520 ;;      Temps:          0       0       0       0       0       0       0       0
  9521 ;;      Totals:         0       0       0       0       0       0       0       0
  9522 ;;Total ram usage:        0 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:    6
  9525 ;; This function calls:
  9526 ;;		Nothing
  9527 ;; This function is called by:
  9528 ;;		_PackageTxResponseData
  9529 ;;		_PackageTxResponseACK
  9530 ;;		_PackageTxResponseNACK
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           
  9535                           ;psect for function _EUSART_RX_Disable
  9536  0D4D                     _EUSART_RX_Disable:	
  9537                           
  9538                           ;eusart.c: 107: RC1STAbits.CREN = 0;
  9539                           
  9540                           ;incstack = 0
  9541                           ; Regs used in _EUSART_RX_Disable: []
  9542  0D4D  0023               	movlb	3	; select bank3
  9543  0D4E  121D               	bcf	29,4	;volatile
  9544  0D4F  0008               	return
  9545  0D50                     __end_of_EUSART_RX_Disable:	
  9546                           
  9547                           	psect	text24
  9548  06D9                     __ptext24:	
  9549 ;; *************** function _LedONStartConfig *****************
  9550 ;; Defined at:
  9551 ;;		line 15 in file "LED_Ctrl.c"
  9552 ;; Parameters:    Size  Location     Type
  9553 ;;  LEDcolor        1    wreg     unsigned char 
  9554 ;;  LedONDuratio    1    0[BANK0 ] unsigned char 
  9555 ;;  LedONNumBlin    1    1[BANK0 ] unsigned char 
  9556 ;; Auto vars:     Size  Location     Type
  9557 ;;  LEDcolor        1    4[BANK0 ] unsigned char 
  9558 ;; Return value:  Size  Location     Type
  9559 ;;                  1    wreg      unsigned char 
  9560 ;; Registers used:
  9561 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9562 ;; Tracked objects:
  9563 ;;		On entry : 0/0
  9564 ;;		On exit  : 0/0
  9565 ;;		Unchanged: 0/0
  9566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9567 ;;      Params:         0       2       0       0       0       0       0       0
  9568 ;;      Locals:         0       1       0       0       0       0       0       0
  9569 ;;      Temps:          0       2       0       0       0       0       0       0
  9570 ;;      Totals:         0       5       0       0       0       0       0       0
  9571 ;;Total ram usage:        5 bytes
  9572 ;; Hardware stack levels used:    1
  9573 ;; Hardware stack levels required when called:    7
  9574 ;; This function calls:
  9575 ;;		___lwdiv
  9576 ;;		___wmul
  9577 ;; This function is called by:
  9578 ;;		_main
  9579 ;;		_ProtocolManager
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           
  9584                           ;psect for function _LedONStartConfig
  9585  06D9                     _LedONStartConfig:	
  9586                           
  9587                           ;incstack = 0
  9588                           ; Regs used in _LedONStartConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9589                           ;LedONStartConfig@LEDcolor stored from wreg
  9590  06D9  0020               	movlb	0	; select bank0
  9591  06DA  00DC               	movwf	LedONStartConfig@LEDcolor
  9592                           
  9593                           ;LED_Ctrl.c: 17: if(Led_ON!=1 && (LedONDurationSec!=0)&& (LedONDurationSec <= 60))
  9594  06DB  037A               	decf	_Led_ON,w
  9595  06DC  1903               	btfsc	3,2
  9596  06DD  2F3B               	goto	l3868
  9597  06DE  0858               	movf	LedONStartConfig@LedONDurationSec,w
  9598  06DF  1903               	btfsc	3,2
  9599  06E0  2F3B               	goto	l3868
  9600  06E1  303D               	movlw	61
  9601  06E2  0258               	subwf	LedONStartConfig@LedONDurationSec,w
  9602  06E3  1803               	skipnc
  9603  06E4  2F3B               	goto	l3868
  9604                           
  9605                           ;LED_Ctrl.c: 18: {
  9606                           ;LED_Ctrl.c: 19: Led_ON=1;
  9607  06E5  01FA               	clrf	_Led_ON
  9608  06E6  0AFA               	incf	_Led_ON,f
  9609                           
  9610                           ;LED_Ctrl.c: 20: LED_Color=LEDcolor;
  9611  06E7  085C               	movf	LedONStartConfig@LEDcolor,w
  9612  06E8  00DA               	movwf	??_LedONStartConfig
  9613  06E9  085A               	movf	??_LedONStartConfig,w
  9614  06EA  00FB               	movwf	_LED_Color
  9615                           
  9616                           ;LED_Ctrl.c: 22: switch(LED_Color)
  9617  06EB  2EF5               	goto	l3852
  9618  06EC                     l737:	
  9619                           ;LED_Ctrl.c: 23: {
  9620                           ;LED_Ctrl.c: 24: case 0 : do { LATC0 = 1; } while(0);
  9621                           
  9622  06EC  0022               	movlb	2	; select bank2
  9623  06ED  140E               	bsf	14,0	;volatile
  9624                           
  9625                           ;LED_Ctrl.c: 25: break;
  9626  06EE  2F00               	goto	l3854
  9627  06EF                     l741:	
  9628                           ;LED_Ctrl.c: 26: case 1 : do { LATC1 = 1; } while(0);
  9629                           
  9630  06EF  0022               	movlb	2	; select bank2
  9631  06F0  148E               	bsf	14,1	;volatile
  9632                           
  9633                           ;LED_Ctrl.c: 27: break;
  9634  06F1  2F00               	goto	l3854
  9635  06F2                     l744:	
  9636                           ;LED_Ctrl.c: 28: case 2 : do { LATC2 = 1; } while(0);
  9637                           
  9638  06F2  0022               	movlb	2	; select bank2
  9639  06F3  150E               	bsf	14,2	;volatile
  9640                           
  9641                           ;LED_Ctrl.c: 31: }
  9642                           
  9643                           ;LED_Ctrl.c: 30: default : break;
  9644                           
  9645                           ;LED_Ctrl.c: 29: break;
  9646  06F4  2F00               	goto	l3854
  9647  06F5                     l3852:	
  9648  06F5  087B               	movf	_LED_Color,w
  9649                           
  9650                           ; Switch size 1, requested type "space"
  9651                           ; Number of cases is 3, Range of values is 0 to 2
  9652                           ; switch strategies available:
  9653                           ; Name         Instructions Cycles
  9654                           ; simple_byte           10     6 (average)
  9655                           ; direct_byte           12     6 (fixed)
  9656                           ; jumptable            260     6 (fixed)
  9657                           ;	Chosen strategy is simple_byte
  9658  06F6  3A00               	xorlw	0	; case 0
  9659  06F7  1903               	skipnz
  9660  06F8  2EEC               	goto	l737
  9661  06F9  3A01               	xorlw	1	; case 1
  9662  06FA  1903               	skipnz
  9663  06FB  2EEF               	goto	l741
  9664  06FC  3A03               	xorlw	3	; case 2
  9665  06FD  1903               	skipnz
  9666  06FE  2EF2               	goto	l744
  9667  06FF  2F00               	goto	l3854
  9668  0700                     l3854:	
  9669                           
  9670                           ;LED_Ctrl.c: 33: LED_msec_Cnt=0;
  9671  0700  0020               	movlb	0	; select bank0
  9672  0701  01A6               	clrf	_LED_msec_Cnt
  9673  0702  01A7               	clrf	_LED_msec_Cnt+1
  9674                           
  9675                           ;LED_Ctrl.c: 34: LedON_Duration_msec=((unsigned int)LedONDurationSec)*1000;
  9676  0703  0858               	movf	LedONStartConfig@LedONDurationSec,w
  9677  0704  00DA               	movwf	??_LedONStartConfig
  9678  0705  01DB               	clrf	??_LedONStartConfig+1
  9679  0706  085A               	movf	??_LedONStartConfig,w
  9680  0707  00F2               	movwf	___wmul@multiplier
  9681  0708  085B               	movf	??_LedONStartConfig+1,w
  9682  0709  00F3               	movwf	___wmul@multiplier+1
  9683  070A  30E8               	movlw	232
  9684  070B  00F4               	movwf	___wmul@multiplicand
  9685  070C  3003               	movlw	3
  9686  070D  00F5               	movwf	___wmul@multiplicand+1
  9687  070E  318E  2659  3186   	fcall	___wmul
  9688  0711  0873               	movf	?___wmul+1,w
  9689  0712  0020               	movlb	0	; select bank0
  9690  0713  00A1               	movwf	_LedON_Duration_msec+1
  9691  0714  0872               	movf	?___wmul,w
  9692  0715  00A0               	movwf	_LedON_Duration_msec
  9693                           
  9694                           ;LED_Ctrl.c: 35: if(LedONNumBlink > 1)
  9695  0716  3002               	movlw	2
  9696  0717  0259               	subwf	LedONStartConfig@LedONNumBlink,w
  9697  0718  1C03               	skipc
  9698  0719  2F31               	goto	l3862
  9699                           
  9700                           ;LED_Ctrl.c: 36: Blick_tickPointMsec=(LedON_Duration_msec/(((LedONNumBlink-1)*2)+1));
  9701  071A  0859               	movf	LedONStartConfig@LedONNumBlink,w
  9702  071B  00DA               	movwf	??_LedONStartConfig
  9703  071C  01DB               	clrf	??_LedONStartConfig+1
  9704  071D  35DA               	lslf	??_LedONStartConfig,f
  9705  071E  0DDB               	rlf	??_LedONStartConfig+1,f
  9706  071F  085A               	movf	??_LedONStartConfig,w
  9707  0720  3EFF               	addlw	255
  9708  0721  00F2               	movwf	___lwdiv@divisor
  9709  0722  30FF               	movlw	255
  9710  0723  3D5B               	addwfc	??_LedONStartConfig+1,w
  9711  0724  00F3               	movwf	___lwdiv@divisor+1
  9712  0725  0821               	movf	_LedON_Duration_msec+1,w
  9713  0726  00F5               	movwf	___lwdiv@dividend+1
  9714  0727  0820               	movf	_LedON_Duration_msec,w
  9715  0728  00F4               	movwf	___lwdiv@dividend
  9716  0729  318E  26D4  3186   	fcall	___lwdiv
  9717  072C  0873               	movf	?___lwdiv+1,w
  9718  072D  0020               	movlb	0	; select bank0
  9719  072E  00A5               	movwf	_Blick_tickPointMsec+1
  9720  072F  0872               	movf	?___lwdiv,w
  9721  0730  2F34               	goto	L33
  9722  0731                     l3862:	
  9723                           
  9724                           ;LED_Ctrl.c: 37: else
  9725                           ;LED_Ctrl.c: 38: Blick_tickPointMsec=LedON_Duration_msec;
  9726  0731  0821               	movf	_LedON_Duration_msec+1,w
  9727  0732  00A5               	movwf	_Blick_tickPointMsec+1
  9728  0733  0820               	movf	_LedON_Duration_msec,w
  9729  0734                     L33:	
  9730  0734  00A4               	movwf	_Blick_tickPointMsec
  9731                           
  9732                           ;LED_Ctrl.c: 40: Blick_tickPoint=Blick_tickPointMsec;
  9733  0735  0825               	movf	_Blick_tickPointMsec+1,w
  9734  0736  00A3               	movwf	_Blick_tickPoint+1
  9735  0737  0824               	movf	_Blick_tickPointMsec,w
  9736  0738  00A2               	movwf	_Blick_tickPoint
  9737                           
  9738                           ;LED_Ctrl.c: 41: return 1;
  9739  0739  3001               	movlw	1
  9740                           
  9741                           ;LED_Ctrl.c: 42: }
  9742  073A  0008               	return
  9743  073B                     l3868:	
  9744                           
  9745                           ;LED_Ctrl.c: 43: else
  9746                           ;LED_Ctrl.c: 44: {
  9747                           ;LED_Ctrl.c: 45: return 0;
  9748  073B  3000               	movlw	0
  9749  073C  0008               	return
  9750  073D                     __end_of_LedONStartConfig:	
  9751                           
  9752                           	psect	text25
  9753  0E40                     __ptext25:	
  9754 ;; *************** function _FanStartConfig *****************
  9755 ;; Defined at:
  9756 ;;		line 12 in file "Fan_Ctrl.c"
  9757 ;; Parameters:    Size  Location     Type
  9758 ;;  FanONDuratio    1    wreg     unsigned char 
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;  FanONDuratio    1    3[COMMON] unsigned char 
  9761 ;; Return value:  Size  Location     Type
  9762 ;;                  1    wreg      unsigned char 
  9763 ;; Registers used:
  9764 ;;		wreg, status,2, status,0
  9765 ;; Tracked objects:
  9766 ;;		On entry : 0/0
  9767 ;;		On exit  : 0/0
  9768 ;;		Unchanged: 0/0
  9769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9770 ;;      Params:         0       0       0       0       0       0       0       0
  9771 ;;      Locals:         1       0       0       0       0       0       0       0
  9772 ;;      Temps:          1       0       0       0       0       0       0       0
  9773 ;;      Totals:         2       0       0       0       0       0       0       0
  9774 ;;Total ram usage:        2 bytes
  9775 ;; Hardware stack levels used:    1
  9776 ;; Hardware stack levels required when called:    6
  9777 ;; This function calls:
  9778 ;;		Nothing
  9779 ;; This function is called by:
  9780 ;;		_main
  9781 ;;		_ProtocolManager
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           
  9786                           ;psect for function _FanStartConfig
  9787  0E40                     _FanStartConfig:	
  9788                           
  9789                           ;incstack = 0
  9790                           ; Regs used in _FanStartConfig: [wreg+status,2+status,0]
  9791                           ;FanStartConfig@FanONDurationSec stored from wreg
  9792  0E40  00F3               	movwf	FanStartConfig@FanONDurationSec
  9793                           
  9794                           ;Fan_Ctrl.c: 14: if(Fan_ON!=1 && (FanONDurationSec!=0)&& (FanONDurationSec <= 60))
  9795  0E41  0020               	movlb	0	; select bank0
  9796  0E42  0340               	decf	_Fan_ON,w
  9797  0E43  1903               	btfsc	3,2
  9798  0E44  2E57               	goto	l2976
  9799  0E45  0873               	movf	FanStartConfig@FanONDurationSec,w
  9800  0E46  1903               	btfsc	3,2
  9801  0E47  2E57               	goto	l2976
  9802  0E48  303D               	movlw	61
  9803  0E49  0273               	subwf	FanStartConfig@FanONDurationSec,w
  9804  0E4A  1803               	skipnc
  9805  0E4B  2E57               	goto	l2976
  9806                           
  9807                           ;Fan_Ctrl.c: 15: {
  9808                           ;Fan_Ctrl.c: 16: Fan_ON=1;
  9809  0E4C  01C0               	clrf	_Fan_ON
  9810  0E4D  0AC0               	incf	_Fan_ON,f
  9811                           
  9812                           ;Fan_Ctrl.c: 17: LED_Sec_Cnt=0;
  9813  0E4E  01BE               	clrf	_LED_Sec_Cnt
  9814                           
  9815                           ;Fan_Ctrl.c: 18: LedON_Duration_sec=FanONDurationSec;
  9816  0E4F  0873               	movf	FanStartConfig@FanONDurationSec,w
  9817  0E50  00F2               	movwf	??_FanStartConfig
  9818  0E51  0872               	movf	??_FanStartConfig,w
  9819  0E52  00BF               	movwf	_LedON_Duration_sec
  9820                           
  9821                           ;Fan_Ctrl.c: 19: do { LATC6 = 1; } while(0);
  9822  0E53  0022               	movlb	2	; select bank2
  9823  0E54  170E               	bsf	14,6	;volatile
  9824                           
  9825                           ;Fan_Ctrl.c: 20: return 1;
  9826  0E55  3001               	movlw	1
  9827                           
  9828                           ;Fan_Ctrl.c: 21: }
  9829  0E56  0008               	return
  9830  0E57                     l2976:	
  9831                           
  9832                           ;Fan_Ctrl.c: 22: else
  9833                           ;Fan_Ctrl.c: 23: {
  9834                           ;Fan_Ctrl.c: 24: return 0;
  9835  0E57  3000               	movlw	0
  9836  0E58  0008               	return
  9837  0E59                     __end_of_FanStartConfig:	
  9838                           
  9839                           	psect	text26
  9840  0D8C                     __ptext26:	
  9841 ;; *************** function _EUSART_Read *****************
  9842 ;; Defined at:
  9843 ;;		line 78 in file "mcc_generated_files/eusart.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;		None
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;		None
  9848 ;; Return value:  Size  Location     Type
  9849 ;;                  1    wreg      unsigned char 
  9850 ;; Registers used:
  9851 ;;		wreg
  9852 ;; Tracked objects:
  9853 ;;		On entry : 0/0
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9857 ;;      Params:         0       0       0       0       0       0       0       0
  9858 ;;      Locals:         0       0       0       0       0       0       0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0       0
  9860 ;;      Totals:         0       0       0       0       0       0       0       0
  9861 ;;Total ram usage:        0 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    6
  9864 ;; This function calls:
  9865 ;;		Nothing
  9866 ;; This function is called by:
  9867 ;;		_ProtocolManager
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           
  9872                           ;psect for function _EUSART_Read
  9873  0D8C                     _EUSART_Read:	
  9874  0D8C                     l289:	
  9875                           ;eusart.c: 82: {
  9876                           
  9877                           ;eusart.c: 81: while(!PIR1bits.RCIF)
  9878                           
  9879                           ;incstack = 0
  9880                           ; Regs used in _EUSART_Read: [wreg]
  9881                           
  9882  0D8C  0020               	movlb	0	; select bank0
  9883  0D8D  1E91               	btfss	17,5	;volatile
  9884  0D8E  2D8C               	goto	l289
  9885                           
  9886                           ;eusart.c: 83: }
  9887                           ;eusart.c: 85: if(1 == RC1STAbits.OERR)
  9888  0D8F  0023               	movlb	3	; select bank3
  9889  0D90  1C9D               	btfss	29,1	;volatile
  9890  0D91  2D94               	goto	l2890
  9891                           
  9892                           ;eusart.c: 86: {
  9893                           ;eusart.c: 89: RC1STAbits.CREN = 0;
  9894  0D92  121D               	bcf	29,4	;volatile
  9895                           
  9896                           ;eusart.c: 90: RC1STAbits.CREN = 1;
  9897  0D93  161D               	bsf	29,4	;volatile
  9898  0D94                     l2890:	
  9899                           
  9900                           ;eusart.c: 91: }
  9901                           ;eusart.c: 93: return RC1REG;
  9902  0D94  0819               	movf	25,w	;volatile
  9903  0D95  0008               	return
  9904  0D96                     __end_of_EUSART_Read:	
  9905                           
  9906                           	psect	text27
  9907  0E74                     __ptext27:	
  9908 ;; *************** function _DATAEE_WriteByte *****************
  9909 ;; Defined at:
  9910 ;;		line 180 in file "mcc_generated_files/memory.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;  bAdd            2    2[COMMON] unsigned int 
  9913 ;;  bData           1    4[COMMON] unsigned char 
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;  GIEBitValue     1    5[COMMON] unsigned char 
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		wreg, status,2, status,0
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9925 ;;      Params:         3       0       0       0       0       0       0       0
  9926 ;;      Locals:         1       0       0       0       0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0
  9928 ;;      Totals:         4       0       0       0       0       0       0       0
  9929 ;;Total ram usage:        4 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    6
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_ProtocolManager
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           
  9940                           ;psect for function _DATAEE_WriteByte
  9941  0E74                     _DATAEE_WriteByte:	
  9942                           
  9943                           ;memory.c: 182: uint8_t GIEBitValue = INTCONbits.GIE;
  9944                           
  9945                           ;incstack = 0
  9946                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  9947  0E74  3000               	movlw	0
  9948  0E75  1B8B               	btfsc	11,7	;volatile
  9949  0E76  3001               	movlw	1
  9950  0E77  00F5               	movwf	DATAEE_WriteByte@GIEBitValue
  9951                           
  9952                           ;memory.c: 184: NVMADRH = ((bAdd >> 8) & 0xFF);
  9953  0E78  0873               	movf	DATAEE_WriteByte@bAdd+1,w
  9954  0E79  0031               	movlb	17	; select bank17
  9955  0E7A  0092               	movwf	18	;volatile
  9956                           
  9957                           ;memory.c: 185: NVMADRL = (bAdd & 0xFF);
  9958  0E7B  0872               	movf	DATAEE_WriteByte@bAdd,w
  9959  0E7C  0091               	movwf	17	;volatile
  9960                           
  9961                           ;memory.c: 186: NVMDATL = bData;
  9962  0E7D  0874               	movf	DATAEE_WriteByte@bData,w
  9963  0E7E  0093               	movwf	19	;volatile
  9964                           
  9965                           ;memory.c: 187: NVMCON1bits.NVMREGS = 1;
  9966  0E7F  1715               	bsf	21,6	;volsfr
  9967                           
  9968                           ;memory.c: 188: NVMCON1bits.WREN = 1;
  9969  0E80  1515               	bsf	21,2	;volsfr
  9970                           
  9971                           ;memory.c: 189: INTCONbits.GIE = 0;
  9972  0E81  138B               	bcf	11,7	;volatile
  9973                           
  9974                           ;memory.c: 190: NVMCON2 = 0x55;
  9975  0E82  3055               	movlw	85
  9976  0E83  0096               	movwf	22	;volsfr
  9977                           
  9978                           ;memory.c: 191: NVMCON2 = 0xAA;
  9979  0E84  30AA               	movlw	170
  9980  0E85  0096               	movwf	22	;volsfr
  9981                           
  9982                           ;memory.c: 192: NVMCON1bits.WR = 1;
  9983  0E86  1495               	bsf	21,1	;volsfr
  9984  0E87                     l259:	
  9985                           ;memory.c: 195: {
  9986                           
  9987                           ;memory.c: 194: while (NVMCON1bits.WR)
  9988                           
  9989  0E87  1895               	btfsc	21,1	;volsfr
  9990  0E88  2E87               	goto	l259
  9991                           
  9992                           ;memory.c: 196: }
  9993                           ;memory.c: 198: NVMCON1bits.WREN = 0;
  9994  0E89  1115               	bcf	21,2	;volsfr
  9995                           
  9996                           ;memory.c: 199: INTCONbits.GIE = GIEBitValue;
  9997  0E8A  0C75               	rrf	DATAEE_WriteByte@GIEBitValue,w
  9998  0E8B  1C03               	skipc
  9999  0E8C  138B               	bcf	11,7	;volatile
 10000  0E8D  1803               	skipnc
 10001  0E8E  178B               	bsf	11,7	;volatile
 10002  0E8F  0008               	return
 10003  0E90                     __end_of_DATAEE_WriteByte:	
 10004                           
 10005                           	psect	text28
 10006  0DB5                     __ptext28:	
 10007 ;; *************** function _DATAEE_ReadByte *****************
 10008 ;; Defined at:
 10009 ;;		line 202 in file "mcc_generated_files/memory.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;  bAdd            2    2[COMMON] unsigned int 
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;		None
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      unsigned char 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10023 ;;      Params:         2       0       0       0       0       0       0       0
 10024 ;;      Locals:         0       0       0       0       0       0       0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0
 10026 ;;      Totals:         2       0       0       0       0       0       0       0
 10027 ;;Total ram usage:        2 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    6
 10030 ;; This function calls:
 10031 ;;		Nothing
 10032 ;; This function is called by:
 10033 ;;		_ProtocolManager
 10034 ;; This function uses a non-reentrant model
 10035 ;;
 10036                           
 10037                           
 10038                           ;psect for function _DATAEE_ReadByte
 10039  0DB5                     _DATAEE_ReadByte:	
 10040                           
 10041                           ;memory.c: 204: NVMADRH = ((bAdd >> 8) & 0xFF);
 10042                           
 10043                           ;incstack = 0
 10044                           ; Regs used in _DATAEE_ReadByte: [wreg+status,2]
 10045  0DB5  0873               	movf	DATAEE_ReadByte@bAdd+1,w
 10046  0DB6  0031               	movlb	17	; select bank17
 10047  0DB7  0092               	movwf	18	;volatile
 10048                           
 10049                           ;memory.c: 205: NVMADRL = (bAdd & 0xFF);
 10050  0DB8  0872               	movf	DATAEE_ReadByte@bAdd,w
 10051  0DB9  0091               	movwf	17	;volatile
 10052                           
 10053                           ;memory.c: 206: NVMCON1bits.NVMREGS = 1;
 10054  0DBA  1715               	bsf	21,6	;volsfr
 10055                           
 10056                           ;memory.c: 207: NVMCON1bits.RD = 1;
 10057  0DBB  1415               	bsf	21,0	;volsfr
 10058                           
 10059                           ;memory.c: 208: __nop();
 10060  0DBC  0000               	nop
 10061                           
 10062                           ;memory.c: 209: __nop();
 10063  0DBD  0000               	nop
 10064                           
 10065                           ;memory.c: 211: return (NVMDATL);
 10066  0DBE  0031               	movlb	17	; select bank17
 10067  0DBF  0813               	movf	19,w	;volatile
 10068  0DC0  0008               	return
 10069  0DC1                     __end_of_DATAEE_ReadByte:	
 10070                           
 10071                           	psect	text29
 10072  0798                     __ptext29:	
 10073 ;; *************** function _BuzzerStartConfig *****************
 10074 ;; Defined at:
 10075 ;;		line 15 in file "Buzzer_Ctrl.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;  BuzzDuration    1    wreg     unsigned char 
 10078 ;;  BuzzNumBeep     1    0[BANK0 ] unsigned char 
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;  BuzzDuration    1    3[BANK0 ] unsigned char 
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  1    wreg      unsigned char 
 10083 ;; Registers used:
 10084 ;;		wreg, status,2, status,0, pclath, cstack
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10090 ;;      Params:         0       1       0       0       0       0       0       0
 10091 ;;      Locals:         0       1       0       0       0       0       0       0
 10092 ;;      Temps:          0       2       0       0       0       0       0       0
 10093 ;;      Totals:         0       4       0       0       0       0       0       0
 10094 ;;Total ram usage:        4 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:    7
 10097 ;; This function calls:
 10098 ;;		_TMR2_StartTimer
 10099 ;;		_TMR2_WriteTimer
 10100 ;;		___lwdiv
 10101 ;;		___wmul
 10102 ;; This function is called by:
 10103 ;;		_main
 10104 ;;		_ProtocolManager
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           
 10109                           ;psect for function _BuzzerStartConfig
 10110  0798                     _BuzzerStartConfig:	
 10111                           
 10112                           ;incstack = 0
 10113                           ; Regs used in _BuzzerStartConfig: [wreg+status,2+status,0+pclath+cstack]
 10114                           ;BuzzerStartConfig@BuzzDurationSec stored from wreg
 10115  0798  0020               	movlb	0	; select bank0
 10116  0799  00DB               	movwf	BuzzerStartConfig@BuzzDurationSec
 10117                           
 10118                           ;Buzzer_Ctrl.c: 17: if(Buzzer_ON!=1 && (BuzzDurationSec!=0)&& (BuzzDurationSec <= 60))
 10119  079A  0351               	decf	_Buzzer_ON,w
 10120  079B  1903               	btfsc	3,2
 10121  079C  2FE8               	goto	l3836
 10122  079D  085B               	movf	BuzzerStartConfig@BuzzDurationSec,w
 10123  079E  1903               	btfsc	3,2
 10124  079F  2FE8               	goto	l3836
 10125  07A0  303D               	movlw	61
 10126  07A1  025B               	subwf	BuzzerStartConfig@BuzzDurationSec,w
 10127  07A2  1803               	skipnc
 10128  07A3  2FE8               	goto	l3836
 10129                           
 10130                           ;Buzzer_Ctrl.c: 18: {
 10131                           ;Buzzer_Ctrl.c: 19: Buzzer_ON=1;
 10132  07A4  01D1               	clrf	_Buzzer_ON
 10133  07A5  0AD1               	incf	_Buzzer_ON,f
 10134                           
 10135                           ;Buzzer_Ctrl.c: 20: TMR2_WriteTimer(0);
 10136  07A6  3000               	movlw	0
 10137  07A7  318D  2567  3187   	fcall	_TMR2_WriteTimer
 10138                           
 10139                           ;Buzzer_Ctrl.c: 21: TMR2_StartTimer();
 10140  07AA  318D  254A  3187   	fcall	_TMR2_StartTimer
 10141                           
 10142                           ;Buzzer_Ctrl.c: 24: Buzzer_1msec_Cnt=0;
 10143  07AD  0020               	movlb	0	; select bank0
 10144  07AE  01B4               	clrf	_Buzzer_1msec_Cnt
 10145  07AF  01B5               	clrf	_Buzzer_1msec_Cnt+1
 10146                           
 10147                           ;Buzzer_Ctrl.c: 25: Buzzer_Duration_1msec=((unsigned int)BuzzDurationSec)*1000;
 10148  07B0  085B               	movf	BuzzerStartConfig@BuzzDurationSec,w
 10149  07B1  00D9               	movwf	??_BuzzerStartConfig
 10150  07B2  01DA               	clrf	??_BuzzerStartConfig+1
 10151  07B3  0859               	movf	??_BuzzerStartConfig,w
 10152  07B4  00F2               	movwf	___wmul@multiplier
 10153  07B5  085A               	movf	??_BuzzerStartConfig+1,w
 10154  07B6  00F3               	movwf	___wmul@multiplier+1
 10155  07B7  30E8               	movlw	232
 10156  07B8  00F4               	movwf	___wmul@multiplicand
 10157  07B9  3003               	movlw	3
 10158  07BA  00F5               	movwf	___wmul@multiplicand+1
 10159  07BB  318E  2659  3187   	fcall	___wmul
 10160  07BE  0873               	movf	?___wmul+1,w
 10161  07BF  0020               	movlb	0	; select bank0
 10162  07C0  00AF               	movwf	_Buzzer_Duration_1msec+1
 10163  07C1  0872               	movf	?___wmul,w
 10164  07C2  00AE               	movwf	_Buzzer_Duration_1msec
 10165                           
 10166                           ;Buzzer_Ctrl.c: 26: if(BuzzNumBeep > 1)
 10167  07C3  3002               	movlw	2
 10168  07C4  0258               	subwf	BuzzerStartConfig@BuzzNumBeep,w
 10169  07C5  1C03               	skipc
 10170  07C6  2FDE               	goto	l3830
 10171                           
 10172                           ;Buzzer_Ctrl.c: 27: Bbeep_tickPointMsec=(Buzzer_Duration_1msec/(((BuzzNumBeep-1)*2)+1));
 10173  07C7  0858               	movf	BuzzerStartConfig@BuzzNumBeep,w
 10174  07C8  00D9               	movwf	??_BuzzerStartConfig
 10175  07C9  01DA               	clrf	??_BuzzerStartConfig+1
 10176  07CA  35D9               	lslf	??_BuzzerStartConfig,f
 10177  07CB  0DDA               	rlf	??_BuzzerStartConfig+1,f
 10178  07CC  0859               	movf	??_BuzzerStartConfig,w
 10179  07CD  3EFF               	addlw	255
 10180  07CE  00F2               	movwf	___lwdiv@divisor
 10181  07CF  30FF               	movlw	255
 10182  07D0  3D5A               	addwfc	??_BuzzerStartConfig+1,w
 10183  07D1  00F3               	movwf	___lwdiv@divisor+1
 10184  07D2  082F               	movf	_Buzzer_Duration_1msec+1,w
 10185  07D3  00F5               	movwf	___lwdiv@dividend+1
 10186  07D4  082E               	movf	_Buzzer_Duration_1msec,w
 10187  07D5  00F4               	movwf	___lwdiv@dividend
 10188  07D6  318E  26D4  3187   	fcall	___lwdiv
 10189  07D9  0873               	movf	?___lwdiv+1,w
 10190  07DA  0020               	movlb	0	; select bank0
 10191  07DB  00B3               	movwf	_Bbeep_tickPointMsec+1
 10192  07DC  0872               	movf	?___lwdiv,w
 10193  07DD  2FE1               	goto	L34
 10194  07DE                     l3830:	
 10195                           
 10196                           ;Buzzer_Ctrl.c: 28: else
 10197                           ;Buzzer_Ctrl.c: 29: Bbeep_tickPointMsec=Buzzer_Duration_1msec;
 10198  07DE  082F               	movf	_Buzzer_Duration_1msec+1,w
 10199  07DF  00B3               	movwf	_Bbeep_tickPointMsec+1
 10200  07E0  082E               	movf	_Buzzer_Duration_1msec,w
 10201  07E1                     L34:	
 10202  07E1  00B2               	movwf	_Bbeep_tickPointMsec
 10203                           
 10204                           ;Buzzer_Ctrl.c: 31: Bbeep_tickPoint=Bbeep_tickPointMsec;
 10205  07E2  0833               	movf	_Bbeep_tickPointMsec+1,w
 10206  07E3  00B1               	movwf	_Bbeep_tickPoint+1
 10207  07E4  0832               	movf	_Bbeep_tickPointMsec,w
 10208  07E5  00B0               	movwf	_Bbeep_tickPoint
 10209                           
 10210                           ;Buzzer_Ctrl.c: 32: return 1;
 10211  07E6  3001               	movlw	1
 10212                           
 10213                           ;Buzzer_Ctrl.c: 33: }
 10214  07E7  0008               	return
 10215  07E8                     l3836:	
 10216                           
 10217                           ;Buzzer_Ctrl.c: 34: else
 10218                           ;Buzzer_Ctrl.c: 35: {
 10219                           ;Buzzer_Ctrl.c: 36: return 0;
 10220  07E8  3000               	movlw	0
 10221  07E9  0008               	return
 10222  07EA                     __end_of_BuzzerStartConfig:	
 10223                           
 10224                           	psect	text30
 10225  0E59                     __ptext30:	
 10226 ;; *************** function ___wmul *****************
 10227 ;; Defined at:
 10228 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
 10229 ;; Parameters:    Size  Location     Type
 10230 ;;  multiplier      2    2[COMMON] unsigned int 
 10231 ;;  multiplicand    2    4[COMMON] unsigned int 
 10232 ;; Auto vars:     Size  Location     Type
 10233 ;;  product         2    6[COMMON] unsigned int 
 10234 ;; Return value:  Size  Location     Type
 10235 ;;                  2    2[COMMON] unsigned int 
 10236 ;; Registers used:
 10237 ;;		wreg, status,2, status,0
 10238 ;; Tracked objects:
 10239 ;;		On entry : 0/0
 10240 ;;		On exit  : 0/0
 10241 ;;		Unchanged: 0/0
 10242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10243 ;;      Params:         4       0       0       0       0       0       0       0
 10244 ;;      Locals:         2       0       0       0       0       0       0       0
 10245 ;;      Temps:          0       0       0       0       0       0       0       0
 10246 ;;      Totals:         6       0       0       0       0       0       0       0
 10247 ;;Total ram usage:        6 bytes
 10248 ;; Hardware stack levels used:    1
 10249 ;; Hardware stack levels required when called:    6
 10250 ;; This function calls:
 10251 ;;		Nothing
 10252 ;; This function is called by:
 10253 ;;		_BuzzerStartConfig
 10254 ;;		_LedONStartConfig
 10255 ;; This function uses a non-reentrant model
 10256 ;;
 10257                           
 10258                           
 10259                           ;psect for function ___wmul
 10260  0E59                     ___wmul:	
 10261                           
 10262                           ;incstack = 0
 10263                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10264  0E59  01F6               	clrf	___wmul@product
 10265  0E5A  01F7               	clrf	___wmul@product+1
 10266  0E5B                     l3764:	
 10267  0E5B  1C72               	btfss	___wmul@multiplier,0
 10268  0E5C  2E61               	goto	l862
 10269  0E5D  0874               	movf	___wmul@multiplicand,w
 10270  0E5E  07F6               	addwf	___wmul@product,f
 10271  0E5F  0875               	movf	___wmul@multiplicand+1,w
 10272  0E60  3DF7               	addwfc	___wmul@product+1,f
 10273  0E61                     l862:	
 10274  0E61  3001               	movlw	1
 10275  0E62                     u2155:	
 10276  0E62  35F4               	lslf	___wmul@multiplicand,f
 10277  0E63  0DF5               	rlf	___wmul@multiplicand+1,f
 10278  0E64  0B89               	decfsz	9,f
 10279  0E65  2E62               	goto	u2155
 10280  0E66  3001               	movlw	1
 10281  0E67                     u2165:	
 10282  0E67  36F3               	lsrf	___wmul@multiplier+1,f
 10283  0E68  0CF2               	rrf	___wmul@multiplier,f
 10284  0E69  0B89               	decfsz	9,f
 10285  0E6A  2E67               	goto	u2165
 10286  0E6B  0872               	movf	___wmul@multiplier,w
 10287  0E6C  0473               	iorwf	___wmul@multiplier+1,w
 10288  0E6D  1D03               	btfss	3,2
 10289  0E6E  2E5B               	goto	l3764
 10290  0E6F  0877               	movf	___wmul@product+1,w
 10291  0E70  00F3               	movwf	?___wmul+1
 10292  0E71  0876               	movf	___wmul@product,w
 10293  0E72  00F2               	movwf	?___wmul
 10294  0E73  0008               	return
 10295  0E74                     __end_of___wmul:	
 10296                           
 10297                           	psect	text31
 10298  0ED4                     __ptext31:	
 10299 ;; *************** function ___lwdiv *****************
 10300 ;; Defined at:
 10301 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lwdiv.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;  divisor         2    2[COMMON] unsigned int 
 10304 ;;  dividend        2    4[COMMON] unsigned int 
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;  quotient        2    8[COMMON] unsigned int 
 10307 ;;  counter         1    7[COMMON] unsigned char 
 10308 ;; Return value:  Size  Location     Type
 10309 ;;                  2    2[COMMON] unsigned int 
 10310 ;; Registers used:
 10311 ;;		wreg, status,2, status,0
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10317 ;;      Params:         4       0       0       0       0       0       0       0
 10318 ;;      Locals:         3       0       0       0       0       0       0       0
 10319 ;;      Temps:          1       0       0       0       0       0       0       0
 10320 ;;      Totals:         8       0       0       0       0       0       0       0
 10321 ;;Total ram usage:        8 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:    6
 10324 ;; This function calls:
 10325 ;;		Nothing
 10326 ;; This function is called by:
 10327 ;;		_BuzzerStartConfig
 10328 ;;		_LedONStartConfig
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           
 10333                           ;psect for function ___lwdiv
 10334  0ED4                     ___lwdiv:	
 10335                           
 10336                           ;incstack = 0
 10337                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10338  0ED4  01F8               	clrf	___lwdiv@quotient
 10339  0ED5  01F9               	clrf	___lwdiv@quotient+1
 10340  0ED6  0872               	movf	___lwdiv@divisor,w
 10341  0ED7  0473               	iorwf	___lwdiv@divisor+1,w
 10342  0ED8  1903               	btfsc	3,2
 10343  0ED9  2F03               	goto	l3798
 10344  0EDA  01F7               	clrf	___lwdiv@counter
 10345  0EDB  0AF7               	incf	___lwdiv@counter,f
 10346  0EDC                     l3786:	
 10347  0EDC  1BF3               	btfsc	___lwdiv@divisor+1,7
 10348  0EDD  2EE8               	goto	l3788
 10349  0EDE  3001               	movlw	1
 10350  0EDF                     u2195:	
 10351  0EDF  35F2               	lslf	___lwdiv@divisor,f
 10352  0EE0  0DF3               	rlf	___lwdiv@divisor+1,f
 10353  0EE1  0B89               	decfsz	9,f
 10354  0EE2  2EDF               	goto	u2195
 10355  0EE3  3001               	movlw	1
 10356  0EE4  00F6               	movwf	??___lwdiv
 10357  0EE5  0876               	movf	??___lwdiv,w
 10358  0EE6  07F7               	addwf	___lwdiv@counter,f
 10359  0EE7  2EDC               	goto	l3786
 10360  0EE8                     l3788:	
 10361  0EE8  3001               	movlw	1
 10362  0EE9                     u2215:	
 10363  0EE9  35F8               	lslf	___lwdiv@quotient,f
 10364  0EEA  0DF9               	rlf	___lwdiv@quotient+1,f
 10365  0EEB  0B89               	decfsz	9,f
 10366  0EEC  2EE9               	goto	u2215
 10367  0EED  0873               	movf	___lwdiv@divisor+1,w
 10368  0EEE  0275               	subwf	___lwdiv@dividend+1,w
 10369  0EEF  1D03               	skipz
 10370  0EF0  2EF3               	goto	u2225
 10371  0EF1  0872               	movf	___lwdiv@divisor,w
 10372  0EF2  0274               	subwf	___lwdiv@dividend,w
 10373  0EF3                     u2225:	
 10374  0EF3  1C03               	skipc
 10375  0EF4  2EFA               	goto	l3794
 10376  0EF5  0872               	movf	___lwdiv@divisor,w
 10377  0EF6  02F4               	subwf	___lwdiv@dividend,f
 10378  0EF7  0873               	movf	___lwdiv@divisor+1,w
 10379  0EF8  3BF5               	subwfb	___lwdiv@dividend+1,f
 10380  0EF9  1478               	bsf	___lwdiv@quotient,0
 10381  0EFA                     l3794:	
 10382  0EFA  3001               	movlw	1
 10383  0EFB                     u2235:	
 10384  0EFB  36F3               	lsrf	___lwdiv@divisor+1,f
 10385  0EFC  0CF2               	rrf	___lwdiv@divisor,f
 10386  0EFD  0B89               	decfsz	9,f
 10387  0EFE  2EFB               	goto	u2235
 10388  0EFF  3001               	movlw	1
 10389  0F00  02F7               	subwf	___lwdiv@counter,f
 10390  0F01  1D03               	btfss	3,2
 10391  0F02  2EE8               	goto	l3788
 10392  0F03                     l3798:	
 10393  0F03  0879               	movf	___lwdiv@quotient+1,w
 10394  0F04  00F3               	movwf	?___lwdiv+1
 10395  0F05  0878               	movf	___lwdiv@quotient,w
 10396  0F06  00F2               	movwf	?___lwdiv
 10397  0F07  0008               	return
 10398  0F08                     __end_of___lwdiv:	
 10399                           
 10400                           	psect	text32
 10401  0D67                     __ptext32:	
 10402 ;; *************** function _TMR2_WriteTimer *****************
 10403 ;; Defined at:
 10404 ;;		line 105 in file "mcc_generated_files/tmr2.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;  timerVal        1    wreg     unsigned char 
 10407 ;; Auto vars:     Size  Location     Type
 10408 ;;  timerVal        1    2[COMMON] unsigned char 
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  1    wreg      void 
 10411 ;; Registers used:
 10412 ;;		wreg
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10418 ;;      Params:         0       0       0       0       0       0       0       0
 10419 ;;      Locals:         1       0       0       0       0       0       0       0
 10420 ;;      Temps:          0       0       0       0       0       0       0       0
 10421 ;;      Totals:         1       0       0       0       0       0       0       0
 10422 ;;Total ram usage:        1 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    6
 10425 ;; This function calls:
 10426 ;;		Nothing
 10427 ;; This function is called by:
 10428 ;;		_BuzzerStartConfig
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           
 10433                           ;psect for function _TMR2_WriteTimer
 10434  0D67                     _TMR2_WriteTimer:	
 10435                           
 10436                           ;incstack = 0
 10437                           ; Regs used in _TMR2_WriteTimer: [wreg]
 10438                           ;TMR2_WriteTimer@timerVal stored from wreg
 10439  0D67  00F2               	movwf	TMR2_WriteTimer@timerVal
 10440                           
 10441                           ;tmr2.c: 108: TMR2 = timerVal;
 10442  0D68  0872               	movf	TMR2_WriteTimer@timerVal,w
 10443  0D69  0020               	movlb	0	; select bank0
 10444  0D6A  009D               	movwf	29	;volatile
 10445  0D6B  0008               	return
 10446  0D6C                     __end_of_TMR2_WriteTimer:	
 10447                           
 10448                           	psect	text33
 10449  0D4A                     __ptext33:	
 10450 ;; *************** function _TMR2_StartTimer *****************
 10451 ;; Defined at:
 10452 ;;		line 78 in file "mcc_generated_files/tmr2.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;		None
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;		None
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      void 
 10459 ;; Registers used:
 10460 ;;		None
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10466 ;;      Params:         0       0       0       0       0       0       0       0
 10467 ;;      Locals:         0       0       0       0       0       0       0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0
 10469 ;;      Totals:         0       0       0       0       0       0       0       0
 10470 ;;Total ram usage:        0 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    6
 10473 ;; This function calls:
 10474 ;;		Nothing
 10475 ;; This function is called by:
 10476 ;;		_TMR2_Initialize
 10477 ;;		_BuzzerStartConfig
 10478 ;; This function uses a non-reentrant model
 10479 ;;
 10480                           
 10481                           
 10482                           ;psect for function _TMR2_StartTimer
 10483  0D4A                     _TMR2_StartTimer:	
 10484                           
 10485                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
 10486                           
 10487                           ;incstack = 0
 10488                           ; Regs used in _TMR2_StartTimer: []
 10489  0D4A  0020               	movlb	0	; select bank0
 10490  0D4B  151F               	bsf	31,2	;volatile
 10491  0D4C  0008               	return
 10492  0D4D                     __end_of_TMR2_StartTimer:	
 10493                           
 10494                           	psect	text34
 10495  0E27                     __ptext34:	
 10496 ;; *************** function _ADC_GetConversion *****************
 10497 ;; Defined at:
 10498 ;;		line 113 in file "mcc_generated_files/adc.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;  channel         1    wreg     enum E7682
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;  channel         1    5[COMMON] enum E7682
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  2    2[COMMON] unsigned int 
 10505 ;; Registers used:
 10506 ;;		wreg, status,2, status,0
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10512 ;;      Params:         2       0       0       0       0       0       0       0
 10513 ;;      Locals:         1       0       0       0       0       0       0       0
 10514 ;;      Temps:          1       0       0       0       0       0       0       0
 10515 ;;      Totals:         4       0       0       0       0       0       0       0
 10516 ;;Total ram usage:        4 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    6
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_ProtocolManager
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           
 10527                           ;psect for function _ADC_GetConversion
 10528  0E27                     _ADC_GetConversion:	
 10529                           
 10530                           ;incstack = 0
 10531                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 10532                           ;ADC_GetConversion@channel stored from wreg
 10533  0E27  00F5               	movwf	ADC_GetConversion@channel
 10534                           
 10535                           ;adc.c: 116: ADCON0bits.CHS = channel;
 10536  0E28  0875               	movf	ADC_GetConversion@channel,w
 10537  0E29  00F4               	movwf	??_ADC_GetConversion
 10538  0E2A  0DF4               	rlf	??_ADC_GetConversion,f
 10539  0E2B  0DF4               	rlf	??_ADC_GetConversion,f
 10540  0E2C  0021               	movlb	1	; select bank1
 10541  0E2D  081D               	movf	29,w	;volatile
 10542  0E2E  0674               	xorwf	??_ADC_GetConversion,w
 10543  0E2F  3903               	andlw	-253
 10544  0E30  0674               	xorwf	??_ADC_GetConversion,w
 10545  0E31  009D               	movwf	29	;volatile
 10546                           
 10547                           ;adc.c: 119: ADCON0bits.ADON = 1;
 10548  0E32  141D               	bsf	29,0	;volatile
 10549                           
 10550                           ;adc.c: 122: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10551  0E33  3003               	movlw	3
 10552  0E34                     u2937:	
 10553  0E34  0B89               	decfsz	9,f
 10554  0E35  2E34               	goto	u2937
 10555  0E36  0000               	nop
 10556                           
 10557                           ;adc.c: 125: ADCON0bits.ADGO = 1;
 10558  0E37  0021               	movlb	1	; select bank1
 10559  0E38  149D               	bsf	29,1	;volatile
 10560  0E39                     l80:	
 10561                           ;adc.c: 129: {
 10562                           
 10563                           ;adc.c: 128: while (ADCON0bits.ADGO)
 10564                           
 10565  0E39  189D               	btfsc	29,1	;volatile
 10566  0E3A  2E39               	goto	l80
 10567                           
 10568                           ;adc.c: 130: }
 10569                           ;adc.c: 133: return ((ADRESH << 8) + ADRESL);
 10570  0E3B  081C               	movf	28,w	;volatile
 10571  0E3C  00F3               	movwf	?_ADC_GetConversion+1
 10572  0E3D  081B               	movf	27,w	;volatile
 10573  0E3E  00F2               	movwf	?_ADC_GetConversion
 10574  0E3F  0008               	return
 10575  0E40                     __end_of_ADC_GetConversion:	
 10576                           
 10577                           	psect	text35
 10578  0002                     __ptext35:	
 10579 ;; *************** function _LedONStatusBusy *****************
 10580 ;; Defined at:
 10581 ;;		line 9 in file "LED_Ctrl.c"
 10582 ;; Parameters:    Size  Location     Type
 10583 ;;		None
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;		None
 10586 ;; Return value:  Size  Location     Type
 10587 ;;                  1    wreg      unsigned char 
 10588 ;; Registers used:
 10589 ;;		wreg
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10595 ;;      Params:         0       0       0       0       0       0       0       0
 10596 ;;      Locals:         0       0       0       0       0       0       0       0
 10597 ;;      Temps:          0       0       0       0       0       0       0       0
 10598 ;;      Totals:         0       0       0       0       0       0       0       0
 10599 ;;Total ram usage:        0 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:    6
 10602 ;; This function calls:
 10603 ;;		Nothing
 10604 ;; This function is called by:
 10605 ;;		_main
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609                           
 10610                           ;psect for function _LedONStatusBusy
 10611  0002                     _LedONStatusBusy:	
 10612                           
 10613                           ;LED_Ctrl.c: 11: return Led_ON;
 10614                           
 10615                           ;incstack = 0
 10616                           ; Regs used in _LedONStatusBusy: [wreg]
 10617  0002  087A               	movf	_Led_ON,w
 10618  0003  0008               	return
 10619  0004                     __end_of_LedONStatusBusy:	
 10620                           
 10621                           	psect	intentry
 10622  0004                     __pintentry:	
 10623 ;; *************** function _INTERRUPT_InterruptManager *****************
 10624 ;; Defined at:
 10625 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;		None
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;		None
 10630 ;; Return value:  Size  Location     Type
 10631 ;;                  1    wreg      void 
 10632 ;; Registers used:
 10633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10639 ;;      Params:         0       0       0       0       0       0       0       0
 10640 ;;      Locals:         0       0       0       0       0       0       0       0
 10641 ;;      Temps:          1       0       0       0       0       0       0       0
 10642 ;;      Totals:         1       0       0       0       0       0       0       0
 10643 ;;Total ram usage:        1 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; Hardware stack levels required when called:    5
 10646 ;; This function calls:
 10647 ;;		_TMR0_ISR
 10648 ;; This function is called by:
 10649 ;;		Interrupt level 1
 10650 ;; This function uses a non-reentrant model
 10651 ;;
 10652                           
 10653  0004                     _INTERRUPT_InterruptManager:	
 10654                           
 10655                           ;incstack = 0
 10656  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10657                           
 10658                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10659  0005  3180               	pagesel	$
 10660  0006  0020               	movlb	0	; select bank0
 10661  0007  087F               	movf	127,w
 10662  0008  00F1               	movwf	??_INTERRUPT_InterruptManager
 10663                           
 10664                           ;interrupt_manager.c: 55: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 10665  0009  0021               	movlb	1	; select bank1
 10666  000A  1E90               	btfss	16,5	;volatile
 10667  000B  2811               	goto	i1l218
 10668  000C  0020               	movlb	0	; select bank0
 10669  000D  1E90               	btfss	16,5	;volatile
 10670  000E  2811               	goto	i1l218
 10671                           
 10672                           ;interrupt_manager.c: 56: {
 10673                           ;interrupt_manager.c: 57: TMR0_ISR();
 10674  000F  318D  2562         	fcall	_TMR0_ISR
 10675  0011                     i1l218:	
 10676                           ;interrupt_manager.c: 59: else
 10677                           ;interrupt_manager.c: 60: {
 10678                           
 10679                           ;interrupt_manager.c: 58: }
 10680                           
 10681  0011  0871               	movf	??_INTERRUPT_InterruptManager,w
 10682  0012  0020               	movlb	0	; select bank0
 10683  0013  00FF               	movwf	127
 10684  0014  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10685  0015  0009               	retfie
 10686  0016                     __end_of_INTERRUPT_InterruptManager:	
 10687                           
 10688                           	psect	text37
 10689  0D62                     __ptext37:	
 10690 ;; *************** function _TMR0_ISR *****************
 10691 ;; Defined at:
 10692 ;;		line 121 in file "mcc_generated_files/tmr0.c"
 10693 ;; Parameters:    Size  Location     Type
 10694 ;;		None
 10695 ;; Auto vars:     Size  Location     Type
 10696 ;;		None
 10697 ;; Return value:  Size  Location     Type
 10698 ;;                  1    wreg      void 
 10699 ;; Registers used:
 10700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10701 ;; Tracked objects:
 10702 ;;		On entry : 0/0
 10703 ;;		On exit  : 0/0
 10704 ;;		Unchanged: 0/0
 10705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10706 ;;      Params:         0       0       0       0       0       0       0       0
 10707 ;;      Locals:         0       0       0       0       0       0       0       0
 10708 ;;      Temps:          0       0       0       0       0       0       0       0
 10709 ;;      Totals:         0       0       0       0       0       0       0       0
 10710 ;;Total ram usage:        0 bytes
 10711 ;; Hardware stack levels used:    1
 10712 ;; Hardware stack levels required when called:    4
 10713 ;; This function calls:
 10714 ;;		_TMR0_CallBack
 10715 ;; This function is called by:
 10716 ;;		_INTERRUPT_InterruptManager
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           
 10721                           ;psect for function _TMR0_ISR
 10722  0D62                     _TMR0_ISR:	
 10723                           
 10724                           ;tmr0.c: 124: PIR0bits.TMR0IF = 0;
 10725                           
 10726                           ;incstack = 0
 10727                           ; Regs used in _TMR0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10728  0D62  0020               	movlb	0	; select bank0
 10729  0D63  1290               	bcf	16,5	;volatile
 10730                           
 10731                           ;tmr0.c: 128: TMR0_CallBack();
 10732  0D64  318D  2547         	fcall	_TMR0_CallBack
 10733  0D66  0008               	return
 10734  0D67                     __end_of_TMR0_ISR:	
 10735                           
 10736                           	psect	text38
 10737  0D47                     __ptext38:	
 10738 ;; *************** function _TMR0_CallBack *****************
 10739 ;; Defined at:
 10740 ;;		line 133 in file "mcc_generated_files/tmr0.c"
 10741 ;; Parameters:    Size  Location     Type
 10742 ;;		None
 10743 ;; Auto vars:     Size  Location     Type
 10744 ;;		None
 10745 ;; Return value:  Size  Location     Type
 10746 ;;                  1    wreg      void 
 10747 ;; Registers used:
 10748 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10749 ;; Tracked objects:
 10750 ;;		On entry : 0/0
 10751 ;;		On exit  : 0/0
 10752 ;;		Unchanged: 0/0
 10753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10754 ;;      Params:         0       0       0       0       0       0       0       0
 10755 ;;      Locals:         0       0       0       0       0       0       0       0
 10756 ;;      Temps:          0       0       0       0       0       0       0       0
 10757 ;;      Totals:         0       0       0       0       0       0       0       0
 10758 ;;Total ram usage:        0 bytes
 10759 ;; Hardware stack levels used:    1
 10760 ;; Hardware stack levels required when called:    3
 10761 ;; This function calls:
 10762 ;;		_One_msec_task
 10763 ;; This function is called by:
 10764 ;;		_TMR0_ISR
 10765 ;; This function uses a non-reentrant model
 10766 ;;
 10767                           
 10768                           
 10769                           ;psect for function _TMR0_CallBack
 10770  0D47                     _TMR0_CallBack:	
 10771                           
 10772                           ;tmr0.c: 137: One_msec_task();
 10773                           
 10774                           ;incstack = 0
 10775                           ; Regs used in _TMR0_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10776  0D47  318E  2690         	fcall	_One_msec_task
 10777  0D49  0008               	return
 10778  0D4A                     __end_of_TMR0_CallBack:	
 10779                           
 10780                           	psect	text39
 10781  0E90                     __ptext39:	
 10782 ;; *************** function _One_msec_task *****************
 10783 ;; Defined at:
 10784 ;;		line 137 in file "main.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;		None
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;		None
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10798 ;;      Params:         0       0       0       0       0       0       0       0
 10799 ;;      Locals:         0       0       0       0       0       0       0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0
 10801 ;;      Totals:         0       0       0       0       0       0       0       0
 10802 ;;Total ram usage:        0 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    2
 10805 ;; This function calls:
 10806 ;;		_Buzzer_Control_msec
 10807 ;;		_LedON_Control_msec
 10808 ;;		_One_sec_task
 10809 ;; This function is called by:
 10810 ;;		_TMR0_CallBack
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           
 10815                           ;psect for function _One_msec_task
 10816  0E90                     _One_msec_task:	
 10817                           
 10818                           ;main.c: 139: Buzzer_Control_msec();
 10819                           
 10820                           ;incstack = 0
 10821                           ; Regs used in _One_msec_task: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10822  0E90  318F  273D  318E   	fcall	_Buzzer_Control_msec
 10823                           
 10824                           ;main.c: 140: LedON_Control_msec();
 10825  0E93  318F  27B3  318E   	fcall	_LedON_Control_msec
 10826                           
 10827                           ;main.c: 141: DelayMsecCount++;
 10828  0E96  3001               	movlw	1
 10829  0E97  0020               	movlb	0	; select bank0
 10830  0E98  07B8               	addwf	_DelayMsecCount,f
 10831  0E99  3000               	movlw	0
 10832  0E9A  3DB9               	addwfc	_DelayMsecCount+1,f
 10833                           
 10834                           ;main.c: 142: Msec10_cnt++;
 10835  0E9B  3001               	movlw	1
 10836  0E9C  07BA               	addwf	_Msec10_cnt,f
 10837  0E9D  3000               	movlw	0
 10838  0E9E  3DBB               	addwfc	_Msec10_cnt+1,f
 10839                           
 10840                           ;main.c: 143: if(Msec_cnt++ == 1000)
 10841  0E9F  3001               	movlw	1
 10842  0EA0  07BC               	addwf	_Msec_cnt,f
 10843  0EA1  3000               	movlw	0
 10844  0EA2  3DBD               	addwfc	_Msec_cnt+1,f
 10845  0EA3  30E9               	movlw	233
 10846  0EA4  063C               	xorwf	_Msec_cnt,w
 10847  0EA5  3003               	movlw	3
 10848  0EA6  1903               	skipnz
 10849  0EA7  063D               	xorwf	_Msec_cnt+1,w
 10850  0EA8  1D03               	btfss	3,2
 10851  0EA9  0008               	return
 10852                           
 10853                           ;main.c: 144: {
 10854                           ;main.c: 145: Msec_cnt=0;
 10855  0EAA  01BC               	clrf	_Msec_cnt
 10856  0EAB  01BD               	clrf	_Msec_cnt+1
 10857                           
 10858                           ;main.c: 146: One_sec_task();
 10859  0EAC  318D  2544         	fcall	_One_sec_task
 10860  0EAE  0008               	return
 10861  0EAF                     __end_of_One_msec_task:	
 10862                           
 10863                           	psect	text40
 10864  0D44                     __ptext40:	
 10865 ;; *************** function _One_sec_task *****************
 10866 ;; Defined at:
 10867 ;;		line 152 in file "main.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;		None
 10870 ;; Auto vars:     Size  Location     Type
 10871 ;;		None
 10872 ;; Return value:  Size  Location     Type
 10873 ;;                  1    wreg      void 
 10874 ;; Registers used:
 10875 ;;		wreg, status,2, status,0, pclath, cstack
 10876 ;; Tracked objects:
 10877 ;;		On entry : 0/0
 10878 ;;		On exit  : 0/0
 10879 ;;		Unchanged: 0/0
 10880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10881 ;;      Params:         0       0       0       0       0       0       0       0
 10882 ;;      Locals:         0       0       0       0       0       0       0       0
 10883 ;;      Temps:          0       0       0       0       0       0       0       0
 10884 ;;      Totals:         0       0       0       0       0       0       0       0
 10885 ;;Total ram usage:        0 bytes
 10886 ;; Hardware stack levels used:    1
 10887 ;; Hardware stack levels required when called:    1
 10888 ;; This function calls:
 10889 ;;		_Fan_Control_Sec
 10890 ;; This function is called by:
 10891 ;;		_One_msec_task
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           
 10896                           ;psect for function _One_sec_task
 10897  0D44                     _One_sec_task:	
 10898                           
 10899                           ;main.c: 154: Fan_Control_Sec();
 10900                           
 10901                           ;incstack = 0
 10902                           ; Regs used in _One_sec_task: [wreg+status,2+status,0+pclath+cstack]
 10903  0D44  318D  25EC         	fcall	_Fan_Control_Sec
 10904  0D46  0008               	return
 10905  0D47                     __end_of_One_sec_task:	
 10906                           
 10907                           	psect	text41
 10908  0DEC                     __ptext41:	
 10909 ;; *************** function _Fan_Control_Sec *****************
 10910 ;; Defined at:
 10911 ;;		line 30 in file "Fan_Ctrl.c"
 10912 ;; Parameters:    Size  Location     Type
 10913 ;;		None
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;		None
 10916 ;; Return value:  Size  Location     Type
 10917 ;;                  1    wreg      void 
 10918 ;; Registers used:
 10919 ;;		wreg, status,2, status,0
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10925 ;;      Params:         0       0       0       0       0       0       0       0
 10926 ;;      Locals:         0       0       0       0       0       0       0       0
 10927 ;;      Temps:          1       0       0       0       0       0       0       0
 10928 ;;      Totals:         1       0       0       0       0       0       0       0
 10929 ;;Total ram usage:        1 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; This function calls:
 10932 ;;		Nothing
 10933 ;; This function is called by:
 10934 ;;		_One_sec_task
 10935 ;; This function uses a non-reentrant model
 10936 ;;
 10937                           
 10938                           
 10939                           ;psect for function _Fan_Control_Sec
 10940  0DEC                     _Fan_Control_Sec:	
 10941                           
 10942                           ;Fan_Ctrl.c: 32: if(1==Fan_ON)
 10943                           
 10944                           ;incstack = 0
 10945                           ; Regs used in _Fan_Control_Sec: [wreg+status,2+status,0]
 10946  0DEC  0020               	movlb	0	; select bank0
 10947  0DED  0340               	decf	_Fan_ON,w
 10948  0DEE  1D03               	btfss	3,2
 10949  0DEF  0008               	return
 10950                           
 10951                           ;Fan_Ctrl.c: 33: {
 10952                           ;Fan_Ctrl.c: 34: if(LED_Sec_Cnt++ == LedON_Duration_sec)
 10953  0DF0  3001               	movlw	1
 10954  0DF1  00F0               	movwf	??_Fan_Control_Sec
 10955  0DF2  0870               	movf	??_Fan_Control_Sec,w
 10956  0DF3  07BE               	addwf	_LED_Sec_Cnt,f
 10957  0DF4  0A3F               	incf	_LedON_Duration_sec,w
 10958  0DF5  063E               	xorwf	_LED_Sec_Cnt,w
 10959  0DF6  1D03               	skipz
 10960  0DF7  0008               	return
 10961                           
 10962                           ;Fan_Ctrl.c: 35: {
 10963                           ;Fan_Ctrl.c: 36: do { LATC6 = 0; } while(0);
 10964  0DF8  0022               	movlb	2	; select bank2
 10965  0DF9  130E               	bcf	14,6	;volatile
 10966                           
 10967                           ;Fan_Ctrl.c: 37: Fan_ON=0;
 10968  0DFA  0020               	movlb	0	; select bank0
 10969  0DFB  01C0               	clrf	_Fan_ON
 10970                           
 10971                           ;Fan_Ctrl.c: 38: LED_Sec_Cnt=0;
 10972  0DFC  01BE               	clrf	_LED_Sec_Cnt
 10973  0DFD  0008               	return
 10974  0DFE                     __end_of_Fan_Control_Sec:	
 10975                           
 10976                           	psect	text42
 10977  0FB3                     __ptext42:	
 10978 ;; *************** function _LedON_Control_msec *****************
 10979 ;; Defined at:
 10980 ;;		line 51 in file "LED_Ctrl.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;		None
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;		None
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  1    wreg      void 
 10987 ;; Registers used:
 10988 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10989 ;; Tracked objects:
 10990 ;;		On entry : 0/0
 10991 ;;		On exit  : 0/0
 10992 ;;		Unchanged: 0/0
 10993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10994 ;;      Params:         0       0       0       0       0       0       0       0
 10995 ;;      Locals:         0       0       0       0       0       0       0       0
 10996 ;;      Temps:          0       0       0       0       0       0       0       0
 10997 ;;      Totals:         0       0       0       0       0       0       0       0
 10998 ;;Total ram usage:        0 bytes
 10999 ;; Hardware stack levels used:    1
 11000 ;; This function calls:
 11001 ;;		Nothing
 11002 ;; This function is called by:
 11003 ;;		_One_msec_task
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           
 11008                           ;psect for function _LedON_Control_msec
 11009  0FB3                     _LedON_Control_msec:	
 11010                           
 11011                           ;LED_Ctrl.c: 53: if(1==Led_ON)
 11012                           
 11013                           ;incstack = 0
 11014                           ; Regs used in _LedON_Control_msec: [wreg-fsr0h+status,2+status,0]
 11015  0FB3  037A               	decf	_Led_ON,w
 11016  0FB4  1D03               	btfss	3,2
 11017  0FB5  0008               	return
 11018                           
 11019                           ;LED_Ctrl.c: 54: {
 11020                           ;LED_Ctrl.c: 56: if(LED_msec_Cnt == Blick_tickPoint)
 11021  0FB6  0020               	movlb	0	; select bank0
 11022  0FB7  0823               	movf	_Blick_tickPoint+1,w
 11023  0FB8  0627               	xorwf	_LED_msec_Cnt+1,w
 11024  0FB9  1D03               	skipz
 11025  0FBA  2FBD               	goto	u119_25
 11026  0FBB  0822               	movf	_Blick_tickPoint,w
 11027  0FBC  0626               	xorwf	_LED_msec_Cnt,w
 11028  0FBD                     u119_25:	
 11029  0FBD  1903               	btfsc	3,2
 11030  0FBE  2FC8               	goto	i1l2642
 11031  0FBF  2FDA               	goto	i1l2646
 11032  0FC0                     i1l2634:	
 11033                           ;LED_Ctrl.c: 59: {
 11034                           ;LED_Ctrl.c: 60: case 0 : do { LATC0 = ~LATC0; } while(0);
 11035                           
 11036                           ;LED_Ctrl.c: 57: {
 11037                           ;LED_Ctrl.c: 58: switch(LED_Color)
 11038                           
 11039  0FC0  3001               	movlw	1
 11040  0FC1  2FC5               	goto	L36
 11041  0FC2                     i1l2636:	
 11042                           ;LED_Ctrl.c: 62: case 1 : do { LATC1 = ~LATC1; } while(0);
 11043                           
 11044                           ;LED_Ctrl.c: 61: break;
 11045                           
 11046  0FC2  3002               	movlw	2
 11047  0FC3  2FC5               	goto	L36
 11048  0FC4                     i1l2638:	
 11049                           ;LED_Ctrl.c: 64: case 2 : do { LATC2 = ~LATC2; } while(0);
 11050                           
 11051                           ;LED_Ctrl.c: 63: break;
 11052                           
 11053  0FC4  3004               	movlw	4
 11054  0FC5                     L36:	
 11055  0FC5  0022               	movlb	2	; select bank2
 11056  0FC6  068E               	xorwf	14,f
 11057                           
 11058                           ;LED_Ctrl.c: 67: }
 11059                           
 11060                           ;LED_Ctrl.c: 66: default : break;
 11061                           
 11062                           ;LED_Ctrl.c: 65: break;
 11063  0FC7  2FD3               	goto	i1l2644
 11064  0FC8                     i1l2642:	
 11065  0FC8  087B               	movf	_LED_Color,w
 11066                           
 11067                           ; Switch size 1, requested type "space"
 11068                           ; Number of cases is 3, Range of values is 0 to 2
 11069                           ; switch strategies available:
 11070                           ; Name         Instructions Cycles
 11071                           ; simple_byte           10     6 (average)
 11072                           ; direct_byte           12     6 (fixed)
 11073                           ; jumptable            260     6 (fixed)
 11074                           ;	Chosen strategy is simple_byte
 11075  0FC9  3A00               	xorlw	0	; case 0
 11076  0FCA  1903               	skipnz
 11077  0FCB  2FC0               	goto	i1l2634
 11078  0FCC  3A01               	xorlw	1	; case 1
 11079  0FCD  1903               	skipnz
 11080  0FCE  2FC2               	goto	i1l2636
 11081  0FCF  3A03               	xorlw	3	; case 2
 11082  0FD0  1903               	skipnz
 11083  0FD1  2FC4               	goto	i1l2638
 11084  0FD2  2FD3               	goto	i1l2644
 11085  0FD3                     i1l2644:	
 11086                           
 11087                           ;LED_Ctrl.c: 70: Blick_tickPoint=Blick_tickPoint+Blick_tickPointMsec;
 11088  0FD3  0020               	movlb	0	; select bank0
 11089  0FD4  0824               	movf	_Blick_tickPointMsec,w
 11090  0FD5  0722               	addwf	_Blick_tickPoint,w
 11091  0FD6  00A2               	movwf	_Blick_tickPoint
 11092  0FD7  0825               	movf	_Blick_tickPointMsec+1,w
 11093  0FD8  3D23               	addwfc	_Blick_tickPoint+1,w
 11094  0FD9  00A3               	movwf	_Blick_tickPoint+1
 11095  0FDA                     i1l2646:	
 11096                           
 11097                           ;LED_Ctrl.c: 72: }
 11098                           ;LED_Ctrl.c: 74: if(LED_msec_Cnt > LedON_Duration_msec)
 11099  0FDA  0827               	movf	_LED_msec_Cnt+1,w
 11100  0FDB  0221               	subwf	_LedON_Duration_msec+1,w
 11101  0FDC  1D03               	skipz
 11102  0FDD  2FE0               	goto	u120_25
 11103  0FDE  0826               	movf	_LED_msec_Cnt,w
 11104  0FDF  0220               	subwf	_LedON_Duration_msec,w
 11105  0FE0                     u120_25:	
 11106  0FE0  1C03               	btfss	3,0
 11107  0FE1  2FEC               	goto	i1l2652
 11108  0FE2  2FFB               	goto	i1l2656
 11109  0FE3                     i1l770:	
 11110                           ;LED_Ctrl.c: 77: {
 11111                           ;LED_Ctrl.c: 78: case 0 : do { LATC0 = 0; } while(0);
 11112                           
 11113                           ;LED_Ctrl.c: 75: {
 11114                           ;LED_Ctrl.c: 76: switch(LED_Color)
 11115                           
 11116  0FE3  0022               	movlb	2	; select bank2
 11117  0FE4  100E               	bcf	14,0	;volatile
 11118                           
 11119                           ;LED_Ctrl.c: 79: break;
 11120  0FE5  2FF7               	goto	i1l2654
 11121  0FE6                     i1l774:	
 11122                           ;LED_Ctrl.c: 80: case 1 : do { LATC1 = 0; } while(0);
 11123                           
 11124  0FE6  0022               	movlb	2	; select bank2
 11125  0FE7  108E               	bcf	14,1	;volatile
 11126                           
 11127                           ;LED_Ctrl.c: 81: break;
 11128  0FE8  2FF7               	goto	i1l2654
 11129  0FE9                     i1l777:	
 11130                           ;LED_Ctrl.c: 82: case 2 : do { LATC2 = 0; } while(0);
 11131                           
 11132  0FE9  0022               	movlb	2	; select bank2
 11133  0FEA  110E               	bcf	14,2	;volatile
 11134                           
 11135                           ;LED_Ctrl.c: 85: }
 11136                           
 11137                           ;LED_Ctrl.c: 84: default : break;
 11138                           
 11139                           ;LED_Ctrl.c: 83: break;
 11140  0FEB  2FF7               	goto	i1l2654
 11141  0FEC                     i1l2652:	
 11142  0FEC  087B               	movf	_LED_Color,w
 11143                           
 11144                           ; Switch size 1, requested type "space"
 11145                           ; Number of cases is 3, Range of values is 0 to 2
 11146                           ; switch strategies available:
 11147                           ; Name         Instructions Cycles
 11148                           ; simple_byte           10     6 (average)
 11149                           ; direct_byte           12     6 (fixed)
 11150                           ; jumptable            260     6 (fixed)
 11151                           ;	Chosen strategy is simple_byte
 11152  0FED  3A00               	xorlw	0	; case 0
 11153  0FEE  1903               	skipnz
 11154  0FEF  2FE3               	goto	i1l770
 11155  0FF0  3A01               	xorlw	1	; case 1
 11156  0FF1  1903               	skipnz
 11157  0FF2  2FE6               	goto	i1l774
 11158  0FF3  3A03               	xorlw	3	; case 2
 11159  0FF4  1903               	skipnz
 11160  0FF5  2FE9               	goto	i1l777
 11161  0FF6  2FF7               	goto	i1l2654
 11162  0FF7                     i1l2654:	
 11163                           
 11164                           ;LED_Ctrl.c: 87: Led_ON=0;
 11165  0FF7  01FA               	clrf	_Led_ON
 11166                           
 11167                           ;LED_Ctrl.c: 88: LED_msec_Cnt=0;
 11168  0FF8  0020               	movlb	0	; select bank0
 11169  0FF9  01A6               	clrf	_LED_msec_Cnt
 11170  0FFA  01A7               	clrf	_LED_msec_Cnt+1
 11171  0FFB                     i1l2656:	
 11172                           
 11173                           ;LED_Ctrl.c: 89: }
 11174                           ;LED_Ctrl.c: 91: LED_msec_Cnt++;
 11175  0FFB  3001               	movlw	1
 11176  0FFC  07A6               	addwf	_LED_msec_Cnt,f
 11177  0FFD  3000               	movlw	0
 11178  0FFE  3DA7               	addwfc	_LED_msec_Cnt+1,f
 11179  0FFF  0008               	return
 11180  1000                     __end_of_LedON_Control_msec:	
 11181                           
 11182                           	psect	text43
 11183  0F3D                     __ptext43:	
 11184 ;; *************** function _Buzzer_Control_msec *****************
 11185 ;; Defined at:
 11186 ;;		line 42 in file "Buzzer_Ctrl.c"
 11187 ;; Parameters:    Size  Location     Type
 11188 ;;		None
 11189 ;; Auto vars:     Size  Location     Type
 11190 ;;		None
 11191 ;; Return value:  Size  Location     Type
 11192 ;;                  1    wreg      void 
 11193 ;; Registers used:
 11194 ;;		wreg, status,2, status,0, pclath, cstack
 11195 ;; Tracked objects:
 11196 ;;		On entry : 0/0
 11197 ;;		On exit  : 0/0
 11198 ;;		Unchanged: 0/0
 11199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11200 ;;      Params:         0       0       0       0       0       0       0       0
 11201 ;;      Locals:         0       0       0       0       0       0       0       0
 11202 ;;      Temps:          0       0       0       0       0       0       0       0
 11203 ;;      Totals:         0       0       0       0       0       0       0       0
 11204 ;;Total ram usage:        0 bytes
 11205 ;; Hardware stack levels used:    1
 11206 ;; Hardware stack levels required when called:    1
 11207 ;; This function calls:
 11208 ;;		_TMR2_StopTimer
 11209 ;;		_TMR2_ToggleTimer
 11210 ;;		i1_TMR2_WriteTimer
 11211 ;; This function is called by:
 11212 ;;		_One_msec_task
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           
 11217                           ;psect for function _Buzzer_Control_msec
 11218  0F3D                     _Buzzer_Control_msec:	
 11219                           
 11220                           ;Buzzer_Ctrl.c: 44: if(1==Buzzer_ON)
 11221                           
 11222                           ;incstack = 0
 11223                           ; Regs used in _Buzzer_Control_msec: [wreg+status,2+status,0+pclath+cstack]
 11224  0F3D  0020               	movlb	0	; select bank0
 11225  0F3E  0351               	decf	_Buzzer_ON,w
 11226  0F3F  1D03               	btfss	3,2
 11227  0F40  2F73               	goto	i1l2626
 11228                           
 11229                           ;Buzzer_Ctrl.c: 45: {
 11230                           ;Buzzer_Ctrl.c: 47: if(Buzzer_1msec_Cnt == Bbeep_tickPoint)
 11231  0F41  0831               	movf	_Bbeep_tickPoint+1,w
 11232  0F42  0635               	xorwf	_Buzzer_1msec_Cnt+1,w
 11233  0F43  1D03               	skipz
 11234  0F44  2F47               	goto	u116_25
 11235  0F45  0830               	movf	_Bbeep_tickPoint,w
 11236  0F46  0634               	xorwf	_Buzzer_1msec_Cnt,w
 11237  0F47                     u116_25:	
 11238  0F47  1D03               	skipz
 11239  0F48  2F5B               	goto	i1l2616
 11240                           
 11241                           ;Buzzer_Ctrl.c: 48: {
 11242                           ;Buzzer_Ctrl.c: 49: TMR2_WriteTimer(0);
 11243  0F49  3000               	movlw	0
 11244  0F4A  318D  255D  318F   	fcall	i1_TMR2_WriteTimer
 11245                           
 11246                           ;Buzzer_Ctrl.c: 50: TMR2_ToggleTimer();
 11247  0F4D  318D  25DC  318F   	fcall	_TMR2_ToggleTimer
 11248                           
 11249                           ;Buzzer_Ctrl.c: 53: Bbeep_tickPoint=Bbeep_tickPoint+Bbeep_tickPointMsec;
 11250  0F50  0020               	movlb	0	; select bank0
 11251  0F51  0832               	movf	_Bbeep_tickPointMsec,w
 11252  0F52  0730               	addwf	_Bbeep_tickPoint,w
 11253  0F53  00B0               	movwf	_Bbeep_tickPoint
 11254  0F54  0833               	movf	_Bbeep_tickPointMsec+1,w
 11255  0F55  3D31               	addwfc	_Bbeep_tickPoint+1,w
 11256  0F56  00B1               	movwf	_Bbeep_tickPoint+1
 11257                           
 11258                           ;Buzzer_Ctrl.c: 54: TMR2_WriteTimer(0);
 11259  0F57  3000               	movlw	0
 11260  0F58  318D  255D  318F   	fcall	i1_TMR2_WriteTimer
 11261  0F5B                     i1l2616:	
 11262                           
 11263                           ;Buzzer_Ctrl.c: 55: }
 11264                           ;Buzzer_Ctrl.c: 57: if(Buzzer_1msec_Cnt > Buzzer_Duration_1msec)
 11265  0F5B  0020               	movlb	0	; select bank0
 11266  0F5C  0835               	movf	_Buzzer_1msec_Cnt+1,w
 11267  0F5D  022F               	subwf	_Buzzer_Duration_1msec+1,w
 11268  0F5E  1D03               	skipz
 11269  0F5F  2F62               	goto	u117_25
 11270  0F60  0834               	movf	_Buzzer_1msec_Cnt,w
 11271  0F61  022E               	subwf	_Buzzer_Duration_1msec,w
 11272  0F62                     u117_25:	
 11273  0F62  1803               	skipnc
 11274  0F63  2F6E               	goto	i1l406
 11275                           
 11276                           ;Buzzer_Ctrl.c: 58: {
 11277                           ;Buzzer_Ctrl.c: 59: TMR2_WriteTimer(0);
 11278  0F64  3000               	movlw	0
 11279  0F65  318D  255D  318F   	fcall	i1_TMR2_WriteTimer
 11280                           
 11281                           ;Buzzer_Ctrl.c: 60: TMR2_StopTimer();
 11282  0F68  318D  2541         	fcall	_TMR2_StopTimer
 11283                           
 11284                           ;Buzzer_Ctrl.c: 62: Buzzer_ON=0;
 11285  0F6A  0020               	movlb	0	; select bank0
 11286  0F6B  01D1               	clrf	_Buzzer_ON
 11287                           
 11288                           ;Buzzer_Ctrl.c: 63: Buzzer_1msec_Cnt=0;
 11289  0F6C  01B4               	clrf	_Buzzer_1msec_Cnt
 11290  0F6D  01B5               	clrf	_Buzzer_1msec_Cnt+1
 11291  0F6E                     i1l406:	
 11292                           
 11293                           ;Buzzer_Ctrl.c: 64: }
 11294                           ;Buzzer_Ctrl.c: 66: Buzzer_1msec_Cnt++;
 11295  0F6E  3001               	movlw	1
 11296  0F6F  07B4               	addwf	_Buzzer_1msec_Cnt,f
 11297  0F70  3000               	movlw	0
 11298  0F71  3DB5               	addwfc	_Buzzer_1msec_Cnt+1,f
 11299                           
 11300                           ;Buzzer_Ctrl.c: 67: }
 11301  0F72  0008               	return
 11302  0F73                     i1l2626:	
 11303                           
 11304                           ;Buzzer_Ctrl.c: 68: else
 11305                           ;Buzzer_Ctrl.c: 69: {
 11306                           ;Buzzer_Ctrl.c: 70: TMR2_StopTimer();
 11307  0F73  318D  2541         	fcall	_TMR2_StopTimer
 11308  0F75  0008               	return
 11309  0F76                     __end_of_Buzzer_Control_msec:	
 11310                           
 11311                           	psect	text44
 11312  0D5D                     __ptext44:	
 11313 ;; *************** function i1_TMR2_WriteTimer *****************
 11314 ;; Defined at:
 11315 ;;		line 105 in file "mcc_generated_files/tmr2.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;  timerVal        1    wreg     unsigned char 
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;  timerVal        1    0[COMMON] unsigned char 
 11320 ;; Return value:  Size  Location     Type
 11321 ;;                  1    wreg      void 
 11322 ;; Registers used:
 11323 ;;		wreg
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/0
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11329 ;;      Params:         0       0       0       0       0       0       0       0
 11330 ;;      Locals:         1       0       0       0       0       0       0       0
 11331 ;;      Temps:          0       0       0       0       0       0       0       0
 11332 ;;      Totals:         1       0       0       0       0       0       0       0
 11333 ;;Total ram usage:        1 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; This function calls:
 11336 ;;		Nothing
 11337 ;; This function is called by:
 11338 ;;		_Buzzer_Control_msec
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           
 11343                           ;psect for function i1_TMR2_WriteTimer
 11344  0D5D                     i1_TMR2_WriteTimer:	
 11345                           
 11346                           ;incstack = 0
 11347                           ; Regs used in i1_TMR2_WriteTimer: [wreg]
 11348                           ;i1TMR2_WriteTimer@timerVal stored from wreg
 11349  0D5D  00F0               	movwf	i1TMR2_WriteTimer@timerVal
 11350                           
 11351                           ;tmr2.c: 108: TMR2 = timerVal;
 11352  0D5E  0870               	movf	i1TMR2_WriteTimer@timerVal,w
 11353  0D5F  0020               	movlb	0	; select bank0
 11354  0D60  009D               	movwf	29	;volatile
 11355  0D61  0008               	return
 11356  0D62                     __end_ofi1_TMR2_WriteTimer:	
 11357                           
 11358                           	psect	text45
 11359  0DDC                     __ptext45:	
 11360 ;; *************** function _TMR2_ToggleTimer *****************
 11361 ;; Defined at:
 11362 ;;		line 84 in file "mcc_generated_files/tmr2.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;		None
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;		None
 11367 ;; Return value:  Size  Location     Type
 11368 ;;                  1    wreg      void 
 11369 ;; Registers used:
 11370 ;;		wreg, status,2, status,0
 11371 ;; Tracked objects:
 11372 ;;		On entry : 0/0
 11373 ;;		On exit  : 0/0
 11374 ;;		Unchanged: 0/0
 11375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11376 ;;      Params:         0       0       0       0       0       0       0       0
 11377 ;;      Locals:         0       0       0       0       0       0       0       0
 11378 ;;      Temps:          1       0       0       0       0       0       0       0
 11379 ;;      Totals:         1       0       0       0       0       0       0       0
 11380 ;;Total ram usage:        1 bytes
 11381 ;; Hardware stack levels used:    1
 11382 ;; This function calls:
 11383 ;;		Nothing
 11384 ;; This function is called by:
 11385 ;;		_Buzzer_Control_msec
 11386 ;; This function uses a non-reentrant model
 11387 ;;
 11388                           
 11389                           
 11390                           ;psect for function _TMR2_ToggleTimer
 11391  0DDC                     _TMR2_ToggleTimer:	
 11392                           
 11393                           ;tmr2.c: 87: T2CONbits.TMR2ON ^= 1;
 11394                           
 11395                           ;incstack = 0
 11396                           ; Regs used in _TMR2_ToggleTimer: [wreg+status,2+status,0]
 11397  0DDC  0020               	movlb	0	; select bank0
 11398  0DDD  0C1F               	rrf	31,w	;volatile
 11399  0DDE  00F0               	movwf	??_TMR2_ToggleTimer
 11400  0DDF  0C70               	rrf	??_TMR2_ToggleTimer,w
 11401  0DE0  3901               	andlw	1
 11402  0DE1  00F0               	movwf	??_TMR2_ToggleTimer
 11403  0DE2  3001               	movlw	1
 11404  0DE3  06F0               	xorwf	??_TMR2_ToggleTimer,f
 11405  0DE4  0DF0               	rlf	??_TMR2_ToggleTimer,f
 11406  0DE5  0DF0               	rlf	??_TMR2_ToggleTimer,f
 11407  0DE6  081F               	movf	31,w	;volatile
 11408  0DE7  0670               	xorwf	??_TMR2_ToggleTimer,w
 11409  0DE8  39FB               	andlw	-5
 11410  0DE9  0670               	xorwf	??_TMR2_ToggleTimer,w
 11411  0DEA  009F               	movwf	31	;volatile
 11412  0DEB  0008               	return
 11413  0DEC                     __end_of_TMR2_ToggleTimer:	
 11414                           
 11415                           	psect	text46
 11416  0D41                     __ptext46:	
 11417 ;; *************** function _TMR2_StopTimer *****************
 11418 ;; Defined at:
 11419 ;;		line 90 in file "mcc_generated_files/tmr2.c"
 11420 ;; Parameters:    Size  Location     Type
 11421 ;;		None
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;		None
 11424 ;; Return value:  Size  Location     Type
 11425 ;;                  1    wreg      void 
 11426 ;; Registers used:
 11427 ;;		None
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11433 ;;      Params:         0       0       0       0       0       0       0       0
 11434 ;;      Locals:         0       0       0       0       0       0       0       0
 11435 ;;      Temps:          0       0       0       0       0       0       0       0
 11436 ;;      Totals:         0       0       0       0       0       0       0       0
 11437 ;;Total ram usage:        0 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; This function calls:
 11440 ;;		Nothing
 11441 ;; This function is called by:
 11442 ;;		_Buzzer_Control_msec
 11443 ;; This function uses a non-reentrant model
 11444 ;;
 11445                           
 11446                           
 11447                           ;psect for function _TMR2_StopTimer
 11448  0D41                     _TMR2_StopTimer:	
 11449                           
 11450                           ;tmr2.c: 93: T2CONbits.TMR2ON = 0;
 11451                           
 11452                           ;incstack = 0
 11453                           ; Regs used in _TMR2_StopTimer: []
 11454  0D41  0020               	movlb	0	; select bank0
 11455  0D42  111F               	bcf	31,2	;volatile
 11456  0D43  0008               	return
 11457  0D44                     __end_of_TMR2_StopTimer:	
 11458  007E                     btemp	set	126	;btemp
 11459  007E                     int$flags	set	126
 11460  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         99
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     14      73
    BANK1            80      0      42
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    PackageTxResponseData@data	PTR unsigned char  size(1) Largest target is 16
		 -> DigitalIN(BANK0[1]), AnalogSenseRawByte(BANK0[2]), eepromReadData(BANK1[16]), 

    char1bytetovalue@cksum	PTR unsigned char  size(1) Largest target is 1
		 -> Checksum(BANK0[1]), 

    char2bytetovalue@cksum	PTR unsigned char  size(1) Largest target is 1
		 -> Checksum(BANK0[1]), ProtocolManager@k(BANK0[1]), 


Critical Paths under _main in COMMON

    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _ProtocolManager->_PackageTxResponseACK
    _ProtocolManager->_PackageTxResponseNACK
    _ProtocolManager->_char2bytetovalue
    _char2bytetovalue->_chartovalue
    _char1bytetovalue->_chartovalue
    _PackageTxResponseData->_PackageTxResponseNACK
    _PackageTxResponseNACK->_valuetocharHighNibble
    _PackageTxResponseACK->_valuetocharHighNibble
    _valuetocharLowNibble->_valtoasciichar
    _valuetocharHighNibble->_valtoasciichar
    _LedONStartConfig->___lwdiv
    _BuzzerStartConfig->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _One_sec_task->_Fan_Control_Sec
    _Buzzer_Control_msec->_TMR2_ToggleTimer
    _Buzzer_Control_msec->i1_TMR2_WriteTimer

Critical Paths under _main in BANK0

    _main->_ProtocolManager
    _ProtocolManager->_PackageTxResponseData
    _PackageTxResponseData->_PackageTxResponseNACK

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   13375
                                             12 BANK0      2     2      0
                  _BuzzerStartConfig
                     _FanStartConfig
                   _LedONStartConfig
                    _LedONStatusBusy
                    _ProtocolManager
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      15
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM5_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      15
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ProtocolManager                                      5     5      0   10012
                                              7 BANK0      5     5      0
                  _ADC_GetConversion
                  _BuzzerStartConfig
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                        _EUSART_Read
                     _FanStartConfig
                   _LedONStartConfig
               _PackageTxResponseACK
              _PackageTxResponseData
              _PackageTxResponseNACK
                   _char1bytetovalue
                   _char2bytetovalue
 ---------------------------------------------------------------------------------
 (2) _char2bytetovalue                                     7     5      2    2181
                                              5 COMMON     5     3      2
                                              0 BANK0      2     2      0
                        _chartovalue
 ---------------------------------------------------------------------------------
 (2) _char1bytetovalue                                     4     3      1     425
                                              5 COMMON     4     3      1
                        _chartovalue
 ---------------------------------------------------------------------------------
 (3) _chartovalue                                          3     3      0     113
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _PackageTxResponseData                                6     4      2    2368
                                              1 BANK0      6     4      2
                  _EUSART_RX_Disable
                   _EUSART_RX_Enable
                _EUSART_TX_Completed
                       _EUSART_Write
              _PackageTxResponseNACK
              _valuetocharHighNibble
               _valuetocharLowNibble
 ---------------------------------------------------------------------------------
 (2) _PackageTxResponseNACK                                2     2      0     517
                                              9 COMMON     1     1      0
                                              0 BANK0      1     1      0
                  _EUSART_RX_Disable
                   _EUSART_RX_Enable
                _EUSART_TX_Completed
                       _EUSART_Write
              _valuetocharHighNibble
               _valuetocharLowNibble
 ---------------------------------------------------------------------------------
 (2) _PackageTxResponseACK                                 2     2      0     517
                                              9 COMMON     1     1      0
                                              0 BANK0      1     1      0
                  _EUSART_RX_Disable
                   _EUSART_RX_Enable
                _EUSART_TX_Completed
                       _EUSART_Write
              _valuetocharHighNibble
               _valuetocharLowNibble
 ---------------------------------------------------------------------------------
 (3) _valuetocharLowNibble                                 3     3      0     212
                                              5 COMMON     3     3      0
                     _valtoasciichar
 ---------------------------------------------------------------------------------
 (3) _valuetocharHighNibble                                4     4      0     212
                                              5 COMMON     4     4      0
                     _valtoasciichar
 ---------------------------------------------------------------------------------
 (4) _valtoasciichar                                       3     3      0     113
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _EUSART_TX_Completed                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART_RX_Enable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART_RX_Disable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LedONStartConfig                                     5     3      2    1795
                                              0 BANK0      5     3      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _FanStartConfig                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DATAEE_WriteByte                                     4     1      3     217
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      2     0      2     108
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _BuzzerStartConfig                                    4     3      1    1487
                                              0 BANK0      4     3      1
                    _TMR2_StartTimer
                    _TMR2_WriteTimer
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     444
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     549
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _TMR2_WriteTimer                                      1     1      0      31
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      22
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LedONStatusBusy                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0      22
                                              1 COMMON     1     1      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0      22
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR0_CallBack                                        0     0      0      22
                      _One_msec_task
 ---------------------------------------------------------------------------------
 (9) _One_msec_task                                        0     0      0      22
                _Buzzer_Control_msec
                 _LedON_Control_msec
                       _One_sec_task
 ---------------------------------------------------------------------------------
 (10) _One_sec_task                                        0     0      0       0
                    _Fan_Control_Sec
 ---------------------------------------------------------------------------------
 (11) _Fan_Control_Sec                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _LedON_Control_msec                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Buzzer_Control_msec                                 0     0      0      22
                     _TMR2_StopTimer
                   _TMR2_ToggleTimer
                  i1_TMR2_WriteTimer
 ---------------------------------------------------------------------------------
 (11) i1_TMR2_WriteTimer                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR2_ToggleTimer                                    1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR2_StopTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BuzzerStartConfig
     _TMR2_StartTimer
     _TMR2_WriteTimer
     ___lwdiv
     ___wmul
   _FanStartConfig
   _LedONStartConfig
     ___lwdiv
     ___wmul
   _LedONStatusBusy
   _ProtocolManager
     _ADC_GetConversion
     _BuzzerStartConfig
       _TMR2_StartTimer
       _TMR2_WriteTimer
       ___lwdiv
       ___wmul
     _DATAEE_ReadByte
     _DATAEE_WriteByte
     _EUSART_Read
     _FanStartConfig
     _LedONStartConfig
       ___lwdiv
       ___wmul
     _PackageTxResponseACK
       _EUSART_RX_Disable
       _EUSART_RX_Enable
       _EUSART_TX_Completed
       _EUSART_Write
       _valuetocharHighNibble
         _valtoasciichar
       _valuetocharLowNibble
         _valtoasciichar
     _PackageTxResponseData
       _EUSART_RX_Disable
       _EUSART_RX_Enable
       _EUSART_TX_Completed
       _EUSART_Write
       _PackageTxResponseNACK
         _EUSART_RX_Disable
         _EUSART_RX_Enable
         _EUSART_TX_Completed
         _EUSART_Write
         _valuetocharHighNibble
           _valtoasciichar
         _valuetocharLowNibble
           _valtoasciichar
       _valuetocharHighNibble
         _valtoasciichar
       _valuetocharLowNibble
         _valtoasciichar
     _PackageTxResponseNACK
       _EUSART_RX_Disable
       _EUSART_RX_Enable
       _EUSART_TX_Completed
       _EUSART_Write
       _valuetocharHighNibble
         _valtoasciichar
       _valuetocharLowNibble
         _valtoasciichar
     _char1bytetovalue
       _chartovalue
     _char2bytetovalue
       _chartovalue
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM5_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
     _TMR2_Initialize
       _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       _One_msec_task
         _Buzzer_Control_msec
           _TMR2_StopTimer
           _TMR2_ToggleTimer
           i1_TMR2_WriteTimer
         _LedON_Control_msec
         _One_sec_task
           _Fan_Control_Sec

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      7F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      E      49       6       91.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      2A       8       52.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      7F      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Feb  3 19:05:29 2017

              char2bytetovalue@cksum 0076                                    _i 0053  
                                  pc 0002                          __CFG_CP$OFF 0000  
                                 l80 0E39                  ___wmul@multiplicand 0074  
          __size_of_TMR2_ToggleTimer 0010                          __CFG_LVP$ON 0000  
                                l308 0D59                                  l259 0E87  
                                l620 0742                                  l296 0D73  
                                l289 0D8C                                  l741 06EF  
                                l744 06F2                                  l737 06EC  
                                l579 0418                                  l668 0550  
                                l862 0E61                                  _GIE 005F  
                                u250 0FB1                                  _PR2 001E  
                       __CFG_CPD$OFF 0000        LedONStartConfig@LedONNumBlink 0059  
                    _TMR2_Initialize 0DA0            __size_of_LedONStartConfig 0064  
                                wreg 0009                           _RXChecksum 0044  
                               S4474 0820                                 S4476 0800  
                       ?_EUSART_Read 0070             char2bytetovalue@valuehex 0058  
                               l4200 0209                                 l4120 010C  
                               l4122 011A                                 l4044 003F  
                               l4302 035A                                 l4222 025D  
                               l4126 0121                                 l4054 0054  
                               l3600 0F14                                 l4312 038E  
                               l4304 037C                                 l4240 02A6  
                               l4160 0189                                 l4080 008B  
                               l4400 0473                                 l3610 0F1E  
                               l3602 0F16                                 l4322 03AC  
                               l4306 0381                                 l4074 007F  
                               l3620 0F28                                 l3612 0F20  
                               l3604 0F18                                 l4252 02D1  
                               l4164 0190                                 l4420 06AD  
                               l3622 0F2A                                 l3614 0F22  
                               l3606 0F1A                                 l3630 0F3B  
                               l4350 03FB                                 l4254 02D4  
                               l4174 0191                                 l4158 017B  
                               l4078 0089                                 l4414 068D  
                               l3624 0F2C                                 l3616 0F24  
                               l3608 0F1C                                 l4344 03E6  
                               l4176 01C1                                 l4088 00B2  
                               l4432 06D5                                 l3618 0F26  
                               l3730 0749                                 l4370 042B  
                               l4362 0416                                 l4290 0347  
                               l4274 0319                                 l4426 06C9  
                               l3628 0F31                                 l3740 0753  
                               l3732 074B                                 l3724 0740  
                               l4364 041B                                 l4292 0354  
                               l4276 031D                                 l4188 01E5  
                               l3830 07DE                                 l3910 04AA  
                               l3750 075D                                 l3742 0755  
                               l3734 074D                                 l3726 0745  
                               l4390 0468                                 l4358 0410  
                               l3912 04AD                                 l3752 075F  
                               l3744 0757                                 l3736 074F  
                               l3728 0747                                 l4384 0456  
                               l4368 0420                                 l4376 0440  
                               l4288 0326                                 l4392 046C  
                               l2890 0D94                                 l3594 0F0E  
                               l3746 0759                                 l3738 0751  
                               l3764 0E5B                                 l3836 07E8  
                               l3852 06F5                                 l3596 0F10  
                               l3916 04B4                                 l3748 075B  
                               l3756 0764                                 l4396 0470  
                               l3862 0731                                 l3854 0700  
                               l3598 0F12                                 l3942 04F1  
                               l3758 0796                                 l2976 0E57  
                               l3794 0EFA                                 l3786 0EDC  
                               l3954 0517                                 l3938 04EB  
                               l3788 0EE8                                 l3868 073B  
                               l3892 0487                                 l3798 0F03  
                               l3966 0519                                 _LATA 010C  
                               _LATB 010D                                 u2215 0EE9  
                               u2135 0E02                                 _LATC 010E  
                               u2225 0EF3                                 u2235 0EFB  
                               u2155 0E62                                 u2165 0E67  
                               u2335 0EC3                                 u2195 0EDF  
                               u2937 0E34                                 _TMR2 001D  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _main 0672  
                    _TMR0_StartTimer 0D53                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                        __CFG_BORV$LOW 0000  
              chartovalue@charNibble 0073                                 start 0016  
                    _PWM5_Initialize 0D96                        __CFG_CSWEN$ON 0000  
                      __CFG_MCLRE$ON 0000           __end_of_LedON_Control_msec 1000  
          __size_of_DATAEE_WriteByte 001C              __end_of_TMR0_Initialize 0DCE  
                      ?_EUSART_Write 0070       __size_of_OSCILLATOR_Initialize 0009  
      __end_of_OSCILLATOR_Initialize 0D8C                     ??_valtoasciichar 0072  
                              _ADACT 009F                                ?_main 0070  
                      __CFG_WDTE$OFF 0000             __end_of_char1bytetovalue 0E27  
                              _T2CON 001F                                _LATC0 0870  
                              _LATC1 0871                                _LATC2 0872  
                              _LATB6 086E                                _LATC6 0876  
                     __CFG_DEBUG$OFF 0000                      __end_of___lwdiv 0F08  
                              i1l218 0011                                i1l406 0F6E  
                              i1l770 0FE3                                i1l774 0FE6  
                              i1l777 0FE9                                _OSCEN 091D  
                              _TMR0H 0016                                _TMR0L 0015  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E               ??_PackageTxResponseACK 0079  
                   __end_of_TMR0_ISR 0D67                      _DATAEE_ReadByte 0DB5  
       __end_of_valuetocharLowNibble 0DDC                                status 0003  
                              wtemp0 007E                      _TMR2_StartTimer 0D4A  
           __end_of_char2bytetovalue 0ED4                      _LedONStatusBusy 0002  
                         _Msec10_cnt 003A                     ??_FanStartConfig 0072  
                    __initialization 0018                         __end_of_main 06D9  
               __size_of_chartovalue 005B                       ??_EUSART_Write 0072  
            __end_of_TMR2_Initialize 0DAA          ?_INTERRUPT_InterruptManager 0070  
     __size_of_valuetocharHighNibble 0014        __end_of_valuetocharHighNibble 0E12  
                             ??_main 0064                      _TMR2_WriteTimer 0D67  
       __size_of_Buzzer_Control_msec 0039              __end_of_TMR0_StartTimer 0D56  
                             _ADCON0 009D                               _ADCON1 009E  
                             _ADRESH 009C                               _ADRESL 009B  
      valuetocharHighNibble@hexvalue 0077                               _ANSELA 018C  
                             _ANSELB 018D                               _ANSELC 018E  
                             _T0CON0 0017                               _T0CON1 0018  
                             _RC1REG 0199                               _RC1STA 019D  
                             u120_25 0FE0                               i1l2616 0F5B  
                             i1l2626 0F73                               i1l2634 0FC0  
                             i1l2642 0FC8                               i1l2652 0FEC  
                             i1l2636 0FC2                               i1l2644 0FD3  
            __end_of_PWM5_Initialize 0DA0                               i1l2654 0FF7  
                             i1l2638 0FC4                               i1l2646 0FDA  
                             i1l2656 0FFB                               u116_25 0F47  
                             u117_25 0F62                               u119_25 0FBD  
                             _OSCFRQ 091F                               _TX1REG 019A  
                             _TX1STA 019E                               _Fan_ON 0040  
                  ?_EUSART_RX_Enable 0070              ??_PackageTxResponseNACK 0079  
                             _Led_ON 007A              ??_PackageTxResponseData 005B  
                     __CFG_PWRTE$OFF 0000                   ??_EUSART_RX_Enable 0072  
                             ___wmul 0E59                       __CFG_STVREN$ON 0000  
                          ??___lwdiv 0076                               _byteIN 00B0  
                   ?_TMR0_Initialize 0070                        ?_One_sec_task 0070  
                   _TMR2_ToggleTimer 0DDC             __size_of_ProtocolManager 0442  
                  _ChannelNumberChar 0066              __end_of_DATAEE_ReadByte 0DC1  
                       __pdataCOMMON 007B                     _LedONStartConfig 06D9  
                  _BuzzerStartConfig 0798             ADC_GetConversion@channel 0075  
                    _Fan_Control_Sec 0DEC                __end_of_TMR0_CallBack 0D4A  
            __end_of_TMR2_StartTimer 0D4D              __end_of_LedONStatusBusy 0004  
                 ?_BuzzerStartConfig 0058                 __size_of_EUSART_Read 000A  
                  _SYSTEM_Initialize 07EA              __end_of__initialization 0038  
                 ?_SYSTEM_Initialize 0070                  ??_BuzzerStartConfig 0059  
                  chartovalue@hexval 0074                       __pcstackCOMMON 0070  
             __size_of_One_msec_task 001F                         __pidataBANK0 0D56  
                ??_SYSTEM_Initialize 0073                            ?_TMR0_ISR 0070  
            __end_of_TMR2_WriteTimer 0D6C                     _DATAEE_WriteByte 0E74  
                     ??_One_sec_task 0071                     ?_TMR2_Initialize 0070  
               _valuetocharLowNibble 0DCE                          _SetLEDcolor 0067  
          __end_of_BuzzerStartConfig 07EA                     ?_TMR0_StartTimer 0070  
          __end_of_SYSTEM_Initialize 07FF                           __pbssBANK0 0020  
                         __pbssBANK1 00A0                 __end_of_EUSART_Write 0D7A  
                   ?_PWM5_Initialize 0070                           __pmaintext 0672  
       __size_of_EUSART_TX_Completed 0004                              ?___wmul 0072  
                         ??_TMR0_ISR 0071                      __CFG_PPS1WAY$ON 0000  
                         __pintentry 0004                ?_valuetocharLowNibble 0070  
                __CFG_RSTOSC$HFINT32 0000              __end_of_Fan_Control_Sec 0DFE  
            __size_of_ADC_Initialize 0009       FanStartConfig@FanONDurationSec 0073  
                   ?_DATAEE_ReadByte 0072                    ?_char1bytetovalue 0075  
                            _SP1BRGH 019C                              _SP1BRGL 019B  
                            _OSCCON1 0919                              _OSCCON3 091B  
                 ??_char1bytetovalue 0076                    ??_ProtocolManager 005F  
                            _NVMADRH 0892                              _NVMADRL 0891  
                            _NVMDATH 0894                              _OSCTUNE 091E  
                            _NVMDATL 0893                              _NVMCON2 0896  
                            _PWM5DCH 0618                              _PWM5DCL 0617  
                 _LedON_Control_msec 0FB3                              _PWM5CON 0619  
                      _One_msec_task 0E90                              _PPSLOCK 0E0F  
                        _RxFrameType 0068              __size_of_TMR2_StopTimer 0003  
                  _EUSART_RX_Disable 0D4D                     ?_TMR2_StartTimer 0070  
                   ?_LedONStatusBusy 0070                   ?_EUSART_RX_Disable 0070  
               DATAEE_WriteByte@bAdd 0072                  ?_LedON_Control_msec 0070  
                _Blick_tickPointMsec 0024                         _CommandError 0046  
                      _ChannelNumber 0045                    ?_char2bytetovalue 0075  
                _Buzzer_Control_msec 0F3D                  ??_EUSART_RX_Disable 0072  
                 ??_char2bytetovalue 0077                      __size_of___wmul 001B  
                            ___lwdiv 0ED4                     ?_TMR2_WriteTimer 0070  
               ??_LedON_Control_msec 0070                              __ptext1 07EA  
                            __ptext2 0DA0                              __ptext3 0DC1  
                            __ptext4 0D53                              __ptext5 0D96  
                            __ptext6 0F76                              __ptext7 0D83  
                            __ptext8 0DAA                              __ptext9 0D7A  
                       _highByteChar 0043                 ?_Buzzer_Control_msec 0070  
              _OSCILLATOR_Initialize 0D83                            _T2CONbits 001F  
         __size_of_BuzzerStartConfig 0052            __end_of_EUSART_RX_Disable 0D50  
           ??_PIN_MANAGER_Initialize 0072                       ?_One_msec_task 0070  
      __size_of_PackageTxResponseACK 007A           __size_of_SYSTEM_Initialize 0015  
                          _LED_Color 007B                              clrloop0 0D6D  
               end_of_initialization 0038                 __end_of_One_sec_task 0D47  
           __end_of_TMR2_ToggleTimer 0DEC                    _EUSART_Initialize 0DAA  
                 _LedON_Duration_sec 003F                        ??_chartovalue 0072  
           __end_of_LedONStartConfig 073D       __size_of_PackageTxResponseNACK 007A  
      __end_of_PackageTxResponseNACK 05F8       __size_of_PackageTxResponseData 0100  
                 ?_EUSART_Initialize 0070        __end_of_PackageTxResponseData 057E  
                  _RxFrameDataLenCnt 004E               ??_valuetocharLowNibble 0075  
   LedONStartConfig@LedONDurationSec 0058                  ??_EUSART_Initialize 0072  
          __size_of_EUSART_RX_Enable 0003                     ?_Fan_Control_Sec 0070  
              ??_Buzzer_Control_msec 0071                      _Bbeep_tickPoint 0030  
              _valuetocharHighNibble 0DFE                __size_of_EUSART_Write 0008  
            __size_of_valtoasciichar 0035                     __CFG_FEXTOSC$OFF 0000  
           __end_of_DATAEE_WriteByte 0E90              TMR2_WriteTimer@timerVal 0072  
                          _RXPPSbits 0E24            __end_of_EUSART_Initialize 0DB5  
             PackageTxResponseData@i 005D                            _DigitalIN 0057  
          i1TMR2_WriteTimer@timerVal 0070                  __end_of_chartovalue 0798  
                     __end_of___wmul 0E74                        __pidataCOMMON 07FF  
                       _EUSART_Write 0D72                    __size_of_TMR0_ISR 0005  
                     _ADC_Initialize 0D7A               ?_OSCILLATOR_Initialize 0070  
            __size_of_FanStartConfig 0019                      ??_One_msec_task 0071  
                start_initialization 0018           __size_of_EUSART_RX_Disable 0003  
           __size_of_TMR0_Initialize 000D      __size_of_PIN_MANAGER_Initialize 003D  
                    _eepromWriteAddr 002C                      _eepromWriteData 00A0  
                     _TMR2_StopTimer 0D41                        ??_EUSART_Read 0072  
                _EUSART_TX_Completed 0D59                            _Buzzer_ON 0051  
                DATAEE_ReadByte@bAdd 0072                     _SetLedONNumBlink 004C  
                   __CFG_LPBOREN$OFF 0000          valuetocharHighNibble@hexval 0078  
               ?_EUSART_TX_Completed 0070            char2bytetovalue@highBchar 0059  
                           ??___wmul 0076                     ProtocolManager@k 0063  
                       _LED_msec_Cnt 0026               __size_of_TMR0_CallBack 0003  
             __end_of_ADC_Initialize 0D83                          __pdataBANK0 0066  
                    _ProtocolManager 003C             char1bytetovalue@LowBChar 0078  
             ?_valuetocharHighNibble 0070               __end_of_TMR2_StopTimer 0D44  
                        __pbssCOMMON 007A                            ___latbits 0001  
     PackageTxResponseData@frameType 005E                        __pcstackBANK0 0058  
              __size_of_One_sec_task 0003             __size_of_TMR2_Initialize 000A  
         __size_of_EUSART_Initialize 000B                       _txPacketlength 0041  
                __end_of_EUSART_Read 0D96            __size_of_char1bytetovalue 0015  
           __size_of_TMR0_StartTimer 0003                  _SetLedONDurationSec 004D  
                        _chartovalue 073D                     ___lwdiv@dividend 0074  
             _PIN_MANAGER_Initialize 0F76                ??_EUSART_TX_Completed 0072  
           __size_of_PWM5_Initialize 000A                             ?___lwdiv 0072  
                    ?_ADC_Initialize 0070                         _One_sec_task 0D44  
       ??_INTERRUPT_InterruptManager 0071                            __pswtext1 0820  
                          __pswtext2 0800                     _EUSART_RX_Enable 0D50  
          __size_of_char2bytetovalue 0025                             _BAUD1CON 019F  
                    ?_TMR2_StopTimer 0070                     ___lwdiv@quotient 0078  
                     _valtoasciichar 0F08             char1bytetovalue@valuehex 0077  
                      _TMR0_CallBack 0D47             __size_of_DATAEE_ReadByte 000C  
                  ??_TMR0_Initialize 0072                    ?_TMR2_ToggleTimer 0070  
                     ___wmul@product 0076                            clear_ram0 0D6C  
                           _PIE0bits 0090              valtoasciichar@hexvalue1 0073  
           __size_of_TMR2_StartTimer 0003                   ??_TMR2_ToggleTimer 0070  
            __end_of_ProtocolManager 047E             __size_of_LedONStatusBusy 0002  
__size_of_INTERRUPT_InterruptManager 0012                             _PIR0bits 0010  
                           _PIR1bits 0011         __end_of_PackageTxResponseACK 0672  
                  ?_LedONStartConfig 0058                             _TMR0_ISR 0D62  
                 ??_LedONStartConfig 005A                       _eepromReadAddr 002A  
                     _eepromReadData 00BA                    i1_TMR2_WriteTimer 0D5D  
        __size_of_LedON_Control_msec 004D                           _ADCON0bits 009D  
                  ___wmul@multiplier 0072                       _FanStartConfig 0E40  
                 ?i1_TMR2_WriteTimer 0070                             _Checksum 0056  
           __size_of_TMR2_WriteTimer 0005               __end_of_valtoasciichar 0F3D  
          PackageTxResponseData@data 0059                  _SetFANOnDurationSec 0049  
                        _LED_Sec_Cnt 003E                DATAEE_WriteByte@bData 0074  
                     ?_TMR0_CallBack 0070                          _EUSART_Read 0D8C  
                ??i1_TMR2_WriteTimer 0070                    ?_DATAEE_WriteByte 0072  
                     _eepromWriteLen 0048                    ??_TMR2_Initialize 0072  
     PackageTxResponseNACK@frameType 0058                   ??_DATAEE_WriteByte 0075  
                           _Msec_cnt 003C        PackageTxResponseACK@frameType 0058  
                  _ADC_GetConversion 0E27           valuetocharLowNibble@hexval 0077  
        __end_of_Buzzer_Control_msec 0F76                _PackageTxResponseNACK 057E  
          __end_ofi1_TMR2_WriteTimer 0D62              ??_OSCILLATOR_Initialize 0072  
       valuetocharLowNibble@hexvalue 0076                   ?_ADC_GetConversion 0072  
                  ??_TMR0_StartTimer 0072                _PackageTxResponseData 047E  
                     _SetBuzzNumBeep 004A               __end_of_FanStartConfig 0E59  
                   __size_of___lwdiv 0034        __size_of_valuetocharLowNibble 000E  
                  ??_PWM5_Initialize 0072                  _Bbeep_tickPointMsec 0032  
                ??_ADC_GetConversion 0074                           _T0CON0bits 0017  
                 _AnalogSenseRawByte 0054                      ?_valtoasciichar 0070  
                    ___lwdiv@divisor 0072                char1bytetovalue@cksum 0075  
                    ___lwdiv@counter 0077                             __ptext10 003C  
                           __ptext11 0EAF                             __ptext20 0D72  
                           __ptext12 0E12                             __ptext21 0D59  
                           __ptext13 073D                             __ptext30 0E59  
                           __ptext22 0D50                             __ptext14 047E  
                           __ptext31 0ED4                             __ptext23 0D4D  
                           __ptext15 057E                             __ptext40 0D44  
                           __ptext32 0D67                             __ptext24 06D9  
                           __ptext16 05F8                             __ptext41 0DEC  
                           __ptext33 0D4A                             __ptext25 0E40  
                           __ptext17 0DCE                             __ptext42 0FB3  
                           __ptext34 0E27                             __ptext26 0D8C  
                           __ptext18 0DFE                             __ptext43 0F3D  
                           __ptext35 0002                             __ptext27 0E74  
                           __ptext19 0F08                             __ptext44 0D5D  
                           __ptext28 0DB5                             __ptext45 0DDC  
                           __ptext37 0D62                             __ptext29 0798  
                           __ptext46 0D41                             __ptext38 0D47  
                           __ptext39 0E90                 valtoasciichar@hexval 0074  
           __size_of_Fan_Control_Sec 0012                          _txRS485flag 0052  
        DATAEE_WriteByte@GIEBitValue 0075                        __size_of_main 0067  
                   _char1bytetovalue 0E12     BuzzerStartConfig@BuzzDurationSec 005B  
                  ??_DATAEE_ReadByte 0074            __end_of_ADC_GetConversion 0E40  
                   ?_ProtocolManager 0070                       _AnalogSenseRaw 0028  
                        _lowByteChar 0042                           _RC1STAbits 019D  
                         _RC3PPSbits 0EA3                           _RB5PPSbits 0E9D  
                           int$flags 007E                        _eepromReadLen 0047  
                     _DelayMsecCount 0038              ??_valuetocharHighNibble 0075  
                  ??_TMR2_StartTimer 0072   __end_of_INTERRUPT_InterruptManager 0016  
         _INTERRUPT_InterruptManager 0004                    ??_LedONStatusBusy 0072  
                    ?_FanStartConfig 0070          PIN_MANAGER_Initialize@state 0072  
           LedONStartConfig@LEDcolor 005C                     _char2bytetovalue 0EAF  
                         _INTCONbits 000B                      ??_TMR0_CallBack 0071  
                        _NVMCON1bits 0895         PackageTxResponseData@dataLen 005A  
              __end_of_One_msec_task 0EAF                 _PackageTxResponseACK 05F8  
                           intlevel1 0000                    ??_TMR2_WriteTimer 0072  
                _LedON_Duration_msec 0020                _Buzzer_Duration_1msec 002E  
            ?_PIN_MANAGER_Initialize 0070             __end_of_EUSART_RX_Enable 0D53  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E0F  
                   ??_ADC_Initialize 0072                         ?_chartovalue 0070  
                     _RxFrameDataLen 004F               ?_PackageTxResponseNACK 0070  
             ?_PackageTxResponseData 0059           __size_ofi1_TMR2_WriteTimer 0005  
                 _SetBuzzDurationSec 004B                     ??_TMR2_StopTimer 0070  
                       _ToolTemp_adc 0036                   _RxFrameDecodeState 0050  
           char2bytetovalue@LowBchar 0075                     _Buzzer_1msec_Cnt 0034  
                    _TMR0_Initialize 0DC1                      _Blick_tickPoint 0022  
              ?_PackageTxResponseACK 0070                   EUSART_Write@txData 0072  
     __end_of_PIN_MANAGER_Initialize 0FB3                          _PWMTMRSbits 061F  
        __end_of_EUSART_TX_Completed 0D5D         BuzzerStartConfig@BuzzNumBeep 0058  
                  ??_Fan_Control_Sec 0070           __size_of_ADC_GetConversion 0019  
